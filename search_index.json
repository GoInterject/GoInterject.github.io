[{"title":"Release Notes","url":"/wReleaseNotes/2023-10_ReleaseNotes.html","content":" October 2023 Excel Addin v2.5.0.22 Released 10/13/23 ✅ jDataPortal DataResultNumber now supports Indexing from the end of the results - See docs ✅ Update source of identity providers displayed in the connection manager to all id providers in current client (includes overrides) ✅ Refresh user company list on activate/deactivate client ♻️ Legacy auth token is refreshed every 2 days instead of 19 ♻️ Inactive clients no longer show up in the company ddl 🐞 Opening report library now checks for legacy idsSession token refresh Portal Site Released 10/18/23 ✅ Added MFA config model to staff page in portal ✅ Added Checksum added next to the installer download button on portal site - See docs ♻️ Improved default description box size for data connections ♻️ Removed Unsubscribe button from portal site until functionality for it exists ♻️ New Interject companies are no longer automatically subscribed to the \"Interject Tools\" published app 🐞 Create user profile no longer populates logged in users information 🐞 Fixed header bleeding through company dropdown Interject Platform Released 10/13/23 ✅ Added conditional access for user logins to allow control federated user logins to Interject - See docs Documentation Updates Date Type Page Changes 10/3 Update Validation Report New sections 10/4 New Checksums for Installers New page 10/6 New Conditional Access New page 10/18 Update Drill: Financial Report Updated content, screenshots 10/18 Replace Develop: Editing Data Save Redesign of page 10/18 Replace Develop: Insert & Delete Data Save Redesign of page 10/24 New Setting Up the jDataPortal New page "},{"title":"Release Notes","url":"/wReleaseNotes/2023-11_ReleaseNotes.html","content":" November 2023 Documentation Updates Date Type Page Changes 11/2 New Release Notes New page, section 11/2 New Multi-Factor Authentication New page 11/2 New Developer Overview New landing page 11/2 New Java API Setup New page 11/2 Update Report Library Links New sections 11/2 New Report Library Organization New page 11/2 New AdxLoader Don't Match New page 11/2 New WebView2 Installation New page 11/2 Replace .Net API Setup Redesign of page 11/2 Replace Interject Roles Redesign of page 11/7 Update Added Interject icon to browser tabs New icon 11/7 Update Excel Best and Worst Practices New section 11/7 New Staff Page New page "},{"title":"Addins Missing","url":"/wTroubleshoot/Addin-Missing.html","content":" Overview Every once in a while, Excel Add-ins may end up missing or fail to load in Excel. If your Interject addin is missing, you can follow these steps to reset it. Reset via System Tray Click on the ^ icon in the Windows System Tray, right-click the Interject icon and click \"Reset Addins\": Reset via Interject Addin Manager In the Windows Start menu, type in \"Interject\" and click open \"Interject Addin Manager\": In the Interject Addin Manager, click \"Reset Excel Addins\" (If Excel is open you will need to close it down first): Reset via Developer Tab If the Developer tab is not showing in Excel, you can enable it by naviagting to File > Options. Then click on \"Customize Ribbon\" on the left navigation panel and ensure \"Developer\" is checked: On the Developer tab in Excel, click \"Excel Add-ins\" and ensure \"Interject\" is checked: Click \"COM Add-ins\" and ensure \"Interject\" is checked: "},{"title":"Adding a User","url":"/wAbout/Adding-a-User.html","content":" Overview Occasionally, new users will need to be added to Interject. This overview is a step by step process on how to add a new user to Interject using the Portal site. Adding a new user can be accomplished only by the ClientAdmin role. Adding a New User Step 1: Navigate to https://portal.gointerject.com. Step 2: Log in to Interject with your credentials. Step 3: After logging in, the dashboard will display different sections. To add a user, click on the Staff icon. Step 4: In the Organization Staff page, select the ADD USER button in the top right hand corner. The User Profile page will require some basic information for the new user. Step 5: After filling out the User Profile, click MORE OPTIONS. Step 6: The only other entry required is the User Name. If it is left blank, it will default to the email address. It is typical to have the user name the same as the email address. The other address fields are optional. Minimize the section by clicking SHOW LESS and move on to the password. Step 7: The password must have a minimum of 6 characters. After adding it, click on the Create Button to create the new user profile. The basic profile is complete! The user is assigned the Standard role by default. If any other role needs to be assigned, continue reading the next section. Adding an Interject Role: All new users by default are assigned to the Standard role, which means they can run reports in the Report Library. However, there are other roles such as managing updates to the Report Library, Custom Commands, and being a ClientAdmin. For a list of the Interject Roles, see here. For this scenario, David will be assigned to the ClientAdmin role. Step 1: Follow the above steps to log in to the Portal site and find the user in the Staff page that needs a new role. Step 2: Select the appropriate role from the Available Role list. Step 3: Click on the ADD NEW ROLE button to add the role. Step 4: Finished! David Lee now has the Standard and ClientAdmin roles. Additional Info: Before finishing up, below the list of the Organization Staff is a section labeled External Admins. This section is for any Interject Employees who are consulting on the project. To add an external admin, enter an Interject email address and click ADD EXTERNAL ADMIN. "},{"title":"Advanced Data Pull","url":"/wGetStarted/Advanced-Data-Pull.html","content":" Overview Interject reports can handle a wide variety of complex reports. Up to this point you have seen simple reports where a single recordset is returned to single area of the spreadsheet. This topic will share advanced reporting configurations that use multiple recordsets and multiple Interject report formulas and supporting functions to construct advanced presentations. Understanding the Business Use Case In the below instructions it will be helpful to understand the business use case for the reports examples used. Please review the example, Real-World Walkthroughs - Customer Aging. You will learn the user story for the Customer Aging Report and why users would drill to underlying reports like Customer Orders and Customer Aging Detail. The example below will be focusing on the Customer Aging Detail report. Be sure to complete the simple data pull example that preceded this topic before moving forward. Customer Aging Detail In this example, you will learn to create a third report, Customer Aging Detail, that will be drilled to from the Customer Aging Report. This report shows a customer's outstanding balance by individual invoice. The Aging Detail is a more complex report than shown in the earlier example Developer: Customer Orders, because it leverages two report formulas to create a report with subtotals. You should have already seen the Customer Aging Detail report while reviewing the business use case in the Customer Aging in Real-World Walkthroughs. "},{"title":"AdxLoader Don't Match","url":"/wTroubleshoot/AdxLoader.html","content":" Overview This issue results in an error message upon opening Excel: \"The file format and extension of 'adxloader.interject.dll' don't match. The file could be corrupted or unsafe. Unless you trust its source, don't open it. Do you want to open it anyway?\" Note: This file is a binary file so clicking to open this file will display unreadable characters. Simply click \"No\" and then perform the following steps to fix. Cause of Error The most likely cause of this error is that the bit version of Excel is out of sync with the Interject Addin bit version. This will happen if the architecture type of Microsoft Excel/Office is changed (e.g. 32 and 64 bit). Solution If your architecture bit version of Excel/Office changes, you will need to uninstall Interject and reinstall. This should sync up the bit versions. For more information, see the following pages: Uninstalling Installing Single User Installing Shared Computer Displaying Excel Bit Version You can verify the bit version of Excel by clicking on File on the menu and then Account. Click About Excel. The bit version is displayed: Helpful Microsoft Office Links For information regarding 32-bit versus 64-bit, see here. For downloading Microsoft Office, see here. For information on changing the architecture type, see here. "},{"title":"Changing &amp; Resetting User Passwords","url":"/wPortal/Altering-User-Passwords.html","content":" Overview This is a section that displays how to reset an Interject user’s password under the conditions that they are not logged in or they are logged in. Changing Passwords While Logged In Step 1: To change a password while logged in you will first have to navigate to User Profile under Settings. Step 2: Next you will input the old password into the Old Password field then we will input the new password into the New Password field and click Change Password. Step 3: The following message will appear to confirm that the password has changed. Reset Password Without Logging In Step 1 : To change a password without logging in you will first Navigate to the Interject Portal Site and click the forgot password button. Step 2: Then input your registered username and click the Reset My Password button. Text will appear to confirm the password change request has been sent to the email associated with the registered username. Step 3: Next navigate to the email from Interject regarding the password change and click the Reset Password button. This will take us to the Interject password reset screen. Step 4: Finally input the new password then click the Change My Password button. Note: The page will redirect back to the Interject Website Portal upon a successful password reset. "},{"title":"Addin Errors","url":"/wTroubleshoot/App-Errors.html","content":" Overview Errors with Excel Addins or the Interject Addin can occur for many reasons. Sometimes they are related to the environment or computer running Interject. It is important you have tools to capture everything that is interacting with Excel so it is easier diagnose the cause of the errors. This leads to faster troubleshooting and repair. Excel Drill Animations It is important to disable the animations feature of Excel. Running animations while working with data may slow performance and interfere with Interject events, such as Drill on Data events. Depending on the version of Excel you have installed, and the Windows operating system on your computer, there are several ways to disable Excel animation. Addins Missing If your Excel Addins go missing, you can follow these steps to reset them. Web Proxy Configuration The Interject Addin allows users to authenticate using Windows authentication. For this Interject uses System.Net.CredentialCache.DefaultCredential library to set up a proxy. Interject's default Windows proxy at the application level can prevent a client's machine level proxy. This will prevent a user from being able to log in. To get around this, there is an Interject setting where users and clients can disable the Windows proxy. Cloud File Uploads Incorrectly The Report Library provides a central hub where you can upload and download reports. Sometimes uploading a report from a cloud drive (e.g. OneDrive, SharePoint) results in errors. This guide helps you identify cloud files, reveals possible errors that may occur, and covers a few work-arounds. "},{"title":"Basics of Report Formulas","url":"/wAbout/Basics-of-Report-Formulas.html","content":" Overview Inside Interject tabular reports there is a hidden configuration section at the top of the worksheet. Notice in the following screenshot how the Customer Aging report from the Walkthrough begins at row 14? Above row 14 is a section devoted to the report configuration. The Report Formulas section is a common place where Interject Report Formulas are added to direct the behavior of the report. Most users of reports will not have any need to view this area. For advanced users, there are various reasons to access these formulas. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 2 Modifying Reports > Lab 2.1 Basics of Report Formulas. Accessing the Report Formulas Step 1: For this walkthrough, you will use the Customer Collections report located in the Interject Demos folder of the Report Library. When the report is opened it will be blank. It is ready for any filters before pulling data. Step 2: To see the formulas working behind Interject, you need to Unfreeze the panes hiding them. Select the View ribbon and select the Freeze Panes drop-down. Then choose the first operation, Unfreeze Panes. Step 3: Now scroll up and see the Report Formulas section of the report. Notice that now all the rows are visible, starting at row 1. Column Definitions Column Definitions define which columns of a spreadsheet will be populated with data. This is how Interject knows where to place data within the spreadsheet. Moving column definitions will change where data is placed the next time it is pulled. You have full control of what column labels that are shown in the reports. Notice that the column labels in row 21 are directly below the coinciding column definition in row 2. Since this column label row is displayed for users, you can make the text more readable by, for example, adding spaces for the column name 30Days to show in the report like 30 Days . Step 1: Interject uses the column definitions in row 2 to determine where data is placed in the report. The labels in row 21 are ignored. To show this, move the CustomerID label in row 2 and place it in Column N, but do not move the column label in row 21. Step 2: Now use Pull Datato see where the CustomerID data is populated. Notice that the CustomerID data is populating column N below the column definition. Step 3: Put the CustomerID back where it belongs in Column B. First, clear the report so you can remove the CustomerID data already in column N. Step 4: Move the CustomerID column definition value back to cell B2. Formatting Range The Formatting Range is the place designated to hold the formatting and formulas that will be copied down with the data in the report. When the report is populated, the formatting range is first copied down to the new rows in the report, along with any input text or formulas. Then the data specified in the Column Definition area is placed in the respective column. It is important to note, if the reporting range has values or formulas in the same column as the Column Definitions, it will be replaced with the data. A Formatting Range configuration is not required. If one is not specified in a Report Formula (discussed below), then the first row in the report is considered the Reporting Range. Report Formulas Report Formulas are a big part of how Interject directs data in and out of the spreadsheets. For example, you can see here that the Customer Aging Report contains 4 formulas, a pull and 3 drills. The first formula is a Report Range formula and will pull the data from a data source to the spreadsheet. There are other Interject report formulas to pull data (see Data Pull Functions). You will look at these later. The screenshot above also shows three ReportDrill() formulas that enable drill functionality. A drill lets us navigate to another spreadsheet report based on the context selected. Another type of Report Formula is the Save formula, which is not shown here. This type of Report Formula enables an application developer to build save back features into our reports, such as saving back comments on financial variances to a central database so they can be presented in other reports. Each of these formulas is activated by its corresponding button in the Interject Ribbon menu. If a report has multiple Pulls or Saves, Interject will activate them in order from left to right, for the first 1000 rows of the spreadsheet. If a report has multiple drills, Interject will show a popup list for you to select one specifically. The order of drills in this list will be based on the order of the drills in the report, from left to right and top to bottom. Hidden Parameters and Notes The Hidden Parameters and Notes section has two uses. First, it holds documentation on the configuration for other report writers to see. Second, it can contain hidden parameters and spreadsheet formulas that support the other areas of the spreadsheet report. In this example, the notes contain a basic overview of the report as well as what the drills do. This concludes the discussion of the basics of Report Formulas. Be sure to continue reading, since there are many advanced options to learn more about, which can be leveraged to create tailored reports and applications for the company's needs. "},{"title":"Cloud File Uploads Incorrectly","url":"/wTroubleshoot/Cloud-File.html","content":" Overview The Report Library provides a central hub where you can upload and download reports. Sometimes uploading a report from a cloud drive (e.g. OneDrive, SharePoint) results in errors. This guide helps you identify cloud files, reveals possible errors that may occur, and covers a few workarounds. Identifying Cloud Files You can identify the cloud file when you try to upload it to the Report Library. For example, the link path will be sourced from https://. Compare the following two examples: OneDrive link: SharePoint link: Description of the Errors After uploading a cloud file to the Report Library, it may display missing details such as the Uploaded Date: In addition, attempting to open the link may not do anything or may give the following error: Solution: Saving to Local Drive Another work-around is to save the file on a local non-cloud synced folder (e.g. \"Downloads\"). Then simply upload the file as a Report Library File: Solution: Uploading as a Website Link One work-around is to upload the cloud file as a Website link. Opening a Website link from the Report Library will simply open the URL in the Link Path. This may open the file, ask for credentials to log in, or simply download the file. "},{"title":"Common Dataportal Index","url":"/wIndex/Common-Dataportal-Index.html","content":" Overview These are a few common dataportals used in Interject for specific, supported applications. The exact dataportal code may vary depending on the Interject implementation. FinCube - The Financial Cube The FinCube dataportal is part of the Financials for Spreadsheets application. It is designed to provide financial reports for any combination of year, month, version, and between an organization's different reporting dimensions. It's a single dataportal that can support a wide variety of financial reports and variance analysis. SegmentInfo - Segment Search The SegmentInfo dataportal is part of the Financials for Spreadsheets application. It is a simple means to pull data for the various reporting dimensions for an organization supporting the financial segment groups that are configured. "},{"title":"Conditional Access","url":"/wDeveloper/ConditionalAccess.html","content":" Overview Conditional access is a feature to control and validate user provisioning via policies that act on the claims issued by your identity server. These are known as Conditional Access policies. Interject's identity server exposes an interface for allowing the provisioning of users in Interject via claims provided by third party identity providers. Conditional Statements Conditional Access policies at their simplest are if-then statements. That is, if a user wants access to Interject, then they must satisfy a condition. Example: If a user wants access, then the user role should be within a list of available roles If a user wants access, then the user-name should end with @gointerject.com If a user wants access, then the user-name should be available in the list of valid users If a user wants access, then the user department should be within a list of available departments Here are the various conditional checks available in the system: Equals Not Equals Contains Not Contains Ends With Starts With Regular Expression User Claims All the conditional checks are against the user claims. Claims are key value pairs. We get these claims from external providers. Note: Claim keys are not case sensitive. Here are a few examples of user claims: Claim Claim Key Claim Value Role http://schemas.microsoft.com/ws/2008/06/identity/claims/role Admin Email http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress user@example.com Conditional Rules Here is an example of how the conditional rules mapping is applied: Id ProviderClaimKey ProviderClaimValue Condition Regular Expression Rule1 http://schemas.microsoft.com/ws/2008/06/identity/claims/role Admin Equals Rule2 http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress 1@example.com,2@example.com,3@example.com Contains Rule3 http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress RegularExpression ^[A-Za-z0-9._%+-]+@gointerject.com$ Rule1: The user is allowed access only when the Claim value for http://schemas.microsoft.com/ws/2008/06/identity/claims/role (Role) is equal to 'Admin' Rule2: The user is allowed access only when the Claim value for http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress (Email) is either 1@example.com, 2@example.com or 3@example.com Rule3: The user is allowed access only when the Claim value for http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress (Email) satisfies the regular expression. Regular expression will satisfy only when the user name ends with @gointerject.com We can define any number of conditional access rules. If any of the rules fail, user access is restricted. Configuring Conditional Access To configure conditional access, provide us with the following for each rule you would like configured: Claim Key Claim Value Condition Regular Expression (only required for Regular Expression condition) "},{"title":"Contributing","url":"/Contributing.html","content":" Overview Hello and thank you for wanting to make a contribution to Interject. These are the guidelines that we use to make sure our documentation is the highest quality, and consistent. Included in this document is the documentation cycle from creation to approval. Contributing Process Flow Step 1: Navigate to our Github repository at GoInterject/GoInterject.github.io. Step 2: Fork/Clone the repository. For editors: Fork your own branch of the main master branch repository. For content reviewers: Clone the patch branch named “patch-x.x” (“x.x” in place of the current version number) on the main repository and host locally and make all your changes there before pushing to the origin (master) repository. Switch to “patch-x.x” branch. Clone the branch. ** Step 3:** Make your changes on your forked branch. Step 4: Make a pull request to a branch that is titled \"patch-x.x\". Step 5: The changes will be reviewed in the patch branch. Step 6: Once all changes are reviewed and approved, that patch branch will be merged into the master branch on a deployment schedule. Screenshot Requirements Screenshots are used heavily in our documentation. Below are our conventions and our process of including screenshots in the documentation. Screenshot Software Requirements Screenshots for our website are made consistent by using a screen capture program called Snagit. In order to keep screenshots consistent, make sure they are captured in the most current software (see above). When to Include a Screenshot Every step in a documentation page should be represented in a screenshot. Screenshots can contain multiple steps, but every step in the process of a lab or walkthrough should be shown somewhere in a screenshot. The user should be able to look at only the screenshots on a page and know exactly what to do. The following is a simple walkthrough of the recommended screenshot procedure. It is organized by the type of action/step the user is being instructed to take in a given screenshot. There will also be example use cases for some of the screenshot techniques in each section. Click Action (Arrow) If the instructions call for a click action, use a solid, red arrow pointing to the click location. Arrows should be: red, 7px in thickness, below the item if possible, have a middle-centered shadow behind them. No arrow is needed for \"Next\", \"Finish\" or \"Ok\" actions, or when only a single button is used in a screenshot. When to use an arrow in a screenshot. For click actions: To point to tab navigation steps. It is important to place arrows where they are easily seen, such as below the dark green menu of Excel 2016. Highlighting & Emphasizing When discussing a specific portion of a window, a window inside of the screenshot, or button press actions, use a red outline/rectangle that is 2px wide around the area/button to highlight it. \"Next\" and \"Close\" button press actions should also be emphasized by enclosing them in a red rectangle. Such outlines/rectangles should: be red, be 2px in thickness, be surrounding the button, have a middle-centered shadow behind them. Limit these outlines to 3 per screenshot for clarity. When to use outline/rectangle. To highlight click action areas on the screen if they are hard to see (you can use both an arrow and an outline): To emphasize a portion of a window. To emphasize a particular window within a screenshot, To highlight “Next”, “Close” and “Ok” buttons (do not use an arrow for this). To highlight clickable data-entry (capture) fields (use after a click action indicated by an arrow, if a data entry field comes up) (do not use both an arrow and a red border for this). To highlight checkboxes. Multi-Step Actions in a Single Screenshot (Numbered Steps) If multiple steps are contained in one image, label the steps 1, 2, 3, etc. in Snagit. This gives readers more direction when steps are complex. When using arrows and numbers together, always connect the arrow to a number and ensure that the arrow is projecting from the center of the number circle. Number-labeled steps should be: red, made using the numbering feature of Snagit, have a middle-centered shadow behind them, large enough to read (use Snagit’s default size), connected to any red arrows also used in the step. For more complex screenshots containing multiple steps, place steps in an ordered list above the image, numbered correspondingly and tabbed in once. Emphasizing Text or a Point in a Screenshot When emphasizing a point, underline the particular point with a 2px red line. Do not use this to highlight buttons within screenshots (instead use the red outline described above). Note on Complex Screenshots For complex screenshots, include more thorough text narration in the documentation. If a procedure is extremely involved, use a GIF. If a screenshot has multiple images, be sure to use an ordered list of steps within it. Note on Popups in Screenshots When screen capturing windows that contain popups, make sure the popup appears distinct from the page containing it. To do this, allow the popup to slightly overlap other content in the image. Do not line it up with any other lines on the page. Unless a screenshot of just the pop up is needed (for a special circumstance), make sure to take screenshots of popups with the windows in which they appear; it is important to show all images with as much context as possible. Screenshots of Excel Content For screenshots of Excel content: Include the Row and Column definitions in the spreadsheet to provide context, when appropriate. Include the Interject menu ribbon when it is being used. If the step depicted in the screenshot does not use the Interject menu ribbon, do not include it in the screenshot (to save space). Make sure that no personal or confidential data is visible on the screen when taking screenshots. Use mary@mycompany.com or joe@mycompany.com for masking report library and email data or remove all personal information using snagit to cover it. For login examples, use \"dummy\" login credentials. Use the dummy names consistently. If mary@mycompany.com is used once on a page, use it throughout that page. With the exception of login boxes, highlight all boxes from clicks to data entry (use 2px red border). Remove the cursor from the page when the screen is being captured, unless the cursor is needed. If an image is to appear truncated, manually add a \"ripped\" black border. Here is an example using a dummy credential. Here is an example using a ripped border (see left hand side). Tab Navigation in Screenshots When directing tab navigation (and sheet navigation in Excel), point to it with an arrow. This is especially helpful for larger screenshots. Spacing Surrounding Screenshots When including a screenshot in the markdown file, be sure to contain a space before the image and follow the image with a <br> and another space. ...content... ![](/images/Contributing/19.png) <br> ...content... Note for Content Reviewers When reviewing for publication, check that no assumptions are made regarding steps, major or minor, required in any process. Uploading and Saving Screenshots to the Documentation Site Generally, upload your screenshot images to be the exact size as the original you had taken. Smaller images, such as in-window popups, should be 360px wide, unless an otherwise more appropriate size is needed. Name your screenshots 01.png, 02.png, 03.png, etc. based on the order of their placement within the page. When saving screenshots, place them in the following directory: /images/[DirectoryToYourPageFolder] If a folder for your page does not exist, please add one and place all images in that folder. This ensures the most simple naming conventions of 01, 02, 03 as the images are displayed on the website. Adding Jekyll Headers to Page All pages must have Jekyll headers added to the top of the page in order for our search function to show it correctly. The way to denote the Jekyll is by three hyphens \"—\" at the top and bottom of the header. (Note: The \"#\" denotes comments below). --- title: Contributions #Name of Page layout: custom #Keep as custom keyword: #Whatever the document is about description: #A short description sitemap: True #Lets google know this needs to be indexed --- * * * #This inserts a horizontal line after the title Headings Most pages should have the \"Overview\" heading as a h2 (##). Subsequent headings should be marked as h3 (###) or h4 (####). Headings should be Title Case (following APA standards). Table of Contents When adding a new file to the navigation of the website, edit the TOC.yaml file, unless it is for an app branch of the website. When editing the TOC.yaml file, follow the current convention for all the other navigation links. ALL yaml files are located inside the _data folder of the website. TOC entries should always have a default link. For example, if the parent category group does not have a landing page, it should link to the first sub catagory page. Grammar/Spelling Ensure all extra lines are removed. Ensure all extra spaces are removed. Ensure spelling is correct. Ensure consistency is maintained for the spelling and capitalization of certain words (e.g. Data Portal, Walkthrough). Referencing Buttons and Text Whenever a button or menu item is referenced, mark the item as bold (**). Whenever instruction to enter text is given, the text in question should be bold. Whenever quotation marks are to be entered in the instructions, they should be escaped. For example: Select cell E4 and enter **=ReportRange(\\\"NorthwindCustomers\\\")** Lists Lists should be explicitly numbered to ensure it displays correctly across multiple platforms. For example: 1. Item 1 2. Item 2 3. Item 3 Not: 1. Item 1 1. Item 2 1. Item 3 Tables Tables should follow Jekyll/Markdown format for consistency wherever possible: | Item | Description | |-----|-----| | Item1 | This is the description to Item1 | | Item2 | This is the description to Item2 | | Item3 | This is the description to Item3 | Tables need not to have extra spaces as Jekyll will format the table and delete extra spaces. Only use extra spaces where it is necessary to visualize the table in the markdown file. When not possible, standard html table format should reflect the same standard table appearance for consistency. Links Ensure all links work. Links to external websites should be followed by: {:target=\"_blank\"}{:rel=\"noopener noreferrer\"} Code Blocks Code blocks are preceded by ``` to mark them as code. Generally, code should be be separated from the main content of the page. Consistency Wherever possible, maintain the same formatting standards and usage as used in other pages. You can inspect other pages for examples. Commit Message Standards All commit messages should follow this general layout. This is to ensure consistency in determining what has been changed. action(thingchanged): description of the change Actions When to use update This should be used when content currently exists, and you are modifying. I.e. grammatical error fixes, or replacing images add This action type should be used when you are creating a content page initially. remove This action type is to be used when you are removing a section or an entire page of documentation. create This should be used when you are creating a new section to existing documentation. The \"thingchanged\" should be a single word noun that describes as best as possible, the piece of UI that was changed. The \"description of the change\" should be an accurate description as to what in more detail was changed. Example: update(screenshots): replaced old SS's with new ones to match UI changes "},{"title":"Creating a Simple Report","url":"/wGetStarted/Creating-a-Simple-Report.html","content":" Overview Now that you know how to modify reports, you can take it one step further. In this section, you will create an Interject report completely from scratch. To make things easy, recreate a sheet from our previous examples that you are already familiar with. Go directly to any walk-through by clicking one of the links below. Customer Aging Report You will go through the process of building a Customer Aging report from scratch. It is a simple range report that will clearly illustrate how to use the ReportRange() formula. Customer Orders Report This example walks through creating a Customer Orders report that is slightly different than the last. It's another good example of the ReportRange() formula but uses two rows for each record to provide a more comprehensive presentation. "},{"title":"Creating with Interject","url":"/wGetStarted/Creating-with-INTERJECT.html","content":" Overview This section is for report writers who need to create or modify reports. You will run through basic modification, creation, and publishing of reports. Feel free to contact us if you cannot find your answer in these sections. A Lab Guide is offered to guide you through learning about the Interject features step-by-step. As you work through the labs, you will see this blue banner on documentation pages that lead you to the correct file for that particular page. If you are new to the Interject Add-In, these labs are a great place to start! Modifying an Existing Report Reporting needs change often. Account details, specific formatting, even spreadsheet formulas require modification, that is why Interject's reports are so highly customizable using familiar spreadsheet knowledge. This section walks through common report modifications using Customer Aging , Inventory , and Financial reports as an example. Creating a Simple Report This section details how to create reports from scratch. Here, you will walk through making a Customer Aging and Customer Orders report from the ground up. The focus is on using simple single range tabular reports. Fixed and Variable Reports Reports often require various formats and subtotal sections, and this is especially true for financial reports. This section goes through several, more advanced report examples: Inventory , Financial and Customer Aging Detail . These will illustrate how Interject provides a number of options for your reporting needs. Drilling Between Reports Creating drills, it is possible to generate a simple suite of reports that enable you and your end-users to navigate anywhere from within the spreadsheet environment. Examples in this section include building drills in a Customer Aging , Inventory , and Financial report . Also included is drilling to a separate workbook. There is more than one way for the user to interact with the drill feature. See the page Three Ways to Drill for more details. Hiding Rows & Columns ReportHideRowsOrColumns() is a function that allows you to hide both rows and columns when not needed. In this example, you will begin with hiding columns L, M, N, and O. To practice there is a file below that has been specifically prepared for this formula. Building jDropdowns When manually entering different filter values, it can be difficult to remember what the exact filter names are and which are even available. This is especially true in large reports with many filtering options. However, you can use Interject’s jDropdown formula to automatically create hyperlinked lists of available filters, which makes filtering in large reports a much simpler task. Working with Pivot Tables Pivot tables are excellent tools to help us find answers quickly. Interject can help simplify pivot table presentation and distribution. Special Column Definitions Special Column Definitions are optional tags that bring out additional features to your standard column definition rows. They are great for space savers or to allow for faster formatting of the Pulled data. Protecting Sheets Sheet Protection expands upon the already existing protection functions in excel but brings with it the Interject UI and security rights. To use it, navigate to the Interject ribbon and click on the Sheet Protector button in the Tools section. Using Report Macro The Report Macro function allows Interject to interact with public macros in Excel. These macros can be automatically run after pulling or clearning data. Using the Retained Feature When using Interject to pull data into your spreadsheet, the report area will be cleared before new data is inserted. In some situations, you may want to bypass the clear action and retain some formulas, since pulling could remove formulas you have on other columns related to certain data rows. Interject Run On Open Some reports require default values, settings, or have summary pages that must be pulled before others in order for the report to function properly. Using the Run on Open Interject property will auto-run the first tab that appears. Exporting Reports Interject reports can be published or exported when needed. In most situations, Interject reports are shared like a web page, where all end users have access but can only see cost centers they have rights to. Still, there are times when reports must be saved to file folders or emailed, and this section walks through the specifics of distribution and all the available methods. "},{"title":"Customer Aging","url":"/wAbout/Customer-Aging.html","content":" Overview This lab is a basic Customer Aging demonstration for tracking invoices for multiple customers. In this walkthrough, you will open a basic aging summary and modify it to fit your specific needs. You will then drill into the details tab, take notes on any unpaid invoices, then save them back to the database. This Detail report will also provide the data needed to drill further into each order and customer. You can go directly to any part of this walkthrough by clicking one of the links below. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 1 Real World Walkthoughs > Lab 1.1 Customer Aging. Navigating to the Aging Summary Step 1: Open the report Interject Customer Collections under the Interject Demos in the Report Library. This will bring up the Customer Aging Summary. Step 2: You can retrieve the data by clicking Pull Data in the Interject menu and clicking Pull Data in the subsequent popup. This will populate the data into the spreadsheet. Step 3: Since you are not concerned with all the customers right now– you only need the status of those in the Market sector–filter Market in the Company Name filter. Now use Pull Data again to refresh the data. Step 4: Once the companies are pulled, you can see that Save-a-lot-Markets has invoices 90 days overdue! Drilling Into the Aging Detail Step 1 : Now, use the Drill operation on the Customer Aging Detail report for a closer look at the overdue invoices. Here you can select any cell on the row below because as long as you select a cell on the row with the overdue invoices the Drill will take us to the details of that client's invoices. Once that cell is selected you can drill deeper into the data. Below are the descriptions for each step. First, select cell or row to drill. Select the Drill operation in the Interject Ribbon. Select the desired drill you would like to perform , in this case you are selecting Drill to Aging Detail. Complete the drill by selecting Do Drill. This allows us to see which invoices have not been paid. Looking deeper into the report, notice that more recent invoices are paid, but the customer is struggling to pay past-dated invoices. Step 2: Notice that Jose mailed a check for the first invoice and it should arrive on the 18th. However, you would still need to call about the other invoice and add a comment on what was discussed. Step 3: Now that you have talked with Jose, you find out that he will be mailing the check with the overdue funds tomorrow. To keep from forgetting, you can add a comment to your report. Saving the Data Step 1: Now that the notes are written down, you need click the Save Data operation to save the notes back to the database. Step 2: To do this, click the Save Data menu in the Interject Ribbon menu and the Save Data in the popup. Notice the Save Results column and ensure that it was updated correctly and there were no errors. Step 3: Once this is complete, use Clear and Pull the Customer Aging Detail report to ensure the note is saved in the database. Clicking the Clear operation will remove any data that was pulled into the spreadsheet. Notice that the filters are not cleared, so a re-pull is easy. Step 4: Now you will use the Pull Data operation the data again to ensure it is completely refreshed. You will see that the saved data was pulled back into the spreadsheet, confirming that it was saved correctly. Now, you can move to a Pivot Table so that you can easily manipulate the data provided by the Customer Aging tab. Moving to a Pivot Table Step 1: First, navigate to the Pivot table tab. To do this Click on the PivotTableAndReportRun tab. For this example,you are going to use a Company Name Market filter to narrow our search just like you did for Customer Aging. Step 2: Now lets use Pull Data to retrieve the data. From pulling, you can see that Save-a-lot-Markets has already paid their invoices for 1998 but are behind on previous invoices. If you want even more specific detail though, such as month-to-month information. You can alter the Pivot table to accommodate this. Step 3: Click anywhere inside the Pivot table to bring up the table's field list. Step 4: Now you can drag the Year-Mth box in the Row Labels to the column labels. Notice that you do not need to use thePull Data is needed to view the new layouts. From here you can see that Save-a-lot Markets had large invoices in July and August that are not payed. However, you can also see the effort to pay off those invoices in the following months by the over-payments they have made. Take note of this activity and proceed to the next report: Inventory Report Walk-Through. "},{"title":"Data Cell Functions","url":"/wIndex/Data-Cell-Functions.html","content":" Data Cell Overview Data Cells are focused on a single formula which can be placed anywhere in the spreadsheet and can ask for any financial number or summary from it. Once this single formula approach is understood, there is no limit to the combinations that can be created. This is typically an easier method to start writing custom reports. However, given their flexibility the report run times can take more than just a few seconds to complete, sometimes up to 5 minutes. Larger reports, such as one with 70,000 formulas, can take up to 10 minutes to complete. Fortunately, users may continue working with a spreadsheet while waiting for Data Cell reports to finish calculating. jAcct A helper function that specifies filters for up to six segments of a Chart of Accounts. jCell/jCellN jCell retrieves data based on the provided parameters. The first argument is typically a jAcct() lookup when a company has more than one segment to filter. The retrieved data is always summarized into a single value. jDesc This function is used to look up a context description based on a specific segment. "},{"title":"Data Connections","url":"/wPortal/Data-Connections.html","content":" Overview A Connection is used with Data Portals so Interject can connect to certain stored procedures within a database or to a custom website API. A single connection can be used by many Data Portals. The database connection can support MS SQL Server OLEDB as well as ODBC. ODBC allows connection to any other relational database. Currently, Interject only supports direct connections with databases that support stored procedures. This includes Oracle, MySQL, MariaDB and many others. For all other data sources, a custom website API can be created to connect the data to Interject. This is very similar to how a website application accesses its data layer. Using an API you can connect to PostgreSQL and noSQL databases like MongoDB. You can also use an API to connect to other cloud data APIs such as provided by SalesForce, Intacct, Netsuite, Quicken and many other cloud software services. Go directly to any topic below by clicking one of the links below. API Connections An API can be used with a Data Connection to connect to any database, including noSQL databases, using standard development practices that are used to develop website applications. You can also connect to other website APIs such as those from Salesforce, Netsuite, Intacct and many others. Database Connection A Datat Connection can be set up to connect directly to a database using a OLEDB or a .Net Adapter connection string for MS SQL Server or using a ODBC connection string to connect to Oracle, MySQL, or others that support stored procedures. "},{"title":"Interject Data Exchanges","url":"/wPortal/Data-Exchange.html","content":" Overview The following document is intended to communicate and overview of what data is handled by the Interject Addin, what data passes through the Interject Platform API, and what data passes through any other API within Interject's ecosystem. Interject provides this information for internal and external audit guidance, and for clients or prospective clients to check against their own data security and privacy protocols. API Communication Domain: platform.api.gointerject.com API Communication Summary for On-Prem Application [POST] /api/errorlog Used Infrequently. Used to \"report a problem\" and assist support team when on-prem users access the support menu. Passed Info: User ID Client ID Error XML [POST] /api/IdsTokenAndClients Used each time a user logs into Interject and is used to confirm auto-login from on-prem app. Passed Info: Authentication Package: Authentication Object (Json) Authentication Object (Encryption) Authentication Type ID User Context: NT Login Machine Name Full Name Domain Name: User ID Client ID User Roles IDS (Interject Data Systems) Login Name IDS Login Auth Type ID IDS Login Date UTC User Name UTC Expiration Date [POST] /api/online Confirms connectivity to the platform API on various actions of the on-prem application. No Parameters. [POST] /api/InterjectRequest/Anonymous Acquires the base contents of the settings file and initiates defaults prior to first login. Addin displays message \"Updating Configuration\" during this process. Passed Info: Data Portal Name Request Parameter List Pass Through Command Connection String Name Command Type Command Text Command Timeout On Connection String Lookup Supplemental Data Following is an example of post: InterjectRequestDTO { DataPortalName: null, RequestParameterList: [ { Name: \"@ClientPublicID\", InputValue: \"\" }, { Name: \"@SettingNames\", InputValue: \"AppConfig,SessionConfig\" }, { Name: \"@InstallCode\", InputValue: \"Interject Cloud\" }, { Name: \"@ReturnValuesXML\", InputValue: \"\" }, ], PassThroughCommand: { ConnectionStringName: \"\", CommandType: IdsDataModel.CommandType.StoredProcedure, CommandText: \"[app].[Client.Setting.Get]\", CommandTimeout: 20, OnConnectionStringLookup: <func>, }, SupplementalData: <dict<string,string>>, <- count 0 } Example of returned output <?xml version=\"1.0\" encoding=\"utf-8\"?> <root> <Global> <AppDataSource>InterjectPlatform</AppDataSource> <DataCellTimeOutSeconds>600</DataCellTimeOutSeconds> <DefaultAuthTypeId>10</DefaultAuthTypeId> <Initiated>True</Initiated> <InstallCode></InstallCode> <InstallCodeOption>InterjectCloud</InstallCodeOption> <LastSaved>4/15/2022 11:05:20 AM</LastSaved> <RetainPriorDataCellValuesInMemory>True</RetainPriorDataCellValuesInMemory> <ShowAdvancedMenu>false</ShowAdvancedMenu> <TurnOnDiagnosticsLogging>False</TurnOnDiagnosticsLogging> <WebProxyBehavior>3</WebProxyBehavior> </Global> <Clients></Clients> <Users></Users> <Other></Other> </root> [GET] /api/download/update Supports the update checking process Info Passed: Version type [GET] /api/cachedsettings Retrieves user configuration settings for logged-in user. Info Passed: Header ID Session Token Query String Public Client ID Local Cached Data Example of returned data: table(0) Last Update Time table(1) CacheCategoryID 1 ReportLibraryRoot table(2) CacheCategoryID 2 ReporLibraryFolders table(3) CacheCategoryID 3 ReportLinks table(4) CacheCategoryID 4 ReportLinkVersions Platform API Endpoints Click to Expand 1. https://platform-api.gointerject.com/api/AddinManagerLog 2. https://platform-api.gointerject.com/api/Admin/Client/Secret 3. https://platform-api.gointerject.com/api/Admin/DiagnosticsCode 4. https://platform-api.gointerject.com/api/Admin/ValidateDiagnosticsToken 5. https://platform-api.gointerject.com/api/ApplicationCache 6. https://platform-api.gointerject.com/api/AuthType 7. https://platform-api.gointerject.com/api/AuthType/Anonymous 8. https://platform-api.gointerject.com/api/CachedSettings 9. https://platform-api.gointerject.com/api/CachedSettings/Date 10. https://platform-api.gointerject.com/api/CachedSettings/Offering/Refresh 11. https://platform-api.gointerject.com/api/CachedSettings/Client/Refresh 12. https://platform-api.gointerject.com/api/Client 13. https://platform-api.gointerject.com/api/Client/Users 14. https://platform-api.gointerject.com/api/Client/Invite/Accept 15. https://platform-api.gointerject.com/api/Client/StatusChange 16. https://platform-api.gointerject.com/api/Clients 17. https://platform-api.gointerject.com/api/Credentials/IsValid 18. https://platform-api.gointerject.com/api/DataPortalConnection 19. https://platform-api.gointerject.com/api/DataPortalConnection/SelectOptions 20. https://platform-api.gointerject.com/api/DataPortalConnection/Active 21. https://platform-api.gointerject.com/api/DataPortalConnection/Redirect 22. https://platform-api.gointerject.com/api/DataPortal 23. https://platform-api.gointerject.com/api/DataPortal/Clone 24. https://platform-api.gointerject.com/api/DataPortal/Active 25. https://platform-api.gointerject.com/api/DataPortalParameter 26. https://platform-api.gointerject.com/api/DataPortalParameter/SortOrders 27. https://platform-api.gointerject.com/api/DataPortalParameter/CustomCommandDefaultSystemParameters 28. https://platform-api.gointerject.com/api/DataPortalParameter/SchedulerDefaultSystemParameters 29. https://platform-api.gointerject.com/api/Download 30. https://platform-api.gointerject.com/api/Download/Links 31. https://platform-api.gointerject.com/api/Download/PreviousVersion 32. https://platform-api.gointerject.com/api/Download/Update 33. https://platform-api.gointerject.com/api/Download/InstallerFile 34. https://platform-api.gointerject.com/api/Download/Installer/Anonymous 35. https://platform-api.gointerject.com/api/Download/Installer 36. https://platform-api.gointerject.com/api/EffectiveClient 37. https://platform-api.gointerject.com/api/Email/Send 38. https://platform-api.gointerject.com/api/Email/Queue 39. https://platform-api.gointerject.com/api/ErrorLog 40. https://platform-api.gointerject.com/api/Eula 41. https://platform-api.gointerject.com/api/ExternalAdmin 42. https://platform-api.gointerject.com/api/IdsToken 43. https://platform-api.gointerject.com/api/IdsTokenAndClients 44. https://platform-api.gointerject.com/api/IdsToken/PlainText 45. https://platform-api.gointerject.com/api/Installer/Updates 46. https://platform-api.gointerject.com/api/InterjectRequest/Anonymous 47. https://platform-api.gointerject.com/api/Invite 48. https://platform-api.gointerject.com/api/Invite/Request 49. https://platform-api.gointerject.com/api/License 50. https://platform-api.gointerject.com/api/License/Token 51. https://platform-api.gointerject.com/api/Logging 52. https://platform-api.gointerject.com/api/Logging/DllErrors 53. https://platform-api.gointerject.com/api/Logging/DataCallLogs 54. https://platform-api.gointerject.com/api/Logging/BatchLogs 55. https://platform-api.gointerject.com/api/Logging/RAMReadingLogs 56. https://platform-api.gointerject.com/api/Logging/TimerLogs 57. https://platform-api.gointerject.com/api/Logging/ReportLibraryDataPortal 58. https://platform-api.gointerject.com/api/NLog 59. https://platform-api.gointerject.com/api/NLog/IsConnected 60. https://platform-api.gointerject.com/api/OAuthToken 61. https://platform-api.gointerject.com/api/Offering 62. https://platform-api.gointerject.com/api/Password 63. https://platform-api.gointerject.com/api/Password/Admin 64. https://platform-api.gointerject.com/api/PasswordReset 65. https://platform-api.gointerject.com/api/PasswordReset/Admin 66. https://platform-api.gointerject.com/api/PasswordReset/Welcome 67. https://platform-api.gointerject.com/api/Online 68. https://platform-api.gointerject.com/api/ReportCategory 69. https://platform-api.gointerject.com/api/ReportCategory/Link 70. https://platform-api.gointerject.com/api/ReportLink 71. https://platform-api.gointerject.com/api/ReportLink/File 72. https://platform-api.gointerject.com/api/ReportLink/Disable 73. https://platform-api.gointerject.com/api/ReportLinkVersion 74. https://platform-api.gointerject.com/api/ReportLinkVersion/File 75. https://platform-api.gointerject.com/api/Role 76. https://platform-api.gointerject.com/api/Role/IsClientAdmin 77. https://platform-api.gointerject.com/api/ScheduledJob 78. https://platform-api.gointerject.com/api/ScheduledJob/Instructions 79. https://platform-api.gointerject.com/api/ScheduledJob/NextExecutionDates 80. https://platform-api.gointerject.com/api/Settings 81. https://platform-api.gointerject.com/api/Subscription 82. https://platform-api.gointerject.com/api/Subscription/DataPortal 83. https://platform-api.gointerject.com/api/ClientLinkOfferingUpdate 84. https://platform-api.gointerject.com/api/Subscriber 85. https://platform-api.gointerject.com/api/User 86. https://platform-api.gointerject.com/api/User/Generic 87. https://platform-api.gointerject.com/api/User/IsLockedOut 88. https://platform-api.gointerject.com/api/User/IsValid 89. https://platform-api.gointerject.com/api/User/Enabled "},{"title":"Data Pull Functions","url":"/wIndex/Data-Functions-Landing.html","content":" Overview Data Pull Functions are focused on getting specific data to the report in the right way and placed inside the spreadsheet. There are a variety of functions and options therein to give flexibility in what data is displayed. ReportRange The ReportRange function pulls data from a data source and inserts it into a single range within a spreadsheet. ReportFixed The ReportFixed function pulls data from a data source and inserts it into a spreadsheet. It is similar to the ReportRange function but with the addition of receiving row names as input in addition to column names. Only data that is mapped to both these row and column names from the data source will be inserted. ReportVariable The ReportVariable function pulls data from a data source and inserts it into a spreadsheet. It is similar to the ReportFixed function because it takes row names as input in addition to column names. Only data that is mapped to both these row and column names from the data source will be inserted. This function differs from the ReportFixed function in that it will group the data based on the values defined in the RowDefRange argument. The grouping feature allows the data to be collapsed and expanded by category. ReportLookup The ReportLookup function pulls a single piece of data from a data source and inserts it into a single cell within a spreadsheet. "},{"title":"Data Portals","url":"/wPortal/Data-Portals.html","content":" Overview A Data Portal uses a Data Connection to connect to either a stored procedure within a database or to a website API controller in a customer website API. In this section, you will quickly set up a Data Portal for a database to pull data into our spreadsheet. Setting up an Data Portal to connect to a website API is not covered in this documentation yet as the sections are currently under construction. Please contact us directly for assistance with Website APIs. Setting up a Data Portal Step 1 : To setup a Data Portal click on the Data Portals icon. Step 2 : In the Data Portals page, select the New Data Portal button in the top right corner. The new page will look like below: Step 3 : The Data Portal Details page will contain the following information for the new data portal: Data Portal Code : A unique name used when setting up report formulas. At this time this is a unique name across the Interject community. Description (optional) : Description of what the Data Portal is doing Category (optional) : Text that can be used to group Data Portals for easy searches later. Connection : Data Connection that will be used for connecting to the database or API. Website provides a dropdown of data connections that have been created. Command Type : The type of command that will be executed. By default, the Data Portal uses the Stored Procedure Name command option. This field is not required for Data Portals using an API connection. Stored Procedure / Command : Full name (including schema) of stored procedure to be executed by this Data Portal. This field is not required for Data Portals connecting to an API connection. Since this field is part of the request object that is provided to an API, the developer can choose to use it within the API they create. Api Relative Url : This setting indicates the rest of the API URL that will be concatenated with the root URL of an API Data Connection when a request is sent. For example, the root URL for the connection may be https:[api.myapi.com] . If your API controller name is CustomerData, then you would type \\CustomerData in API Relative URL. The API request would be sent to https:[api.myapi.com]\\CustomerData. This field is ignored when a Data Portal uses a database connection. Helper Default Columns (optional) : You can use a comma delimited list to set default columns that will appear when a new report is created using the Report Builder. Is Custom Command : When set to yes, allows background jobs to run from the Custom Commands Window. Custom Commands require specific parameters to work with the Custom Commands window. See the Interject Ribbon on how to use Custom Commands. Overview of Parameters Parameters are an important feature of Data Portals. There are two types, Formula and System Parameters. Formula Parameters Formula Parameters are passed into the Data Portal from the user inputs in the spreadsheet report or app. In setting up a spreadsheet using Report Formulas, each parameter input can be assigned to a spreadsheet cell so they are passed with the data request. Parameters are often used as filters but can be used for other things as well, depending on the imagination of the developer. They can determine the order that data is returned, or they can be output parameters that are returned from the data request. They are building blocks to create a useful experience to the end users. System Parameters System Parameters are automatically passed into the Data Portal from the Interject Add-In. They are not considered in the Report Formulas since they are only passing user content data. Choose from a list of pre-configured system parameter types but note the data type that is shown. When adding the System Parameters to a stored procedure or website API, matching the data type is important. Adding New Parameters Now that the Data Portal is created, you can set up our parameters for the Data Portal. These parameters correlate to the name of the parameters in the stored procedure. If a custom data API is used, the API will be coded to expect the specific parameter name. Step 1 : To add a Formula Parameter click on the Click here to add a Formula Parameter button. Step 2 : The input fields for the new Formula Parameter will be shown: Name : name of parameter in stored procedure or API Type : data type of parameter Direction : configure the parameter as an input parameter or an output parameter that will be returned to the spreadsheet Step 3 : The More button can be used to show optional inputs. You can set a default value or the datatype length if it is required. You can also set additional fields that will be used with Report Builder. These Report Builder fields are used to help easily create a report within Excel based on a Data Portal. Below is a description of the fields: Helper Name : This adds a friendly name for the report parameter input in the Report Builder. Otherwise the parameter name is used, which has no spaces. Helper Default : This inserts a default value into the cell of the Excel report when using the Report Builder. Options : Use a comma separated list to provide the Excel user with a drop down list of options. Comments : This inserts an Excel comment, with our text, into the cell of the Excel report when using the Report Builder. To see how these fields are used when setting up a report using Report Builder click here. (You will not be using any of these inputs in this example.) Step 4 : Once done defining a parameter, you can click on the save icon to save the changes. Step 5 : To add a System Parameter, click on the Click here to add a System Parameter button. Step 6 : Repeat the previous steps to add additional parameters as needed. Note: The order in which you add the Formula Parameters must match the order in the Param() formula used in the spreadsheet Report Formula. The Data Portal is now ready to be used with Report Builder and within Interject Report formulas. System Parameters Options There are a number of options that can be used as system parameters. The list below provides a quick summary of the options: Name Data Type Description Interject_XMLDataToSave varchar(max) Required for saving data. It contains XML for the designated cells values Interject_ColDefItems varchar(max) Provides the Column Definitions in XML designated within the report formula. Interject_RowDefItems varchar(max) Provides the Row Definitions in XML designated within the report formula. Interject_SourceFileAndPath varchar(500) Provides the path and file name delimited by | of the current file Interject_SourceFilePathAndTab varchar(1000) Provides the path, file name and active tab name delimited by | of the current file. Interject_NTLogin varchar(50) Provides the user’s computer login name for their current session. Interject_UserID varchar(50) Provides the Interject User ID for their current session. Interject_ClientID varchar(50) Provides the Interject Client ID for their current session. Interject_LoginName varchar(50) Provides the Interject username for their current session. Interject_ExcelVersion varchar(50) Provides the users Excel version. Interject_UserRoles varchar(1000) Provides the Interject roles assigned to the user. Interject_LocalTimeZoneOffset money Provides a number (0.000) that represents that offset of the user’s time to UTC time. Interject_ReturnError varchar(2000) Is an output parameter that can be used to return an error back to the user. Pass empty string for no error. Interject_RequestContext nvarchar(max) Provides all above request context and both the open text and encrypted version of the user context. "},{"title":"Defining Interject for Developers","url":"/wGetStarted/Defining-INTERJECT-for-Developers.html","content":" Overview Before you get into the details and hands-on examples for developers, it is important to explain how the Interject platform works. Interject directly links a database stored procedure or website API to the Excel interface, in a similar way that middle-tier logic connects to a website application. Developers often assume that Interject is useful only in building simple reports, not extending to workflow creation or collecting user inputs. However, Interject is truly an application platform that can extend reports into two-way interfaces, which have the impact and scalability of a website application. Two Basic Concepts Go a Long Way The Interject process starts with two basic concepts. Interject connects Excel to a middle-tier service that communicates with external or internal data sources. It supports retrieving and saving data. Interject navigates and drills between spreadsheet tabs within the Excel application like a multi-page website. Data Workflow The simplified diagram below illustrates the flow of data through the Interject platform. Users log in to Interject, which then returns settings, including the data connection configuration, that can be used in spreadsheet applications. The Interject Add-In in Excel uses these settings to build reports and apps that leverage the connection configuration to directly link a user session to a middle-tier service, such as a stored procedure in a database or a data web service (a data API). When Interject makes the connection between the user session and the middle-tier service, their authentication context is passed through so you can handle security and row-level views as needed. The illustration above shows the cloud model of the Interject platform, but there are hybrid models that allow for full on-premise dependency. Managing the distribution of spreadsheet reports or apps is just as important as building the spreadsheet app itself. Interject provides the Report Library to publish reports so they are quickly accessible while still protecting and tracking versions of the source templates. The process also begins to teach users that they can access their data without repeatedly saving files locally, just like they learned with website applications. Publishing reports and apps can be done through other file-sharing tools or corporate intranets as well. "},{"title":"Interject Report Layout and Design Standards - Update","url":"/wDesign/Designing-Excel-Reports.html","content":"Overview Based on Stock 2010 'Austin' theme. Theme file can be applied to Excel 2007 and 2010 Workbooks. Not compatible with Excel 2003. Example Excel Workbook compares our theme to standard office theme. Some colors will look \"terrible\" if the user does not have our theme present and the default theme applies. If the worksheet/workbook you are creating will be used by the customer to copy/paste values into other workbooks, please be aware that there are some bad conversions (like the Purple in the Office standard). Avoid using those colors if you know users will copy and paste into other workbooks. Please review and try to utilize on future templates. This is still a work in process so feel free to contribute further direction. Hidden Report Sections The blue section at the top of this image is hidden, and contains several sections used to help the report. The sections shown below may not be used with every report, but you can use these as a guide on how to organize your own report. Fincube Column Definitions Has all of the column names used in the final SQL SELECT statement from the called stored procedure. Additional data ReportFixed Column Definitions: Column definitions for the second pull in the report. Like above, but seperated out here to clearly identify that these column headers come from two different sources. Formatting Range Used by the Pull used in the Fincube formula. Has some straight forward formatting, but also some conditional formatting. For example, there is a hidden column saying if the Account is editable or not, and the resulting row is Yellow or Gray depending on what that column says. Month Column to be used in JE Query Drill This is intended to only apply to Actuals. Like the sections above for the Pull columns, just used for the Drill formulas. If there is a value on this row, Interject will think that column is drillable within the range of values. Report Formulas Has all of the report formulas. The formulas shown are executed in the order that they are listed, and all of the formulas are labeled with what they do. ReportSave Column Definitions The column headers used by the called stored procedure save process. Usually, the column headers are column names in the resulting XML. Hidden Parameters and Notes All of the parameters and calculations, used in the Report Formulas and in the report below. It is good to use this section for any complex calculations or formatting you need to consider, to keep your formulas and visible report clean. In many cases, it is is easier to maintain this section instead of all of the logic within each of the formulas or the visible report section. Hidden Parameters Fincube formulas and other Interject Data Portals have the potential to take several inputs, and become complicated. To help in their legibility, it is best to organize your input parameters in the hidden section like the image above shows. You can then customize those input parameters with Excel logic, which is easier to manage outside of the actual Interject Formula. The highlighted portions of the screenshot are examples of how to handle this. For example, the Retain Rows cell on F41 is fed into the Interject formula. The contents of F41 looks at two of the filter options in the visible portion of the report, Retain Rows and Syst. If Retain Rows is set to Yes, then Fincube here will retain the rows on the Pull. If Syst is set to Yes, it will retain on the columns Acct, Syst, and Sbst, and on No it will only retain on Acct. All the logic for both of them are done in F41, and the formula only needs to look at the result of the calculation. Customizing Columns Shown This report is actually very wide. There are over 8 sections, each with 12 columns for all of the month. When combined with the row headers on the left, spaces, and smaller sections, that makes the report over 100 columns wide. To help with this, we hide the columns we do not need to see. The columns shown or hidden can change though, depending on the Year-Month. To help make this dynamic, we use an additional tab called Lookups. The "},{"title":"Developer Overview","url":"/wApi/DeveloperMain.html","content":"Overview Web APIs (Application Programming Interfaces) have become the fundamental building blocks of the interconnected web. These interfaces enable different software systems and applications to communicate with the Interject Addin, facilitating the exchange of data and functionality in a seamless and standardized manner. Interject provides 3 web APIs built on 3 different platforms. These Web APIs serve as a bridge between custom data sources and the Interject Excel Addin, allowing them to request and share information, perform actions, and deliver real-time updates. .Net API The Interject .Net API is built on C# and the .NET Framework. Python API The Interject Python API is built on Python and Flask. Java API The Interject Java API is built on Java and the Spring Framework. "},{"title":"Developing With Interject","url":"/wGetStarted/Developing-with-INTERJECT.html","content":" Overview This section is for professional developers who create the data pathways for reports and applications that can edit data. To facilitate this section, we provide a sample database to assist in training. Please contact us for the files at info@gointerject.com. The sample database is called Interject_Example_v1. This database is available for SQL Server versions 2008 to 2017 and works easily with the free express version. Download SQL Server Express here. To complete the developer training, you must have Client Admin permissions within an existing Interject account. Verify the correct role at the Interject Website Portal at https://portal.gointerject.com For help with logging in, see Logging In to the Website Portal. Navigate by using the following links to continue with the training objectives: Interject Website Portal The Interject website portal is a central place to manage Interject client settings and user profiles. For an Interject developer, the most used areas of the Interject website portal are managing connections and data portals. Defining Interject for Developers Developers often assume that Interject is useful only in building simple reports, not extending to workflow creation or collecting user inputs. However, Interject is truly an application platform that can extend reports into two-way interfaces, which have the impact and scalability of a website application. Simple Data Pull To clearly illustrate the end-to-end workflow of developing a report, you can begin with several simple data pull examples showing different report configurations. You will be reusing Interject reports used in previous sections, because these should be familiar to you if you read this documentation from the beginning. By the end of these sections, you will understand the process of creating spreadsheet friendly reports that can drill to other reports. Advanced Data Pull Interject reports can handle a wide variety of complex reports. Up to this point you have seen simple reports where a single recordset is returned to single area of the spreadsheet. This topic will share advanced reporting configurations that use multiple recordsets and multiple Interject report formulas and supporting functions to construct advanced presentations. Simple Data Save Interject allows for the editing of data and uploading those changes directly into the database it is connected to. This requires a different Data Portal. Security Best Practices Managing security is a key component of the Interject platform, and there are several areas to understand. Security involves both the row level security that can exist in reports and apps and how the middle tier objects are secured. Security also includes which spreadsheet report template can be seen by which users. The paragraphs here discuss each of these areas, best practices in building, and methods to test user access. Managing Settings Cache Interject optimizes speed by caching company settings, such as Data Portals, Connections, and Report Library templates. This information is received on login and is stored in memory for as long as the Excel session is open. This is an important topic for new deployments where these settings may need to change often. If there are any changes to these company settings, the Interject Excel add-in will check for changes at various actions. Error Handling There are two types of errors that Interject can display: unhandled and handled. Unhandled errors are system generated, whereas handled errors are anticipated and written by developers. For example, on a pull or save, an error may occur on the server which the report is trying to access. This error could be handled by the developer if the developer anticipates it, or it could be left as an unhandled error. "},{"title":"Diagnostics - Change ShortKey","url":"/wIndex/Diagnostics-ShortKey.html","content":" Overview The \"Change ShortKey\" feature allows users to change the shortcut key for certain Interject actions. These settings are found in the IdsSettings.xml file. For example, an entry in that file may have an entry such as: <ShortkeyChanges>True</ShortkeyChanges> (Shortkey changes are active) <ReportLibrary>Ctrl+Shift+A</ReportLibrary> (Report Library is assigned to the shortkey Ctrl+Shift+A) Note: You cannot change a shortkey that is currently in use. You must first reassign the action that is set to that shortkey. Also, shortkey changes here will override Excel's shortkey assignments. Input Examples Input Description DisableAll Disables all shortkey changes. This will make the default shortkeys active. (Requires Excel restart) EnableAll Enables all shortkey changes (Requires Excel restart) ReportLibrary=Ctrl+Shift+A Changes the shortkey of the Report Library to Ctrl-Shift+A Diagnostics=Ctrl+Shift+ADrillOnData=Ctrl+Shift+DDiagnostics=Ctrl+Shift+K First changes Dianostics, then DrillOnData, and then Diagnostics again Defaults For a list of ShortKey defaults, see here. Multiple Input Example Multiple inputs are allowed. For example, you can reassign multiple actions by listing them in the input field and they will be executed in order. Step 1: Open the Diagnostics window and navigate to the \"Change ShortKey\" section: Step 2: Input the following in the \"Input\" field: EnableAll Diagnostics=Ctrl+Shift+A DrillOnData=Ctrl+Shift+D Diagnostics=Ctrl+Shift+K Step 3: Click on <Execute Selected Action>: Result: Shortkey changes are enabled, Diagnostics command is set to Ctrl+Shift+K and DrillOnData command is set to Ctrl+Shift+D. "},{"title":"Diagnostics - Apply Special Features","url":"/wIndex/Diagnostics-SpecialFeatures.html","content":" Overview The \"Apply Special Features\" in the Interject Diagnostics Pane allows users to apply certain bux fixes. BugFix1: Microsoft Animations The Microsoft Animations Bug caused certain screen issues due to Microsoft's Animation settings. This bug has been fixed in recent Interject versions but the setting remains here for users to be able to turn on/off animations. Turn Off Animations: To turn off animations, enter the following in the Input field and press <Execute Selected Action>: BugFix1=ON Turn On Animations: To turn on animations, enter the following in the Input field and press <Execute Selected Action>: BugFix1=OFF BugFix2: Microsoft Repaint The Microsoft Repaint Bug causes screen issues when an Excel Add-In programatically switches focus to another tab. This bug is present for some users starting with Excel versions 2210. If you are experiencing issues with slow-down and screen issues when drilling data, this bug fix may help. Turn On Repaint Bug Fix: To enable this bug fix, enter the following in the Input field and press <Execute Selected Action>: BugFix2=ON Turn Off Repaint Bug Fix: To disable this bug fix, enter the following in the Input field and press <Execute Selected Action>: BugFix2=OFF "},{"title":"Diagnostics","url":"/wIndex/Diagnostics.html","content":" Overview The Diagnostics feature of Interject allows users to set and change numerous configurations within Excel as well as utilize various tools for diagnostics and debugging. It is located in the Advanced Menu of Interject: Depending on your company's settings, you will have access to a number of tools. Diagnostic Pane Fields There are 5 fields within the Diagnostic pane: <Execute Selected Action>: Execute the selected tool (some tools require an input first) Navigation: Shows a hierarchy list of tools Instructions: Displays information about the currently selected tool Input: Put your input code here. Some tools require an input for execution. Results: The results of the execution are displayed here Public The Public tools involves Logging, Cache, and Bug Fixes. Setting Description Clear External Login Cookies Click Execute to clear external login cookies. This will delete any saved form data in the login window as well.If you log in with an external auth provider you may be offered an option to remember your login. This may create a security risk in some cases. You can use this feature to clear the data stored for your login so other users can not log in with your cached auth cookie. Toggle Verbose Logging Click Execute Selected Action to toggle Verbose Logging. This adds very detailed logs on hundreds of application events for detailed analysis by support folks. Toggle Memory Logging Click Execute Selected Action to toggle Verbose Logging. This adds very detailed logs on hundreds of application events for detailed analysis by support folks.No input required. You may change the default 3000 millisecond delay by replacing this text with the number of milliseconds required. The setting must be between 1000 and 30000 milliseconds. Toggle DataCell Audit Mode Click 'Execute Selected Action' to Enable or Disable the Formula Auditing Mode for DataCell calculations. This will provide you exact cell address data for errors noted when you re-run the reports. Reset Settings Cache This will reset the user setting cache so the system will be forced to repull from the central database. Open User Folders Click Execute to open the folders for user application data, client shared data and report file cache. Apply Special Features This allows a user to enable special features that may be needed for their environment.Codes to use:Workaround for Microsoft Animations Bug: BugFix1=ON or BugFix1=OFF Workaround for Microsoft Repaint Bug: BugFix2=ON or BugFix2=OFF Macro security features must be setup in the Portal Website or through Interject Support System Tools The System Tools involve various systems settings. Setting Description List DataPortals Click Execute Selected Action to show the DataPortal List for the active user. Toggle Double Click Events Click 'Execute Selected Action' to enable or disable the Interject_DoubleClick custom property in the current workbook [TestsTypes.xlsx]. By setting to true it will enable the double click events for the drill. The in-memory setting is set to False. Set RunOnOpen For Workbook Click 'Execute Selected Action' to enable or disable the Interject_RunOnOpen custom property in the current workbook [TestsTypes.xlsx]. By setting this property the workbook can automatically pull data when opened.Input allowed:No input will toggle between true and false. True will pull data on the activesheet when opened.'Prompt' = will show Pull Data form when file is opened.'T:Sheet1|F:!A5' = will pull data for the tab Sheet1 but will exclude A5 from the report action, but will run the rest.'F:A5' = will pull data for the active sheet for only the report formula in cell A5.'T:Sheet1' = will pull data for the tab Sheet1 for all report formulas.'RunOnce,T:Sheet1' = Will do the same as above, but the setting will be cleared afterwards.'T:Sheet1,T:Sheet2|F:CellName' = will pull for all of Sheet1, then pull for Sheet2 but for only the report formulas in the range name 'CellName'.To test various settings against the current workbook, and view a sample execution plan, use: 'Test=' and then the instructions Test= T:Sheet1|F:A5' Test= true Test= T:Sheet1 Test= F:A5 … then click Execute Selected Action Toggle Log Truncation Click 'Execute Selected Action' to Enable or Disable the truncation of logs. Reset Settings Cache - All Users This will mark all users in the client to repull their settings cache from the central database at the next opportunity. Only users with the ClientAdmin role can execute this action. Reset File Cache This will remove all files that were previously downloaded and cached as well as reset the users settings cache. Open Application Folders Click Execute to open the folders for AppData, UserData, and UserConfigClick once installations use a subdirectory of: C:\\Users\\MyUserName\\AppData\\Local\\Apps\\2.0 Set Enterprise Connection Paste a Connection String in the Input box. Click Execute Selected Action to save this connection string encrypted for use in Enterprise installations. To clear the connection string, leave the 'Input' box empty and then Execute. If 'Encrypted:' is shown at the start of the connection string, it is currently stored encrypted.Example: \"server=My_Server_Name;database=My_Database_Name;integrated security=true\";or \"server=My_Server_Name;database=My_Database_Name;User Id=myUsername;Password=myPassword;\" Reset Cursor Click 'Execute Selected Action' to reset a wait cursor that has not reset properly. Open Install Configuration Click Execute Action to open the configuration window Force Garbage Collector on Dead Memory Click Execute to clear unused RAM memory (aka Garbage Collection) Find All Workbook Formulas Click 'Execute Selected Action' to Find all formulas in the active workbook. Search the Report Library Use this command to search for many kinds of data within the Report Library. Below, enter the exact text to locate. Then click 'Execute Selected Action'It will search the names and descriptions of Report Library folders, files (links), versions and drill codes. Replace Data Portal Codes Click 'Execute Selected Action' to Replace all DataPortalCodes in the current workbookinput text should containoldName_One = NewName_OneanotherOldName = anotherNewName Support The Support tools involve tools that support the Interject/Excel environment. Setting Description Clear Data Cell Cache This will clear the Data Cells cache in memory. It is used for troubleshooting only. Change ShortKey Allows you to reassign a shortkey. After a shortkey is reassigned you must close and reopen Excel.Changes create configurations to your local IdsSettings.xml file such asTrueCtrl+Shift+A.Input reassignments here such as 'ReportLibrary=Ctrl+Shift+A'.To disable or re-enable all shortkey reassignments input 'DisableAll' or 'EnableAll'Currently shortkey reassignments are enabled.Allows for multiple lines of commands to be input. Clear Error Log Click Execute Selected Action to clear the error log at C:\\Users<YourName>\\AppData\\Local\\Interject\\Settings\\ErrorLog.xml. Re-Initiate Interject Click Execute Selected Action to make sure that basic setup information is in place for Interject to run. If Interject has already been initiated, this process will reset and clear certain settings. Set Application Data Source Click Execute Selected Action to set Interject's application data source. NOTE: Which data sources are available to you will depend on your Interject subscription. Possible sources are:EnterpriseDatabaseInterjectPlatform Launch the License Management Form Click Execute Selected Action to open the License management form. "},{"title":"Excel Drill Animations","url":"/wTroubleshoot/Drill-Animations.html","content":" Overview It is important to disable the animations feature of Excel. Running animations while working with data may slow performance and interfere with Interject events, such as Drill on Data events. Depending on the version of Excel you have installed, and the Windows operating system on your computer, there are several ways to disable Excel animation. You can choose all that apply. Turning Off Animations (Windows 7 or 8) Step 1: First, open your Control Panel and click Ease of Access: Step 2: Select Ease of Access Center. Step 3: Under Explore all settings, click on Make the computer easier to see. Step 4: Ensure Turn off all unnecessary animations (when possible) is checked. Then click Apply and then OK: Turning Off Animations (Windows 10 Settings) Open your settings menu by pressing the Windows Key + U. Switch Show animations in Windows to Off: Your settings screen may look like the one below. If so, click Other Options then turn off Play Animations in Windows: Turning Off Animations (Windows 10 Control Panel) Step 1: First, open your Control Panel to find the Ease of Access Center and select Ease of Access: Step 2: Click on Ease of Access Center: Step 3: Under Explore all settings, click on Use the computer without a display: Step 4: Under Adjust time limits and flashing visuals, check Turn off all unnecessary animations (when possible). Click Apply and then OK: Turning Off Animations (Excel 2010-2016) In Excel, pull up the Options menu by clicking File and then Options: Next select Advanced or Ease of Access, and then uncheck Provide feedback with animation: Turning Off Animations (Excel 365) In Excel, pull up the Options menu by clicking File and then Options: Select Ease of Access on the left panel. Under the Feedback Options tab, uncheck Provide feedback with animation and click OK: "},{"title":"Drilling Between Reports","url":"/wGetStarted/Drilling-Between-Reports.html","content":" Overview The Interject drill feature allows you to connect individual reports together to make a simple, fast, and intuitive experience for users to get to the data they use everyday. In this walkthrough you will view drilling between reports with the same reports used in the previously viewed Real-World Walkthroughs. Customer Aging Report In this example, you will be setting up a simple drill to the customer orders history. It's a great use case for creating the first drill. Inventory Report In this example, you will set up a drill from the Inventory by Category tab to the Inventory by Detail tab of the workbook. You will also set up a hyperlink so the drill can be more intuitive to users. Financial Report In this example, you will be setting up a drill to a separate workbook that is in the Report Library. It will allow us to view a general ledger and to support a financial statement balance. The Three Ways to Drill There are several ways that users can utilize the drill feature. Here you will walk through the three options available for drills; the Menu Method, the Hyperlink Method, and the Double-Click method. "},{"title":"Enterprise Login Setup","url":"/wAbout/Enterprise-Login-Setup.html","content":" Overview Interject supports federated logins for enterprise allowing a single sign on (SSO) experience for Interject users within an organization. Currently, Open ID Connect (OIDC) is the primary protocol Interject supports but more federated authentication systems are planned to be supported, including Security Assertion Markup Language (SAML). There are other identity provider services on the cloud that support OIDC. The following are especially easy for Interject to work with, but any system supporting OIDC will work: Azure AD Okta Auth0 Note: Users will need Interject version 2.5.0.14 or above to use federated logins. Interject can be set up to accommodate federated and non-federated users existing on the same system, so we can migrate/update users individually if that makes it smoother to upgrade. The steps for setting up your Interject organization with federated logins include: Providing Interject OIDC Details Acquiring an Enterprise Login Code Whitelisting Interject domain URLs Provide OIDC Details Interject uses a set of URLs for your identity system to configure your Interject company with an identity provider for Interject to federate to. The following URLs need to be provided to the Interject development team for federated logins to be setup: Authority URL - e.g. https://login.microsoftonline.com/{tenant}/v2.0 Discovery Endpoint - e.g. https://login.microsoftonline.com/{tenant}/v2.0/.well-known/openid-configuration If a discovery endpoint is not available we will need the following URLs: Authorization URL - e.g. https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize Token URL - e.g. https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token User Info URL - e.g. https://graph.microsoft.com/oidc/userinfo Note: For AzureAD, we are aware of a possible extra step to get federation working. Its possible your Azure AD service may need ID Tokens enabled. Learn more here to see if this applies to your setup. Enterprise Login Code After the Interject team configures the identity provider for your Interject company, you will be sent an \"Enterprise Login Code\" that users will need to use in the Interject login page to navigate to their federated login page. See Logging In/Out - Enterprise User for a walkthrough on how to log in with your enterprise token and federated login. Once set up, the Enterprise Login Codes will be shown for all identity providers associated with a company in the \"Organization Profile\" on the Interject portal site. IP Whitelisting If your network uses a firewall, it might be necessary that you will need to whitelist Interject domains when users attempt to use federated logins with Interject. If this is the case, then it is important that key domains used by Interject are whitelisted on your network. The following are the IPs to whitelist that are used by the Interject product: https://platform-api.gointerject.com/ https://live-interject-authapi.azurewebsites.net/ You will need to ascertain the proper steps in whitelisting these domains on your particular system. Setup Data Connections Some data connections need to use a federated login for data access (e.g. often an API authenticating requests against the same federated identity provider). These data connections should be configured in the Interject portal site by selecting the desired Enterprise Login Code from the drop down on the data connection page. All identity providers configured for the selected company will show up in this drop down. "},{"title":"Event Functions","url":"/wIndex/Event-Functions-Landing.html","content":" Overview Event Functions are functions designed to run when a designated event triggers them. The values defined within the Event Function parameters will determine what event will enable these functions to run. The placement of these functions within the report will determine when these functions will be executed. This allows for synchronization and data precision within the report. There are five Interject events: • Pull-Run: This occurs when selecting Pull Data from the Pull Data window. • Pull-Clear: This occurs when selecting Clear from the Pull Data window. • Save-Run: This occurs when selecting Save Data from the Save Data window. • Save-Clear: This occurs when selecting Clear Save Notes from the Save Data window. • Data-Drill: This occurs when selecting a Drill on Data from the Data Drill window. The placement of the Event Function is important to synchronize their execution in relation to other functions. For example, if the function is placed in a cell before a Data Pull Function and is set to execute upon a Pull-Run event, then selecting a \"Pull Data\" will cause the Event Function to run first and then the data is pulled via the Data Pull Function. The order of functions is determined row by row. For example, a function in C10 will be ran before a function in B11 because row 10 comes before row 11. To view detailed information about the functions in your report that are triggered by these events, see Validation Report. There are 6 Interject Event Functions: ReportMacro, ReportRun, ReportCalc, ReportDefaults, ReportGrouping, ReportHideRowOrColumn. ReportMacro The ReportMacro function executes a designated VBA macro when triggered upon a designated event. ReportRun The ReportRun function will run a designated report function(s) within a Workbook when triggered upon a designated event. This is typically used to synchronize the running of functions in other sheets within the Workbook. ReportCalc The ReportCalc function executes a calculation of formulas in a worksheet or workbook when triggered upon a designated event. ReportDefaults The ReportDefaults function will copy a value from a range to another range when triggered upon a designated event. ReportGrouping The ReportGrouping function will collapse or expand groups within the sheet when triggered upon a designated event. This function is helpful in grouping or ungrouping sections in a ReportVariable after it is generated. ReportHideRowOrColumn The ReportHideRowOrColumn function will hide a designated row or column when triggered upon a designated event. If a cell within the defined range = \"hide\", the function will hide that row or column when triggered. If the defined range is a single row, the function will hide the column. If this range is a single column, the function will hide the row. Typically this function is used to hide data that is impertinent to the current purpose of the report and/or filters being used. For example, a user can set up a report to hide invoices with zero balances or to show only accounts with a delinquent status, etc. "},{"title":"Excel Best and Worst Practices","url":"/wGetStarted/Excel-Best-and-Worst-Practices.html","content":" Overview Interject is an add-in that greatly extends the feature set of Microsoft Excel. However, there are still limits within Excel. This section covers considerations related to creating complex or large reports. If not careful, there could be long wait times, overly large files, or other issues that may disrupt the workflow. Since each worksheet has 1,048,576 rows and 16,384 available columns, there are 17,179,869,184 (17 billion) cells. Add in formatting, complex formulas and conditional formatting, and it is easy to see how such an open design can overtax desktop performance and cause problems. Excel performance can be affected, depending on the complexity of a report and the Excel features you use. For example, the grouping feature can significantly reduce the amount of data that can be handled practically in Excel. The same is true if there are many complex conditional formats. Even regular formulas can degrade performance. Nested If() functions or using the Ifs() function impact processing if there are many conditions to evaluate. Think of Excel as a Better Browser Excel is a terrific and flexible tool, and to make the best use of it in your daily work, think of it less as a database and more as an interface. Instead of importing 500,000 rows into a spreadsheet to support a pivot table or other type of summary report, the Interject platform makes it easier for you to access only the top level of the data you need. When designing a report, it is best to curate the user experience as if you are building a website application. For example, a summary view of 50 records that can drill to additional detail would be more manageable than a long scroll of 100,000 detail records. The example below illustrates this point further. Example: In the screenshot below, you have a list of 20,000 records. You can filter the data, but there is an easier way. The user can filter the data like in the screenshot below, but there could be an easier way. The next screenshot shows an alternative, a drill action to a summary report, created by an Interject developer to give users easier access to viewing the details of the 20,000 records. This screenshot shows the summary report, which is a simpler way to find the data meanwhile having a more complex presentation. Record Counts Depending on the desktop memory and CPU, it is feasible to import 400,000+ records with Interject if the report is not complex. However, the Interject design is focused on a high degree of flexibility, where the report can be tailored to the user experience. In some reports, displaying 20,000 records is not practical to work with. You may appreciate the smaller row counts when you can drill to the underlying detail when needed. This also speeds up your user experience. Similar to most website applications, you typically process only a few hundred rows before drilling to additional detail. Consider leveraging the same workflow design experience as you would when designing a website application. This helps create an interface where your users have the ideal size of data to work with. Empty Cell Formatting Sometimes in the course of report building, your report may collect empty cells that still carry formatting. Over time this issue can grow and cause performance issues. Excel has a feature that can optimize your report by removing the formatting of these unused cells. The \"Check Performance\" feature is found on the \"Performance\" tab of the Excel Ribbon. For more information on this feature, see Cleanup Cells. Conditional Formatting Conditional formatting can not only be difficult to manage because the formulas are not as visible, but it also adds processing for Excel. To reduce the complexity of conditional formatting configure the formula logic in the spreadsheet with a True/False result. Then you can use A5 = True as a simple formula in the conditional formatting to define the required formats. This best practice helps performance by applying conditional formatting to an organized structure of ranges instead of disparate ranges that may duplicate calculations. It is beneficial to keep the conditional formulas organized. It is also helpful to use them in moderation. Conditional formats are not initially visible, so using them can quickly get out of control. Limiting the Ranges Used in Interject Report Formulas In most reports, selecting the entire row for Column Definitions in ReportRange() is fast and easy. However, when using larger, more complex reports, it is better only to include the columns needed for the report. In the below example, ReportRange() selects column definitions and a target range that selects the entire row. The next example shows the same report, but only the impacted columns are included in the column definitions and target range. This is more efficient. However, keep in mind the argument for ReportRange(), UseEntireRow is set to False. By setting to True, it converts the ranges to entire rows. ) Here you will use the scroll bar in the function wizard to alter the UseEntireRow parameter. Watch for the Last Row and Last Column Sometimes developers accidentally use the last cell of the 1,048,576 rows that Excel provides or write a value in the last of the 16,384 columns that is also available. When this happens, the range in use expands to a large range of cells that uses more memory and expands the work area, which can hinder performance. To improve performance, delete all rows and columns beyond the reporting area. Images Images can quickly increase the size of an Excel report. If images must be included in a report, you can compress them to 96ppi by selecting the image, clicking the \"Picture Format\" tab on the Ribbon, and selecting \"Compress Pictures.\" From here, you can select the compression rating and whether to apply the compression to the selected image or all images. Alternatively, you can set the default compression rating for all newly inserted images as explained on the Microsoft Support Site. File Type The old Microsoft Excel type .xls does not compress the data in the report using saving so this type of file will be much larger. Always use the xlsl or xlsm file type for your reports. The Microsoft binary file (xlsb) type will further reduce the file size of your report. However, there are some limitations: 1) The file may be a security risk as you will not know if it contains macros. 2) You cannot make changes to the Excel Ribbon while a binary file is open. 3) Spreadsheet programs other than Excel may not be able to open the binary file. Pivot Tables Pivot tables will save the source data with the file in addition to the file contents, making the file much larger then necessary. You can reduce the file size by selecting not to save the source data and instead, simply choose to refresh the data when opening the file. Both these options are available by right clicking the pivot table, click \"PivotTable Options\", and then select the \"Data\" tab. VBA Macros Using VBA (Visual Basic for Applications) can bridge a special feature or process gap in a report, but it is important to use VBA sparingly and to avoid adding to the resources needed for processing spreadsheet reports and using applications. VBA can add to maintenance requirements over time, and it can be hard to control versions when users copy reports to their local drives. It is possible to leverage VBA with Interject. These are special use cases that hopefully will become obsolete as more features are added to Interject. We welcome any questions in this area so that we can add more functionality to limit the need for VBA. "},{"title":"Excel Function Index","url":"/wIndex/Excel-Function-Index.html","content":" Overview Interject provides features by leveraging spreadsheet formulas that are familiar to many users. These formulas can be used to direct data into a spreadsheet, creating practical and adaptable reports. By adding report drills and navigation through additional spreadsheet formulas, these reports become a comprehensive reporting solution. Data Pull Functions Data Pull Functions are focused on getting specific data to the report in the right way and placed inside the spreadsheet. There are a variety of functions and options therein to give flexibility in what data is displayed. Forumula Description ReportRange() Inserts data into a single range of a spreadsheet ReportFixed() Pulling in data to a predetermined fixed point. ReportVariable() Insert data into rows that include multiple ranges or sections ReportLookup() Insert a specific data value into a cell based on certain criteria. Data Save Functions The Data Save Function ReportSave is designed to save data within the sheet back to the data source, making it easy to manipulate the data without having to edit the database directly. Forumula Description ReportSave() Save data on the sheet back to the database. Data Drill Functions The Data Drill Function ReportDrill provides a convenient way to run another targeted function while at the same time, transferring contextual data for filtering to that function. It is widely used as a way to connect and pass information between workbooks and worksheets. Forumula Description ReportDrill() Drilling down on data and Navigating between reports Event Functions Event Functions are functions designed to run when a designated event triggers them. An Interject event is a Clear Data or Run event. A Run event can be a Pull Data action or a Save action. The values defined within the event trigger function will determine when it is executed. These functions allow synchronization and data precision witin the report. Formula Description ReportMacro Call VBA macros. ReportRun() Execute Report functions in other sheets. ReportCalc() Executes a calculation on a worksheet or workbook. ReportDefaults() Captures and send values from one cell(s) to another. ReportGrouping() Expands or collapses groups. ReportHideRowOrColumn() Hides rows or columns. Helper Functions Helper Functions are functions that help streamline the report generation process and offer additional customization. They are often embedded into other parent functions to be leveraged into more specific and accurate functions or enhance their capabilities. Some can also be used as stand-alone functions to add functionality to the page. Other Helper Functions are focused on the report itself and does not impact or direct data in the report. These functions can improve the speed and presentation of which data can be understood, manipulated and viewed in the report. Formula Description jDropdown() Returns a set of data in a dropdown list for easy insertion into the sheet. jFocus() Sets the Excel focus (active cell selection) upon a freeze panes action. jFreezePanes() Used with the QuickTools option for freeze/unfreeze panes. jCombine() Concatenate the values of cells while simultaneously skipping any empty cell. jCombineIf() Uses a conditional statement to determine which values should be included into a single concatenated string. jDataPortal() Helpful function for developers to further leverage DataPortals. jColumnDef() Assists financial reports using the FinCube DataPortal to specify segment filters for each amount column. jRangeTag() Used to label or tag a range or a single cell with a custom name. jWorkbookProperty() Provides context and information about a workbook in a report. Pair() Used with a variety of report functions to specify a from value or range to a target location or range. PairGroup() Used to string multiple Pair() functions together into one comma delimited string Param() Used to help select one or multiple parameters for each of your report formulas. Data Cell Functions Data Cells are focused on a single formula which can be placed anywhere in the spreadsheet and can ask for any financial number or summary from it. Once this single formula approach is understood, there is no limit to the combinations that can be created. This is typically an easier method to start writing custom reports. However, given their flexibility the report run times can take more than just a few seconds to complete, sometimes up to 5 minutes. Larger reports, such as one with 70,000 formulas, can take up to 10 minutes to complete. Fortunately, users may continue working with a spreadsheet while waiting for Data Cell reports to finish calculating. Formula Description jAcct() Specifies filters for up to six segments of a Chart of Accounts jCell/jCellN() Retrieves data based on the provided parameters jDesc() Used to look up a context description based on a specific segment. "},{"title":"Exporting Reports","url":"/wGetStarted/Exporting-Reports.html","content":" Overview There are several options for distributing reports to help handle a company's unique needs. Sometimes a quick export is all you need for the current open report, sometimes you need to create a series of secure reports for all cost centers in specific network folders, and sometimes you need to email files to select executives. The Interject distribution and export features make report distribution easy. It is important to note that most companies utilize the Report Library to publish reports, since Interject allows the creation of interactive reports and applications. Like a website application, users open the spreadsheets, navigate to the data they need, and do not need to save the workbooks on their hard drive or email to a supervisor. It is a new perspective on spreadsheets that Interject is building for the future. Since Report Library provides version control, the users will always be working with the latest edits. It is simply more efficient when working with data. Many organizations still need a static, non-interactive spreadsheet report to be distributed to users or saved in a folder. Interject provides the Quick Export and Report Distribution features to facilitate this. If there are any special Interject formulas in the spreadsheet, like Data Cells , these can be removed when distributed so users can view the report without Interject installed. Reports can also be sent as PDFs when MS Excel is not practical. This section will illustrate how you can use these features for your needs. There are two options for distributing reports to users individually or in batches: Publishing and Exporting. Publishing Reports The most efficient means of distributing reports is publishing report templates in the Report Library. Report templates do not have any data; they only pull data when a credentialed user opens them. This way, users see only business units within their rights. By providing a central place for users to access versioned report templates, publishing is the most efficient way to ensure report writers and users always use the most recent report versions. Using the Report Library, Interject maintains any drill connections to other reports as new versions are published. Users are still free to make their own versions, however only authorized users can publish changes back to the Report Library so others can use them.. Exporting Reports Exporting reports simply makes copies of a report after it has been populated with selected data. The output can be handled in a number of ways. It can be done on the fly with a single open workbook, or it can be set up to distribute a comprehensive reporting book with multiple tabs curated for each user or department. The following options are available for exporting reports. Quick Export copies a workbook while removing unwanted Interject formulas. Quick PDF saves and opens a PDF document of the existing workbook. Distribution is a deeply customizable process for creating reports and distributing them in various ways. Reporting Through Grouping Segments allows for easier importing of data for larger, dynamic reports. Quick Export and PDF This option is best for a single open report that needs to go out immediately. Basic Distribution This covers the basics of Report Distribution. Interject provides a special worksheet that you can configure for a customized set of reports that can be printed, emailed, or saved in preset file locations. Advanced Distribution The advanced exercises for Report Distribution explore more features to help you tailor reporting to your unique needs. "},{"title":"Federated Login Design","url":"/wAbout/Federated-Login-Design.html","content":" Overview Interject uses a Duende (previously Identity Server 4) API to handle authentication for federated user logins. The following diagram shows the relationship between the Interject Excel Add-in and the Auth API when users login to a federated identity system. Enterprise Login Code The Enterprise Login Code is a text string given to each Interject company that is used to navigate a user from the general login page to the federation's login page. The login code can be set to any text string that is not currently in use by another Interject company. See Logging In/Out: Enterprise User for a walkthrough on how to login with your Enterprise token. Web Pages with Webview2 In order for the Interject Addin to show the login page and redirect properly to federated login pages, a web browser environment is needed. Webview2 is a framework for embedding web technologies like HTML and JavaScript in native windows apps of various kinds. To learn more about Webview2, refer to this documentation. Tokens and Refresh Cycle Open ID Connect (OIDC) is built on top of OAuth2 which uses an access token for authorized requests and a refresh token to get new access tokens when they expire. Both of these tokens expire after the following durations: Refresh token - expires every 30 days (this requires the user to login again) Access token - expires every hour How Tokens are Stored Login access and refresh tokens are stored in a .dat file using Microsoft's Windows data protection API. It is located in the user's AppData folder for Interject/Settings. You can open this folder easily by clicking on Diagnostics on the Advanced Interject ribbon, select Open User Folders and then click Execute Selected Action. Legacy Interject Logins Users can be configured to continue using their existing Interject basic Auth accounts while also having access to federated logins. The Interject Login Manager will show all your logins: "},{"title":"FinCube - The Financial Cube","url":"/wIndex/FinCube---The-Financial-Cube.html","content":" Overview The FinCube is a single Data Portal that supports a wide variety of reporting needs. It is included as part of the Interject Financials for Spreadsheets application, and many of the segments can be customized for specific needs. In some ways, when combined with Interject, this Data Portal report feature works like a pivot table with increased format and structure control. It is more manageable when scaling to hundreds of users. Typically, FinCube is used for consolidated financial reports, including monthly trends, YTD comparisons, budgeting templates, and simple balance inquiries. Because of its scalability, FinCube may support up to 70% of a company's financial reporting formats. Segment Filter Options Before each parameter is described that can be used in a spreadsheet report, it is important to discuss the common filters that can be used. The first 12 segments share a similar data filtering syntax. The following options are explained using an Account and Period segment. Filter for multiple items: For account, use 21200,21300 to filter for both accounts 21200 and 21300. For Period, use 1,2,3 to represent quarter 1. There are groupings already set up for quarters, so Qtr1 also works (more detail follows). Using the comma, each addition is considered an OR , which means each element is not mutually exclusive. Every new element added with a comma will add more data to the filter. Filter for a range of items: For account, use 21000..22000 to filter for all accounts in that range. The same is true for periods, such as 1..3. Filter for multiple ranges: Combine both #1 and #2 above and expand the filters, such as 21000..22000,30000..32000. This will filter for both ranges noted. Filter by excluding items: In some cases, it may be easier to use a range and exclude a few items. With account, use 21000..22000 , then exclude account 21500 using the notation 21000..22000,!21500. The exclamation excludes that element. A range may also be excluded using 21000..22000,!21050..21060. Filter using wildcards: Use wildcards, such as *** or **? , to find matches for filters. For example, noting 21* will retrieve all accounts beginning with 21, such as 21000 to 21999. Using 21?00 as the filter will retrieve accounts like 21000, 21100, 21200, and 21300. These wildcards can be used together with the methods noted in #1, #3, and #4 above. For example 2,09,!*08 would return all accounts starting with 2 and any accounts ending with 09 but exclude accounts that end with 08. Filter with Groups: Groups are an important feature that make filtering easier and more manageable. The management of groups will be covered in a different page, but they are defined as a text string representing a filter. For example, instead of using a filter for 21000..22000 , set up a group called Accounts Payable to represent that filter. And if you set up a group for the filter 30000..32000 , and call it Long Term Liabilities , you can use a filter like Accounts Payable, Long Term Liabilities to get the defined accounts. There are preset groups for the Segment 9–Period parameter for Qtr1, and more can be added for monthly periods. The exclude option in #4 above can also be used, such as when you want to see Revenue accounts but exclude Intercompany clearing accounts. This could be noted as Revenue,!Intercompany. Data Portal Parameters The table below summarizes parameters available for the FinCube DataPortal. Parameters can either be filters set up by spreadsheet users, or they can place data in the spreadsheet. Each parameter links to a spreadsheet cell, or they can be manually specified in the reporting formula if not used in the report. The first 8 parameters of FinCube represent customizable segments. They are typically set up to match a company's chart of account segments and may include other reporting dimensions like companies or currencies. The table below explains each of the available parameters of the FinCube DataPortal. The example column shows what the typical segment signification, but note that these can be configured differently for every Interject installation. Parameter Name Example Description Segment 1 Account This parameter can be used for filtering as noted in the above section. Segment 2 District This parameter can be used for filtering as noted in the above section. Segment 3 System This parameter can be used for filtering as noted in the above section. Segment 4 SubSystem This parameter can be used for filtering as noted in the above section. Segment 5 Adjustments This parameter can be used for filtering as noted in the above section. Segment 6 This parameter can be used for filtering as noted in the above section. Segment 7 Company This parameter can be used for filtering as noted in the above section. Segment 8 Currency This parameter can be used for filtering as noted in the above section. Segment 9 Period This segment is locked to represent a period (a month). It can be 1 through 12 or YTD1 through YTD12. Groups can be used to define Quarters. Segment 10 Year This segment is locked to represent a year Segment 11 Version This segment is locked to a version. Versions are used to track changes that may occur to a budget or projection source over time. If configured, filters such as BOD..V7 could be used to filter the data for changes that occurred from the version that was approved by the Board of Directors to Version 7. Segment 12 Source Segment 12 is locked to a source, which represents Actual, Budget, Projection, and other comparable financial sources. As data is imported into Interject, sources can be setup for segmenting data. Segment 12 can also be used to separate out Actuals, which may be posted account balances and other types of entries unposted or considered proforma. SegmentNumForRowDefs This parameter is used only when the Interject report function using the FinCube DataPortal has Row Definitions in a report. Row Definitions creates separate subtotal sections, such as Labor and Benefits in a spreadsheet report. Each of these sections could be collapsed to show the totals and then expanded to show all the account details. Financial reports normally have 20 to 50 subtotal sections. If using groupings to define what a subtotal section will include, like Labor = 50000..52999 and Benefits = 53000..53200 , you can setup the Row Definitions using these groups. However, without the parameter SegmentNumForRowDefs being setup, the FinCube DataPortal will not know which segment our groupings relate to. So if our Accounts are set to Segment1, SegmentNumForRowDefs must be set to 1.In most cases subtotals are based on Accounts, but that is not necessary. If our subtotal sections are going to use groups related to a line of business, and our segment for line of business is Segment3, SegmentNumForRowDefs must be 3. ShowCredit This parameter can be used with the ReverseSigns parameter to show the required sign for an account segment. It will change the sign (+/-) displayed on accounts. For example, Revenue naturally shows as a credit in the general ledger data since it is a credit account. However, Revenue should show as a positive in a profit and loss report. See the example chart below. SkipLive This is a special Interject feature allowing reports to access live data for the current open month being closed. If set to False, the amounts provided are based on the last scheduled or manually triggered import. If this is configured in your Interject installation and SkipLive is set to True, the FinCube DataPortal will directly access the current open month balances in real time. This features gives users up-to-the-second data while limiting the server resources needed to present live data during a financial close. It is a significant productivity improvement compared to data warehouses or data-marts that can only provide data updated on a set schedule. ReverseSigns This parameter can be used in conjunction with the ShowCredit parameter to show the required sign for an account segment. By setting to True it will reverse the signs of the amounts returned. See the example chart below. LastRun This is an output parameter places in the spreadsheet the report's last run date and time. This will use the timezone settings of the windows session. TimeLineFrom If configured, this will allows users run reports showing changes over time based on imported intervals. Using this feature shows the report as it would have been run the previous week. Alternately, it will show changes occuring in the last 12 hours. If this from date and time parameter is omitted, it defaults to 1/1/1900. TimeLineTo This parameter works with TimeLineFrom. If omitted it is defaulted to through the current week. Examples using \"Show Credits\" and \"Reverse Signs\" Parameters The Show Credits and Reverse Signs parameters work together to provide the output required in presenting positive or negative numbers for financial statements. The chart below shows + or - to signify output. The yellow row shows how Assets, Liability, Equity, Revenue, and Expense are naturally recorded in a general ledger. For example, Revenue is always negative by default, but is normally presented as a positive number in a profit and loss report. For certain reconciliations reports, these credit accounts may be specifically set up to show as a negative. Available Columns for the DataPortal The FinCube DataPortal is unique because of its wide array of column options included in the column definitions of Interject report formulas. There are three types of columns: Segment, Group, and Amounts. Segment Columns Segment columns relate to Segments 1 through 8 and any other groupings setup for the segments. In the configuration of Interject segments, assigned names can be used as columns. For example, Acct (short for account) may be assigned to Segment 1 and Dist (short for district) can be assigned to Segment 2. In this case both Acct and Dist can be used in columns to show the level of detail required. If only Acct is included in the column, the amounts will be summarized by Acct. If both Acct and Dist are included as columns, then both are shown, and the amounts are summarized by Acct and Dist. This will work for a combination of the first 8 segments. In addition, the name of the segment may also be noted by adding Name as a suffix. For example, AcctName will show the account name. Group Columns When Groups are set up for a segment, like Acct, they can also be used as columns. It is important to understand what a Segment Group is and which ones can be used. Groups are simply a text phrase assigned to a filter, the same filters explained above. A simple Group for Acct may be Product Sales (defined as accounts 32000…34000 ) and Consulting Sales (defined as accounts 34001…35000 ). Groups can also contain other Groups. For example, a Group called Revenue could contain different Group, like Product Sales and Consulting Sales. When Group names are used as columns, the column will summarize the amounts by the Groups it contains. So, in the above example, if Revenue is used as column, then groups Product Sales and Consulting Sales would each show on a row, and the amounts would be summarized at that level. In a coming release, there are two new features coming to Groups. A sort order will be assigned to a group so users can control the order. In the above example, Product Sales will be listed before Consulting Sales , since they would normally show in alphabetical order. A future release will also support a group name to add more descriptive names to groups. Currently, Groups are a single text string and may not be text desired in a report. In the above example, you could set up Sales_Prod and Sales_Cons as the Groups, and then make Product Sales and Consulting Sales the Group names. In using the parent group Revenue as the column, if you added Name to the end of the Group, like RevenueName , you would get the more descriptive names Product Sales and Consulting Sales in the report, instead of Sales_Prod and Sales_Cons. Amount Columns There are three methods to specify amount columns in the column definition of a report formula. These include CYA, ACT, and jColumnDef. CYA Column Notation This notation is deprecated but is still supported. Since these notations are relative to a year, it is important to specify the year in the above noted parameter Segment 10 - Year. By noting a year, CYA defines what the current year is. CY is for current year, LY is for last year, and so on. CYA Notation Description CYA1 through CYA12 Current Year actuals for a specific month. The number in the suffix specifies the month. CYAYTD1 through CYAYTD12 Current year actuals for year to date. The number in the suffix specifies the month. CYA_TOT This is another to total a year. It is same as using CYAYTD12, which returns a total from January to December. Other prefixes can be used in place of CYA: Prefix Description LYA Last year actual L2A 2 years ago actual L3A 3 years ago actual L4A 4 years ago actual NYB Next years budget CYB Current year budget LYB Last years budget Options for Forecast This notation is more complex, because forecasts may need to retain not only the month forecast but also store when the forecast was completed. For example, you might forecast March twice in a year, first in January and again in February, then compare how that forecast changed over time. Forecast notation can be set up to handle these changes over time. For example, above, CYFJan3 would represent the first time March was forecast. CYF means current year forecast, Jan signifies the projection was made in January, and the 3 notes the month from when the projection was completed, such as in a rolling forecast. Forecasting March again in February, the notation would be CYFFeb2. Forecasting March again during the month of March, the notation would be CYFMar1. The examples below may help clarify. CYA Notation Description CYFJan1 Forecast for January: Current year forecast completed in January for the first month of the projection period (January). CYFJan2 Forecast for February: Current year forecast completed in January for the 2nd month in the projection period (February). LYFSep3 Forecast for November: Last year forecast completed in September for the 3rd month of the period (November). Special Suffixes for Unposted Amounts If configured you may be able to use the Unposted or WithUnposted suffix to notations like CYA5 to see the amounts in our journal entries that are not yet posted. CYA_wUnposted Shows the total of posted and unposted amounts for March of the current year Special consideration for Staged journal entry Amounts If configured you may be able to show staged journal amounts not yet uploaded to the ERP. Examples below. CYA3_Staged Shows only the totals for the staged amounts for March of the current year. CYA3_WithUnpostedAndStaged Show the total of posted, unposted, and staged amounts for March of the current year. ACT Column Notation This notation is one step beyond CYA, since it can also be relative to a month and not just a year. ACT can make it easier to build and maintain monthly review reports because the columns specified are all relative to the month and year filter. Since these notations are relative to a year and a period, it is important to specify the year and period in the parameters Segment 9–Period and Segment 10–Year and link them to a cell in the spreadsheet report. For the table below you can consider Mar 2017 the specified period. ACT Notation Description (Assume Mar 2017 is the specified period) Act The current-month actual for Mar 2017. Bud The current-month budget for Mar 2017. Proj3 The suffix for projection can be difficult to understand. Proj3 notes the projection for Mar 2017, when Mar was the third month of the projection period. This means the projection for Mar that was done in January. Proj2 The projection for Mar 2017 done in Feb 2017. Proj1 The projection for Mar 2017 done mid-month, Mar 2017. Projections may have several versions (sometimes called editions). Projections for Mar 2017 in the second week of Mar are the initial projection. Additional projection revisions may be in the 3rd and 4th week of Mar before the month closes. The notation below adds a suffix of Edition, which can be used in the report to specify a particular week's changes. Proj1Edition1 Same as Proj1, the initial projection. Proj1Edition2 Shows the changes made in the 3rd week projections. Proj1Edition3 Shows the changes made in the 4th week projections. Proj1All The summation of Proj1Edition1, Proj1Edition2 and Proj1Edition3 Special Suffixes for Unposted Amounts If configured, you may be able to use the _Unposted or _WithUnposted suffix to notations like ACT to see the unposted amounts in our journal entries. Act_Unposted Shows only the totals for the unposted amounts. Act_WithUnposted Shows the total of posted and unposted amounts. Special consideration for Staged journal entry Amounts If configured, you may be able to show staged journal amounts that are not uploaded to the ERP yet. Below are examples. Act_Staged Shows only the totals for the staged amounts. Act_WithUnpostedAndStaged Shows the total of posted, unposted, and staged amounts. jColumnDef() Column Notation The jColumnDef() notation is the most recent addition to the column options and is the most flexible and intuitive in use. Instead of using a single text string to represent an amount, like CYA1 or Act, you can use the jColumnDef() function containing arguments for each of the 12 segments noted in the above DataPortal parameters. In this way, you can specify each component separately and more clearly. jColumnDef() arguments are essentially an additional filter level for each column you want to show. It is important to emphasize that jColumnDef() goes beyond a source (Actual, Budget, fcast1 to fcast12), a year, and a period alone. These are the same segments (9, 10 and 12) that earlier notations (CTA and ACT) can only specify. jColumnDef also supports the remaining 12 segments and each can support the same filter options and groups noted above for DataPortal parameters The result is a highly flexible method to create columns. The illustration below shows an example. In cells H2 and I2, the jColumnDef() function is entered into the column definition row instead of CYA1 or Act. The jColumnDef() function argument references the cells below it (rows 4 through 15) that notes all the segment options. In this example, the columns will return the Jan and Feb of 2017 actuals, since Period, Year and Source are the only segments used. In the following example, you are using more of the segments. The columns were changed so both are for Jan 2017, but the first column is now specified to all revenue for district 2050. the second column is specified to show EBITDA for the same district. Using segment groups provides multiple ways to define a column. "},{"title":"Financial Report","url":"/wAbout/Financial-Report.html","content":" Overview This lab is for controllers or accountants who work with financial data and spreadsheets. In this walkthrough, you will open a Profit and Loss (PL) Trend report and drill into the supporting detail from the general ledger detail. The Journal Entry (JE) Query report will provide you account level detail and will allow for drills further into each journal entry. To watch a quick walkthrough video, click on the icon: If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 1 Real World Walkthroughs > Lab 1.3 Financial Report. Navigating to the PLTrend Report Step 1: Navigate to the PL Trend report page inside the Interject Financials folder of the Report Library. The Report Library is a central place for publishing reporting templates. It is versioned and easily located. Step 2: With the report template open, type the location number, year, and the month of the report to view. Use 7002 for Location and 2002-05 (May 2002) for the year and month. Now you are ready to pull the data. Use the Pull Data button as shown below, or use the short key Ctrl-Shift-J. It will just take a moment for our report to populate. The illustration below shows the amounts for March, April, and May of 2002. Modifying the Report Step 1: Now quickly add a few more columns to the report for June, July, and August. First clear the data so you have an empty template. Clear the data by selecting the Pull Data button again, but this time choose the Clear button. Step 2: Extend the trend out a few more months by selecting column N, clicking and holding the small square anchored on the bottom right of the header, and dragging it three columns to the right. Once released, the columns automatically expand. The below animated GIF illustrates this series of steps. Step 3: Re-pull the data with the Pull Data menu button as you did earlier. Once the update is completed, all six months of data will be shown and populated. Grouped Detail in the Report Interject allows for spreadsheet groupings within financial reports, so additional detail can be included and expanded when needed. The steps below will demonstrate how to expand grouped areas to view the account level detail included in this report. Step 1: Groupings are managed from the top and left margins of the spreadsheet. In this report, you are only using grouped rows so there are only +/- buttons on the left. Click the plus sign to expand a group and see the account detail. The previous example shows two groups expanded individually, but you can also expand all groups at one time. On the top left there is a sidebar with the numbers 1 and 2 on the top of the left margin. Clicking 2 will expand all the groups at that level. Clicking 1 will collapse all the groupings. Drill to JE-Transaction After expanding the groupings of modified the reports, you may still want more detailed information about a specific account. The Drill on Data feature allows us to pass information from one report to another for additional details. Step 1: For example, drilling on any Trend Data value in account 32000 will take us to the JE Query report template which is a brand new workbook rather than another tab and will provide the line item detail. Try drilling on account 32000 for March 2003. Step 2: A new report will open and automatically pull the underlying detail for the drill. The total will agree with the amount that was drilled on in L34 from the previous report. Notice the filters for the report were automatically populated from the report that you drilled from. The date range, account, and location all match. Drill Further Into JE-Lookup Lets go one step further. Now that you see the journal entry detail summing the account balance, pick a specific line and drill to view the complete journal entry JRNLWA00032840. Step 1: Click on the first line that has a negative 20,900 value, on row 23. This line is from the journal entry JRNLWA00032840. This drill goes directly to a second tab in the report called JE Lookup, and it will show the complete detail for journal entry JRNLWA00032760. As expected, it sums to zero like all journal entries must. Report Example With Data Cells The above examples illustrate the Interject Data List reports. These reports are structured by specifying what financial data goes into which column and row subtotals setup to show a specific group of accounts. Interject provides an alternate method to setting up reports so each worksheet cell can contain any value you need. Step 1 : The first thing to do is delete the rows below 44 and completely clear them out. The report now looks like this. Now use Data Cells to replicate some of the present data. By having both data generated by tabular reports and data cells next to each other, you can confirm that they are yielding the same results. Step 2: To see how it works, use a Data Cell equation. The example below illustrates how the jCell() function can be used to show totals for Actual in March 2002. To open the function window, select the cell, click on jCellN in the formula bar above the columns, then click the fx button to the left. Use the jAcct() function inside the Full Account box to include filters for both the Accounts and Location segments of the chart of accounts. To get the Function window for jAcct(), just click inside of its function in the formula bar. In this function you are using accounts 31000, 32000, and 33000 in Segment 1, and the location 7002 in Segment 2. Notice that these are the same accounts that makeup Revenue - Sales in the original PL Trend and the same location you filtered on earlier. Step 3: Now use the Pull Data function. Note: Ensure that the \"Calculate Data Cells\" is checked. As you can see, the totals for Revenue - Sales match for both the data cell and data list. Step 4: Listing out each account for a financial group can take time if the account is large enough. Next, try to use data cells again, but this time use groupings to make the function easier. Go back to the jAcct() function window and change the accounts to be Revenue - Sales instead of the numbered list. Be sure to keep everything else the same. After the switch, you can see that the values still are the same (Note: You may have to re-pull the data). This is because the accounts 31000, 32000, and 33000 are all under the preset grouping Revenue - Sales. Step 5: More complex filter text can be used to request precise balances. The following example uses a combination of ranges, exclusions, wildcards, and financial groups to return specific data. Even Net Income or EBITDA can be presented in a single worksheet cell. For more information on the Data Cell Filter options, click here. In the below example, the groupings to the left of the figures represent the grouping filter in the jAcct Function to the cell beside it. This is so you can see what account groupings are being used for each of the numbers. As you can see, the numbers in the data cells tie perfectly with the numbers in the data list above. A Quick Summary of the Disadvantages of Data Cells vs Tabular Reports Although using Data Cells (the jCell() function) to construct a report is very flexible and easy to learn, it has drawbacks that create extra work. The ideal applications for Data Cells are special reports that do not have consistent row and column structures and do not present low level details that change. The main disadvantages of Data Cells are: The report will typically run slower, but especially for larger reports. Tabular Reports reports, in comparison, are much faster and more efficient for reporting servers. The report will not allow detail lines to be added or removed automatically based on what data exists for the filters. Data Cells create fixed reports that require more maintenance. Data Cells are not portable to non-Interject users unless using the export feature to remove the special formulas like jCell(). You find that 90% of a company's needs are handled efficiently by Data List reports as first illustrated in this walkthrough, and in many cases Data Cells are not needed at all. But for certain reporting requirements, Data Cells can be very handy. This completes the initial walkthrough detailing interactive reporting. Later in this wiki, you will learn how to create reports and drills once Interject has been integrated with ERP software. Related Links Lab Modify: Financial Report Creating a Simple Report Interject Ribbon Menu Items Tabular vs Data Cells Data Cell Functions "},{"title":"Fixed and Variable Reports","url":"/wGetStarted/Fixed-and-Variable-Reports.html","content":" Overview This section demonstrates additional Report Formulas, ReportFixed() and ReportVariable(). Like ReportRange(), these are used for reporting but allow for special use cases. ReportFixed() provides for a report that is fixed on each row based on a Row Definition that you specify. If the returned record matches the Row Definition, the data is presented, but the report does not expand with new data records. The ReportVariable() function is a combination of ReportFixed() and ReportRange() which allow specific fixed sections to be set up. Within those sections, the data will expand or shrink based on the data result. Inventory Fixed Report This page illustrates the process of building a fixed inventory report from scratch using an example seen in the Inventory Walkthrough. By creating this report from scratch, you can better understand how to use the ReportFixed() function. Inventory Variable Report Using the report seen in the Inventory Walkthrough, this illustrates how ReportVariable() can provide all the data for each section in the report Inventory By Category with Detail. Financial Variable Report Using the report seen in the Financial Report - Walkthrough, this example will illustrate how to use a ReportVariable() in a financial statement use case. Customer Aging Detail Report This advanced example uses both the ReportRange() and ReportVariable() functions together to build an auto-expanding report that provides aging detail drilled to in the Customer Aging - Walkthrough example. "},{"title":"Formatting Functions","url":"/wIndex/Formatting-Functions-Landing.html","content":"Formatting Functions Overview Formatting Functions are focused on the report itself and does not impact or direct data in the report. These functions can improve the speed and presentation of which data can be understood, manipulated and seen in the report. Once formatting functions are fully understood, reports can be dissected, analysed, and assessed at a much more rapid pace with a very low amount of impact on report run times. "},{"title":"Helper Functions","url":"/wIndex/Helper-Functions.html","content":" Overview Helper Functions are functions that help streamline the report generation process and offer additional customization. They are often embedded into other parent functions to be leveraged into more specific and accurate functions or enhance their capabilities. Some can also be used as stand-alone functions to add functionality to the page. Other Helper Functions are focused on the report itself and does not impact or direct data in the report. These functions can improve the speed and presentation of which data can be understood, manipulated and viewed in the report. jDropdown The jDropdown function returns data from a DataPortal that can be displayed in a dropdown window for the user to select and insert into a designated cell within the spreadsheet. It is typically used to easily insert a valid parameter into the spreadsheet to filter the data returned by a report function after a pull action. When this function is linked to a hyperlink, the user can simply click on the hyperlink to display a list of valid parameters and insert one or more into the spreadsheet. jFocus The jFocus function will move the cursor and select a targeted range after a freeze panes action using Interject's Freeze/UnFreeze Panes action. The jFreezePanes function must be set up for this to trigger. The Freeze/UnFreeze Panes action can be found in Quick Tools on the Interject Ribbon Menu. jFreezePanes The jFreezePanes function freezes a designated pane so the user can scroll through data and still keep the frozen pane in view. The function also hides a designated range of the report, typically the configuration section of an Interject report. This provides the user with a more user-friendly simplified viewing experience. jCombine The jCombine function concatenates a range or multiple ranges of cells into a single string using a designated delimiter. Blank cells are skipped. jCombineIf The jCombineIF function concatenates a range or multiple ranges of cells into a single string using a designated delimiter if a certain condition is met. Blank cells are skipped. jDataPortal The jDataPortal function establishes a connection to an Interject DataPortal that will be used as the data source for the function it is embedded in. Data sets accessed utilizing the jDataPortal are stored in memory. This allows the data set to be accessed later without having to query the data again via the DataPortal. jColumnDef The jColumnDef function defines a column based on one or more parameters. Each parameter represents a segment. The segments can be set to filter the data that this column represents. Typically this function is used with a Data Pull function for a financial report. jRangeTag The jRangeTag function simply tags a designated range with a name. This is used to support certain automated processes unique to Interject functions, for example report distribution. jWorkbookProperty The jWorkbookProperty function extracts information from the properties of the workbook. jSetting The jSetting function is a simple way to create a JSON Tag/Value pair that can be used internally by the Interject system. Pair The Pair function transfers values from one cell to another. It is typically used in conjunction with the PairGroup function. Values are transferred upon a designated Interject event (e.g. a drill or as defined in the function it is embedded in). It is best practice to use the PairGroup function even when only entering one Pair. PairGroup The PairGroup function will active all Pair() functions defined within. It is best practice to use the PairGroup function even when only entering one Pair. Param The Param function transfers values as parameters to the DataPortal. The values must match the order of the parameters in the data source (The order can be verified using the Validation Report ). "},{"title":"Interject Data Systems","url":"/wIndex/INTERJECT-Data-Systems.html","content":"Welcome to Interject User Documentation! Interject User Documentation provides both quick and detailed guidance for a growing number of software processes. Learning Interject tools better will help you _get more done in less time and simplify work. This will allow you more opportunity to… delegate, learn, and grow your career, and hopefully your personal time. _ This is a knowledge base that captures our best practices, how-to documentation, and answers to most common questions. As always, we are here to help if you can't find what you need in this site. Just email us at help@gointerject.com. We are also happy to connect with you directly! Next, you might want to: Use the Page Tree on the Left to Find a Desired Topic - Just click on each menu item to explore. "},{"title":"Interject Shortkey Index","url":"/wIndex/INTERJECT-Hotkey-Index.html","content":" Overview Interject provides ways to increase productivity and work flow by utilizing shortkeys to quickly perform Interject actions. These shortkeys are adaptable and customize-able and are a staple to being efficient when using Interject functions. Any shortkey listed here can be changed and set to different keystrokes. However, there is a limitation on available keystrokes to change the shortkeys to. Default Shortkey Index Login Ctrl-L Login to Interject Note: This is used to help initialize the login before any automation is done with VBA (rarely used) Report Library Ctrl-Shift-L Open the Report Library Pull Ctrl-Shift-J Open the pull data form Ctrl-Shift-J, S Open the pull data form and pull data based on current form only. Ctrl-Shift-J, T Open the pull data form and pull the entire sheet Ctrl-Shift-J, W Open the pull data form and pull the entire workbook Ctrl-Shift-J, C Open the pull data form and clear the data Save Ctrl-Shift-U Open the save data form Ctrl-Shift-U, S Open the save data form and save data based on current form only. Ctrl-Shift-U, T Open the save data form and save the entire sheet Ctrl-Shift-U, W Open the save data form and save the entire workbook Ctrl-Shift-U, C Open the save data form and clear the save data notes Drill Ctrl-Shift-K Drill on selected data row Ctrl-Shift-B Navigate back from a drill Report Builder Ctrl-Shift-H Open the Interject Report Builder Form. Quick Tools Ctrl-Shift-T Open the Interject Quick Tools. Diagnostics Ctrl-Shift-D Open the Interject Diagnostic tool. Exports Ctrl-Shift-E Open the Quick Export Tool for the distribution center. Default Commands & Shortkey Index The following lists the commands that are assignable to a shortkey and the default shortkey assigned: Command Shortkey DoLogin Ctrl-L PullData Ctrl-Shift-J SaveData Ctrl-Shift-U DrillOnData Ctrl-Shift-K ReportLibrary Ctrl-Shift-L ReportHelper Ctrl-Shift-H QuickTools Ctrl-Shift-T NavigateBack Ctrl-Shift-B Diagnostics Ctrl-Shift-D Distribution Ctrl-Shift-E CloseFileWithoutSave AdvancedMenu ChooseCompany ExecuteJAction ValidationReportPullEvent Available Shortkeys The following are available shortkeys by default: Ctrl-Shift-C Ctrl-Shift-V Ctrl-Shift-R Ctrl-Shift-Y Ctrl-Shift-A Ctrl-Shift-Z Ctrl-Shift-Q Ctrl-Shift-W Ctrl-Shift-M Ctrl-Shift-N Ctrl-Shift-I Ctrl-T Overriding Shortkeys Using Diagnostics Interject provides an easy way to override shortkeys using the Interject Diagnostics menu. This method is preferable over changing settings files. For a detailed explanation, see Diagnostics-ShortKey. Overriding Shortkeys for Individual Installs Step 1: Open a new Excel Workbook, login to Interject and select the Advanced Menu menu to expand the Interject Ribbon to show the Advanced Menu. Then navigate to the Interject Diagnostic Tool . Step 2: Select the Open User Folders option. Select Execute Selected Action. Step 3: Two file folders will be opened, look in the folder named \"Settings\". Step 4: Select the file IdsSettings.xml right click the file then open it with a text editor of your choice. Step 5: Paste this code into the <Global></Global> xml container. Expand Soure true Step 6: Choose a Command from the available list of commands and an available Keystroke from the list of available keystrokes and paste the code below into the <Global></Global> xml container. Expand source Keystroke</Command> Step 7: In your text editor replace Keystroke with your chosen keystroke from the list and replace Command with your chosen command. Step 8: Save the text editor and close it, then restart Excel and your new shortkey setting will be functional. Overriding Shortkeys In a Shared Enterprise Environment Step 1: Go to the folder located at C:\\Program Files (x86)\\Interject Step 2: Open App.Config with a text editor. Step 3: If it is not already there, paste this code into the <appSettings></appSettings> xml container. Expand source Step 4: Now paste in this code into the <appSettings></appSettings> xml container. Expand source Step 5: Then, with your chosen Keystroke and Command replace it in the code within the editor Step 6: Now save your text editor and open excel and the shortkey will now work. Note: To edit shortkeys on an enterprise level, administrative rights for the environment are required. "},{"title":"Interject Hyperlinks","url":"/wIndex/INTERJECT-Link-Index.html","content":" Overview Interject provides a way to perform some of the basic Interject functions and commands by clicking on a link within the report. This makes it convenient to customize your report to preform commonly used functions and commands by the click of a button. Hyperlink List This feature only works if the correct Screen Tip is entered for the link. The following lists the types of operations this feature supports: Screen Tip Function to Reference Details \"Interject Dropdown\" jDropdown Function Executes a jDropdown Function (see here for an example) \"Interject Drill\" Data Drill Function Opens up the Data Drill window \"Interject Return From Drill\" n/a Returns From Drill \"Interject Pull\" Data Pull Function Opens up the Pull Data window \"Interject Save\" Data Save Function Opens up the Data Save window \"Interject Report Library\" n/a Opens up the Report Library window For a convenient way to create an Interject Hyperlink via the Quick Tools menu, see QuickTools - Hyperlink. Creating An Example Pull Link To see how this feature works, open up a report and type \"Pull Data\" into an empty cell. Next, right click that cell and click on \"Link\" and then \"Insert Link\". In the Insert Hyperlink window, click \"Place in This Document\" and type in the cell reference to the Report Function within the report. Finally click \"ScreenTip\". In the ScreenTip text, enter \"Interject Pull\" and click \"OK\" to get back to the report. Now when you click on the link, it opens up the Pull Data window. "},{"title":"Interject Ribbon Menu Items","url":"/wGetStarted/INTERJECT-Ribbon-Menu-Items.html","content":" Overview The Interject Ribbon has several options designed to help customize the reporting experience. There are both Simple and Advanced menus in the Interject ribbon. Simple Menu Items To display the Simple Menu, click the Advanced Menu button: The Simple Menu contains the following items: Common Actions : Report Library, Pull Data, Save Data, Drill on Data, Return From Drill, Custom Commands Tools : Quick Tools, Export Book, Report Builder, Sheet Protector User : Login/Logout, Company Connections, Updates : Check for Updates Help : Online Training, User Support, About Interject Advanced Menu Items To display the Advanced Menu, click the Simple Menu button: The Advanced Menu adds the sections: User, Formulas, and Administration. Formulas : Validation Report, JSON Administration : Diagnostics, System Report Library The Report Library manages Excel company report files and their various versions. It also provides access to subscriptions, favorites, and links to other locations. For more about the Report Library, see Report Library Basics. Pull Data The Pull Data function takes data from Data Portals and places it into an Excel report. When you open the Report Library and select a report, you can either use the Pull Data button to retrieve the data or hit CTL-SHIFT-J. To view an example, please see Customer Aging. Another function of the Pull Data tool is the Clear operation. While the Pull brings data into the spreadsheet, this function within Pull can remove it. Save Data Saving Data is an important part of report editing. This operation allows you to save Excel spreadsheet data back through a Data Portal and into a database or web API. The Save Data button will run any ReportSave() function. You can choose whether to perform this action on (S) selected cells, (T) selected tabs, or (W) the entire workbook. The Show Additional Options will give the user even greater flexibility between saving Data Cells and Data List Formulas. For more information about the difference, see here. Below the button for Save Data is the Clear Save Notes which would clear out any of the saved notes in the report. Drill on Data The Drill process opens and runs a report containing detailed information. It passes context-sensitive data from the first report to the next. For more information about Drilling and Navigating, see Drilling Between Reports. Return From Drill When Drilling, the focus will change to the sheet that you are drilling to. If you want to return to the previous report, you can go back using Return From Drill. It works similar to a browser's back button. For an example, see Inventory Reports. Custom Commands The Custom Commands operation allows users to manage and run three kinds of reports: Scheduled Items, Data Cell Updates, and Custom Items. These commands are set up by Interject for individual users and they typically run fixed data operations. Quick Tools The Quick Tools window provides a convenient set of features to help with convenience and efficiency. These tools are efficient ways to complete the most common actions in Interject. Each tool has a specific purpose. For more information about the features, see Quick Tools. Export Book This option will make a copy of the current workbook and convert the Data Cell formulas to values and remove external links. To read more on Exporting and Distributions, please see Exporting Reports. The Quick Export operation allows you to export any report into a new workbook, which gives you the opportunity to edit the report without compromising the original. Quick PDF allows you to download the tab as a PDF in case you need to send it without the formatting. When you select the Create Distribution button, it opens a sheet that allows you to build a new workbook with the information you want distributed across multiple tabs. Once you have built a distribution sheet, this button runs the sheet and builds the new workbook. Report Builder The Report Builder creates a sample Excel report in the current sheet based on an existing Data Portal. The Report Builder offers the flexibility to build a ReportRange. For example of using the Report Builder, see Create: Customer Aging Report. Sheet Protector The Sheet Protector uses a list of managed passwords to protect sheets across a company. Only approved users may protect and unprotect the worksheets. For an example using the Sheet Protector, see Create: Protecting Sheets. Login/Logout The Login and Logout buttons enable users to login to Interject using their Interject credentials. For more information, see Logging In. Connections The Connections button allows users to see a list of the connections that the report is using. From the list, you can see all the connections for the entire workbook and their status. Company The Company button allows user to switch companies they currently want to work in. Each company a user is enrolled in will allow them access to different sets of documents via the Report Library and Data Portals. Validation Report The Validation Report operation allows you to check the code for Saves, Pulls, Drills, and other actions. For more information about the options here, see Validation Report. JSON In the Interject Ribbon you can decide whether to show JSON or not. JSON (JavaScript Object Notation) is the readable code Interject uses to structure the data moving between a server and a web application. Diagnostics This option opens a configuration menu to manage diagnostics settings and send data to the Interject Support Team. System The operation System contains a large number of options. System Item Description Force Calc On Workbook Forces Excel to calculate all formulas in the Workbook. Similar to Excel's Calculate Now button in the Formulas tab on the Ribbon. Force Calc On Worksheet Forces Excel to calculate all Interject formulas in the Worksheet. Similar to Excel's Calculate Sheet button in the Formulas tab on the Ribbon. View SQL Test For ActiveCell Provides the SQL code that will be executed for the ActiveCell. The ActiveCell would be any of the Data Pull or Data Save Formulas. This code can be executed in your development environment to see what would be produced based on current context of the spreadsheet. View SQL Template For ActiveCell Will provide sample code as a starting point for creating a new Stored Procedure. A ReportSave will provide a template that can be used to save the data back. Clear Remembered Logins Removes all logins from the cache and the profiles removed from the Login manager Re-enable Protected Grouping Excel does not remember when files are protected while enabling groups. Pull or save data to reenable or use this function. Run the Interject Addin Manager Starts the Interject Addin Manager if it is not currently running Check Connection Allows user to test if a connection to a database can be established. To learn more, click here.. Configure Install Allows you to change your install configuration with a code Check For Updates Checks for updates to the Interject Addin. This applies to installations downloaded from the website. If an IT department installed Interject on a network, there is no need to check for updates. For more information, see Updating Interject. This option allows users to look for new versions of the Interject Excel Add-in. Notifications will show when new versions of Interject are available. Online Training The Online Training button links to Interject Official Documentation. Most common issues and questions about Interject's functions are answered within these pages. User Support The User Support form provides contact information for support issues. It also allows problem reporting and diagnostics. For more information, see User Support. This window provides several ways to contact Interject. If needed, a report can be sent to Interject from this window whenever a problem is encountered. About Interject About Interject allows users to see what version of Interject was downloaded along with a quick summary of what Interject does. Opening this window also shows the user's account credentials and clientID. "},{"title":"Interject Roles","url":"/wPortal/INTERJECT-Roles.html","content":" Overview At the bottom of the User Profile page are the roles you currently have assigned to your profile. There are a number of roles to choose from. Roles can stack, meaning each role adds the associated permissions to the user. You can add roles by selecting the role name from the drop down list. Then click Add New Role to add the role to the user's profile. Remove roles by clicking the small garbage 🗑 icon for each role. Note: Changes will take place on the next successful login from the user. Standard Role Grants standard permissions to use Interject core features and open live reports. Permission Location Docs View and open live reports in the Report Library Report Library Learn more Upload reports to the MyFavorites folder in the Report Library (Test and Dev status only) Report Library Learn more Override data connection in jDataPortal Report Formulas Learn more Approver Role Grants a user permission to approve reports by changing their status in the Report Library. Permission Location Docs Change report status Report Library Learn more Editor Role Grants a user permission to edit and upload reports to the Report Library and Data Portals. Permission Location Docs Upload reports to the Report Library (Test and Dev status only) Report Library Learn more Edit report details in the Report Library Report Library Learn more Override Data Portal command in jDataPortal Report Formulas Learn more Create, Update, Delete, Clone, and Enabled/Disable Data Portals Portal Site Learn more Create, Update, and Delete Data Portal parameters Portal Site Learn more Corporate Role Grants permission to view and access restricted Corporate folders in the Report Library. Permission Location Docs Corporate abilities and access to any restricted Corporate folders Report Library Coming soon Protector Role Grants permission to use the Interject Sheet Protector. Permission Location Docs Use the Interject Sheet Protector to protect and unprotect sheets or workbooks Sheet Protector Learn more CustomItems Role Grants permissions to execute Custom Commands. Permission Location Docs Execute items (non-scheduled) in Custom Commands Custom Commands Learn more SchedulerAdmin Role Grants permission of schedule items in Custom Commands. Permission Location Docs Full control of the scheduled items in Custom Commands Custom Commands Learn more ClientAdmin Role Grants all Interject permissions with the exception of the Corporate role. Permission Location Docs View and open reports in the Report Library Report Library Learn more Upload reports to the Report Library Report Library Learn more Edit report details in the Report Library Report Library Learn more Override data connection in jDataPortal Report Formulas Learn more Download file whose checksum did not match original checksum Report Library Learn more Override Data Portal command in jDataPortal Report Formulas Learn more Use the Interject Sheet Protector to protect and unprotect sheets or workbooks Sheet Protector Learn more Execute items in Custom Commands Custom Commands Learn more Full control of the scheduled items in Custom Commands Custom Commands Learn more Create, Update, Delete, Clone, and Enabled/Disable Data Portals Portal Site Learn more Create, Update, and Delete Data Portal parameters Portal Site Learn more Create password reset emails with password reset link Portal Site Learn more View Staff Page and Add, Edit, Delete, and Activate/Deactivate users Portal Site Learn more Force refresh of cache data for all users Diagnostics Learn more Set application data source Diagnostics Learn more Set Enterprise Connection Diagnostics Learn more Launch the License Management Form Diagnostics Learn more "},{"title":"Interject Website Portal","url":"/wGetStarted/INTERJECT-Website-Portal.html","content":" The Interject website portal is a central place to manage Interject client settings and user profiles. For an Interject developer, the most used areas of the Interject website portal are managing connections and data portals. A connection can be to a database or an API that you construct to your own data source. Connections can also be used by a number of data portals to retrieve or save data. A data portal is like a prescribed query or view with more capabilities. Data portals can handle get and post operations, meaning that they can pull data and, if set up by the developer, update data. Typically data portals are mapped to a database stored procedure or an API controller that pulls or updates data sets. For a complete description of the data portal options and features, go to The Interject Website Portal of this documentation. The following sections will walk through how to set up connections and data portals specific to the training examples. "},{"title":"Checksums for Installers","url":"/wDeveloper/InstallerValidation.html","content":" Overview The data integrity of Interject installation files can be verified by comparing its checksum. Interject creates csv files containing the official checksum of the installation file. To verify an installer, you can generate a checksum for the file and compare it with the official checksum. To obtain the official checksum for our installation files, please contact us at security@gointerject.com. Generating a Checksum To generate a checksum for a file, open Powershell and run the Get-FileHash command: Get-FileHash <FILE> -algorithm \"<ALGO>\" FILE = File to generate checksum ALGO = Algorithm to use (MD5, SHA1, SHA256, SHA512) Full Reset If the checksums do not match or you cannot obtain an official checksum for your installation version, it is recommended to uninstall the current version and obtain a new installer from our portal site or test portal site. Obtain the official checksum and validate the file's checksum using the method in the previous section before installing. Note: This checksum verification does not validate if files have been tampered with post-installation. It only verifies if the installer itself has been tampered with. Phishing with fake installers is a bigger concern than a virus that modifies interject files post-installation. Thus this method is just the first step towards security optimization. "},{"title":"Interject Support","url":"/wTroubleshoot/Interject-Support.html","content":" Overview Interject Support in built into Excel via the Interject Addin. You can easily report a problem to Interject or find Interject contact information. You also have the option of turning on certain logs in order to send more key details to Interject. User Support Interject User Support provides an easy interface within Excel to send a report or contact Interject. Verbose Logging To help diagnose any errors, Interject uses a Verbose Logging feature. The ideal goal of Verbose Logging is to help recreate an error and send logs to Interject's support team, where it can be fixed. Memory Logging Memory Logging is a toggled tool in an Excel report. When it is turned on, the memory use of the current workbook is recorded. When coupling this with Report a Problem, the RAM memory log is sent, along with the report, to Interject support. "},{"title":"Inventory Reports","url":"/wAbout/Inventory-Reports.html","content":" Overview This lab is a basic inventory example for tracking product quantities. In this walkthrough, you will open a summary of our product categories and total quantities. You will then drill into the Inventory Detail tab to view specific products within that category. There is also a secondary inventory option which allows us to view all of the categories, and the products within them, in a single sheet. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 1 Real World Walkthroughs > Lab 1.2 Basics of Report Formulas. Navigating to the Inventory Reports Step 1: Navigate to the Inventory report page inside the Interject Demos folder of the Report Library . The Report Library is a central place for publishing reporting templates. It is versioned and centrally located. Step 2: Check inventory by opening the workbook to see the different categories available. To access the totals of in-stock items, just pull the data into the spreadsheet using the Pull Data operation. Now you have an overview of totals for all inventoried categories, as seen below. In this example, though, you need to find out more than the total; you need to see how much grain you have, which means you need more a detailed view of current inventory. To find the data, use the Drill function for inventory by detail. Drilling to the Detail Step 1: To drill, select the category you want to drill to then give it a double click. For this example, you are going to drill on Grains/Cereals . In this instance use the hyperlink drill which only requires the click of the mouse to be drilled on. Click here to read more on Drills. Drilling will take us to InventoryByDetail, which will automatically pull all the items in stock within that category. From here, you can see exactly what is logged in-stock at the time of the pull: Grains/Cereals in this example. Return From Drill and Re-Drill You also need to gather a report of our beverage inventory. Step 1: Select the Return From Drill Button to go back to the sheet you drilled from. This will bring us back to the previous tab. Step 2: Now repeat the steps from the first drill by clicking the Beverages category. Since this is a hyperlink drill the report will automatically take us deeper. This will automatically pull the detail page again, but this time with products from the new category selected in the previous step. Alternate Inventory Example Now a report that shows all the categories and their details in one sheet, without having to drill back and forth between the two sheets. To accomplish this, you are going to use InvByCategory_WithDetail. Step 1: You need to open the WithDetails tab. When cleared, the sheet looks similar to the first category sheet. Step 2: Simply pull the data using the Pull Data button to view the inventory data. Now you can view every category and its detail all in one page, without any drills. That is all there is to it. To learn more about modifying this report, click here. "},{"title":"Investigating Report Errors","url":"/wTroubleshoot/Investigating-Errors.html","content":" Overview Report errors can happen for a number of reasons. There are two types of errors that Interject can display: handled and unhandled. Handled errors are errors that the developers have foreseen may occur and have written code to handle. The handling usually involves displaying detailed information. Unhandled errors are errors not specifically coded for and left for the system to handle. For example, on a pull or save, an error may occur on the server which the report is trying to access. This error could be handled by the developer, but it could also be an unhandled error. Developers can handle errors by using the keyword \"UserNotice\" in SQL (see here for more info). When the error is handled by the developer, a popup message will display a friendly error text set by the developer. Errors can be investigated using the Progress Bar Window or Activity Logs. Using the Progress Bar Window The Interject Progress Bar Window appears when processing data. When an error occurs, it will display information related to the error. An example of a common error is the misspelling of a data portal, which displays a handled error message when pulling a report with a misspelled data portal. If an unhandled error occurs, Interject will still report the error, but no popup message will be displayed to the user. Instead, the Progress Bar Window will stay open, showing a red X next to the failed data portal call. When that happens, users can double click the failed data portal to see the exact error the server returned. Using Activity Logs The Client Activity Dashboard is an Excel file setup to generate information regarding activity, Data Portal usage, user details, version reports, and error logs. It is a useful tool in diagnosing errors. Step 1: Open the Client Activity Dashboard from the Interject Report Library. Step 2: Navigate to the Error Log tab and pull the report (the report will populate with information about the most recent user activity logs that contain errors). Step 3: You can use the various filters and parameters on the report to refine the result set. This will help locate information for troubleshooting specific errors. "},{"title":"Portal: API Connection","url":"/wPortal/L-Api-Connections.html","content":" Overview The Interject add-in is a client application that can send a request to a POST HTTP(s) REST API. As long as the response is properly structured, Interject will display the data in Excel. Interject is not a tool that communicates with all APIs, but by allowing users to build custom APIs, it can be connected to any data-source including other APIs that are not natively supported. We provide a customizable API, which can serve as the starting point for this translational API. Another reason to use an API, instead of connecting directly to a data source, is to provide another layer of security. Since most data-sources are protected by a firewall, users outside a network, and/or without the correct credentials, are not able to access the data. An API can be that gatekeeper. Interject users can be validated in the pass-through API whether or not they are valid Interject users, and custom validation can be added to including row level security. Setup for a Data Connection to an API In this example, you will set up a simple connection to an example API. Detailed documentation on using a custom data API’s is currently under development. Please contact us for more information if needed. Step 1: Navigate to https://portal.gointerject.com and login to Interject. To set up a data connection click on Data Connections in the menu on the left. Step 2: In the Data Connections page, select the New Connection button in the top right corner. Step 3: In the Connection Type field, make sure Web Api is selected. Step 4: The Connection Details page will contain the following information for the new connection. Name: A unique friendly name used when connecting a Data Portal to the Data Connection. Description: Description of the API connection Api Root Url: The root URL of the API you are connecting to, for example [https://api.myDataApi.com] Api Connection String Name (optional): The name of the connection string within the configuration of your custom API. In many cases, an API may be hard-coded to use a specific database, so this setting is not needed. But you can build an API to use a different connection string, as indicated by this setting. If the developer uses this attribute, an API's use can be more flexible. Two options can be used here other than leaving it blank: In a web config, you can have a connection string with a name which will be used as the connection string name It is also possible to put the integrated security connection string here. This would be used to connect to data sources with extra security. Authentication Type: Each API may use a different type of authentication. 10 is the default for using the Interject authentication. Contact support for information about other types of Authentication. Step 5: After adding the required information, click on the Save button to create the new data connection. The API Data Connection is now ready to be used in a Data Portal. "},{"title":"Advanced Row and Section Hiding","url":"/wGetStarted/L-Create-AdvancedHideRowsSections.html","content":" Overview In this example of the ReportHideRowOrColumn() function, we will hide an entire section of a report based on the condition that the section is empty. You would typically use this in a report when data is pulled in with zero values. By hiding the zero value rows, and the entire section when all the rows within it are zero vale, the reporting area will be more usable. For this demo, find the Interject Inventory Demo in the Interject Demo folder within the Report Library. Once open, you'll use the InvByCategory_WithDetail tab. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 5 Advanced Features > Lab 5.2 Advance Row and Section Hiding. Hiding Rows Step 1: Start by using the Quick Tools button in the ribbon menu and selecting Freeze/Unfreeze Panes. Step 2: Insert a row above row above row 6, so that there are 2 blank rows, and then expand the collapsed columns by clicking the plus sign in the upper left. Step 3: Click into cell C4 and open the Function Wizard by clicking fx. Then scroll down in the Report Variable section of the wizard until you see UseTopSpacerRow, and type True into the empty field. Click OK. Step 4: In cell B5, type For Backward Compatibility:. Then, in cell C5 enter =ReportCalc() or double click it from the formula menu. Once it's entered, open the Function Wizard and input the following and click OK: OnPullSaveOrBoth: Pull OnClearRunOrBoth: Both SheetOrWorkbook: Sheet Disabled: Leave blank SheetName: InvByCategory_WithDetail Step 5: In cell B6 type \"Hide/Show Section:\". In cell C6 type =ReportHideRowOrColumn() or begin typing and double click the formula from the menu. Next, open the Function Wizard by clicking fx, enter the following information and click OK: OnPullSaveOrBoth: Pull OnClearRunOrBoth: Both RowOrColumnRange: C19:C56 Disabled: Leave blank Step 6: In cell A20 enter =Rows(A19:A56). Step 7: In cell C8, enter =C7, to reference the cell above. Step 8: Now, in cell C19 of the report area, write the formula =IF(AND(I22=0,$A$20<>38),\"Hide\",\"Show\"). Write the formula =C19 in both C20 and C21. Step 9: Select cells C19:C21 and copy to the clipboard by pressing CTL-C. Navigate to cell C23 and paste the formulas by pressing CTL-V. Continue to navigate to each category and paste the formulas in cells in C27, C31, C35, C39, C43, C47. The final result should look like the screenshot below. Step 10: To test that the function and formulas are working correctly, click into cell B20, which contains the category name \"Beverages\" and add and \"X\". Now freeze the panes using the Quick Tools menu, hide the leftmost columns, and pull the report. You should see that the empty category comes in collapsed, the other category detail is expanded, and the original \"Beverages\" category comes in at the bottom as \"Items Not Included\". "},{"title":"Create: Customer Aging Report","url":"/wGetStarted/L-Create-CustomerAging.html","content":" Overview In this page you will see the process of building a Customer Aging report from scratch to better understand reports and also get a clearer illustration of the Interject ReportRange() data function. If you are following the Training Labs, this is Lab 3.1. Note: The Report Library at Training Labs for this lab will be blank as you are creating a report from a new blank Excel sheet. Building the Report Step 1: This process begins with the Interject Report Builder . Open the Report Build as illustrated below. There is a drop down list of Dataportals that can be chosen . An Interject Data Portal is a pre-configured data query that is setup so spreadsheet users can easily direct data into their own spreadsheet reports. Data Portals can be setup to access databases or cloud data and are either setup by Interject developers or the IT team. Step 2: For this Customer Aging report, use the NorthwindCustomers Data Portal. Once chosen, click the Build Report Formula button. A new sheet should be added that looks like the screenshot below. Now the report is ready for further customization. Getting Started Step 1: Begin by putting the filter value Market in C16 so you can limit the data pulled to just a few records that have a Company Name that contains the word Market. Next, use the Pull Data menu item. You can see below, that all the columns available in the Data Portal will be shown by default with the column names on the first row. Step 2: Select a few columns for our report by copying a few of the column names to the Column Definition area on row 2. Follow the animated GIF below to multi-select CustomerID, CompanyName, ContactName, ContactTitle, City, Country, Phone, 30Days, 60Days, and 90Days. You can select them all individually while holding the Ctrl key. Then you can copy and paste the values all at once in cell B2. Step 3: Now that you have the columns, move the Phone column title to column F instead of H. First select the entire column H. Then hold the Shift key and hover your cursor over the left border of Column H. Left-drag the column left until the pop-up says \"F:F\" and then let go. Step 4: Now that the Column Definitions are set, clear the report for the next step. The cleared report should look like the screenshot below. Step 5: Now set up the ReportRange() formula to look to the Column Definition area that was just set. Select cell C6. Step 6: Click the fx button as noted below to open the Function Wizard and add a ColDefRange. The ColDefRange argument should be empty at first. For this report, you will set the ColDefRange to the entire second row, 2:2. Step 7: Next, scroll down in the Function Wizard to view the UseEntireRow argument. Change from FALSE to TRUE. This is an optional step but is certainly a best practice. Step 8: Before closing the Function Arguments, continue to scroll down so you can change the PutFieldNamesAtTop argument from True to False. This is not required but is a good practice. Step 9: When you re-pull the report, the selected 11 columns in the Column Definition should be the only columns showing. Final Formatting The data pulled should look like below. Note : Although not illustrated in the below steps, you can save typing in the column labels for later. Copy the Column Definition values in B2:L2 and Paste Values in B22:L22. These are the labels you can customize for users to view. Do some quick formatting to clean up the report. Delete rows 21 through 22. Setting up jFreezePanes Next, you need to freeze the panes to hide the configuration area from the users. This can be done manually with the Excel menu item for freezing panes. But this is a good time to illustrate INTERJECT's jFreezePanes() feature. First, setup the jFreezePanes function by entering =jFreezePanes() in F6 and click the fx button. Step 1: In the FeezePanesCell argument, input A21 to mark that row as the top of the visible report. This sets the top of the report that will be visible to the user. For the AnchorViewCell argument, type in A15. This will set the row that will be frozen above A21, where you will place the column headers. Press OK. Now we will setup a jFocus() formula so that the cursor will be set to a particular cell after the panes are frozen. In this case, we want the active cell to be C16 after the freeze. Click on cell H6 and enter the formula =jFocus(C16). Use the Quick Tools menu item in the INTERJECT Ribbon so you can easily freeze the panes using the jFreezePanes formula you just configured. Step 2: The following should be the result after the panes are frozen. Step 3: This last view shows what the final report can look like when the report is complete. Add the column labels in row 20, the filter helper text in column D, and match the formatting. The data can be cleared and shared with other users as a search tool for customers. Finally, clear the report, refreeze the panes, and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Create: Customer Aging Detail Report","url":"/wGetStarted/L-Create-CustomerAgingDetail.html","content":" Overview This example uses the Customer Aging demo to show the creation of a Customer Aging Detail report that will have variable customer subtotaled sections, each having their respective invoice detail. You will use both the ReportRange() and ReportVariable() formulas to create the output. If you are following the Training Labs, this is Lab 3.6. Note: The Report Library at Training Labs for this lab will be blank as you are creating a report from a new blank Excel sheet. Building the Report Step 1: You will begin by using Interject's Report Builder to make a template for the report. Select NorthwindCustomers Data Portal and choose Build Report Formula to build the report. When the template is complete, it should look like the one below. Step 2: Add 3 rows above row 25. Highlight rows 19-21 and rick-click on row 19 and click Insert. ReportRange() Step 1: You can select Pull Data to see which columns are available. Since the ReportRange() function does not have a Column Definition defined, it should show all the columns with their column names. After you pull the report it will look similar to the one below. Step 2: Now that you have pulled the data, you can copy the headers you want into the column definitions row. Do this by holding Ctrl and clicking CustomerID, CompanyName, ContactName, and Phone. Then copy them and paste the values into cell A2. The below animated GIF illustrates the copy process. Step 3: For this report, you need to use the multi-row feature illustrated in a previous example. This will be the complete subtotal section that will be repeated for every customer shown. You will insert 6 rows under the Column Definitions row 2 and insert 6 rows under the Formatting Range row 10. This will give you room to format the report. Each section should have 7 rows beneath it, as shown below. Step 4: Now you will move the Column Definition values into the correct positions. Move CustomerID to cell A5, another copy of CustomerID to cell G3, CompanyName to cell H3, ContactName to L3, and Phone to O3. You can also format the width of the columns to best fit the report. Match the following screenshot with the column widths. Step 5: Before you setup the Column Definitions in the ReportRange() function, it is best to clear the report so the previously pulled data is erased. Use the Pull Data menu item to select the Clear button as illustrated below. Step 6: Next, edit the ReportRange() formula. To access the formula you will select the cell C18 and click fx to bring up the Function Wizard. Now add the ColDefRange and the FormatRange. Type 2:8 for the ColDefRange and 10:16 for the FormatRange as shown below. Notice these are encompassing all 7 rows you have for each section. Step 7: If you re-pull the data, the multi-row format will be repeated for every customer. As seen in the following screenshot, you have 7 rows for each customer. It is not formatted yet, so it will not be clear which this is used for. But you can keep moving on. Step 8: You can begin setting up the Formatting Range. Give row 10,12,14, and 16 heights of 6.75. The image below illustrates how to drag the row height to get close to 6.75. You can also type in example data in G11, H11. In K11 you can type in a label Contact : and Phone: in N11. Format both of these to be right-aligned. Step 9: Now you need to create a formula that will total all of the detail that will later be populated between row 13 and 14. To create a total, type =SUBTOTAL(9,L13:L14) in L15. In cell H15 you will type =\"Total Open Invoices For \" & H11. H11 represents the name of the customer, and by linking it to H11, the subtotal line will note the customer name again. After that, you will copy the formula put in cell L15 to cell M15, N15, O15, and P15. These subtotals will be used for the aging buckets that will be setup later in this page. See the example below and adjust the formatting to match. Step 10: Re-pull the data to make sure it is formatted correctly. The formatting has been copied down to the rest of the report and there are subtotal sections. Now you need to populate the section detail with the customer invoice detail. ReportVariable() Step 1: In the Report Formula Section, add a new row under row 18. Step 2: Rename the first pull to Pull 1 - Customer Sections (in cell B18) in order to keep track of the report formulas. In cell B19 type in Pull 2 - Invoices for each section. The new ReportVariable() will be added to C19 shortly. Step 3: Because you are adding a new Report Formula, you need a new Column Definition and Formatting Range. The illustration below shows two additional sections added. Please update to match. Step 4: Since you have ranges and definitions for both of the formulas, you will rename them so you know which formulas they specify. Please update cells A1, A3, A11, and A13 to match the following text. Step 5: Now you will clear the data to prepare for creating the new formula. Step 6: To define the second formula, add =ReportVariable() to cell C23 and click the fx button. The placement of this formula matters, since you want it to run after the ReportRange(). The ReportRange() will be pulled first to provide the list of customer sections, and then the ReportVariable() will populate the invoices for each section. Step 7: Using the Function Wizard, add NorthwindCustomerInvoices as the Data Portal. Step 8: Next, you will specify the new Column Definition and Formatting Range. Type 2:2 into ColDefRange and 12:12 into FormatRange. Step 9: With a ReportVariable, a RowDefRange is required, since it marks what data is to be included in each section. Type A43:A44 into the RowDefRange. You will be placing the CustomerID in column A shortly. Step 10: Now type Param(C33,C34,C35,\"\") to establish the parameters for the formula that match the previous ReportRange(). Both Report Formulas are setup to use the same filters. Click OK to finish. Step 11: Before the pull, you need to specify the columns for the invoices that will be included in the detail section. Type CustomerID in cell A2, InvoiceID in cell B2, InvoiceNum in cell I2, OrderID in cell J2, InvoiceDate in cell K2, Current in cell L2, 30Days in cell M2, 60Days in cell N2, 90Days in O2, ExpectedDate in R2, and Note in T2. Please note that the screenshot below may not show all the characters that need to be typed. Please double check with the last sentence. Step 12: Once completed, re-pull the data. After pulling the report you now have invoice detail in each section. ReportDefaults() Step 1: The parameters in C33:C36 are not cleared after clearing the data. You can setup a ReportDefaults() formula to have these cleared after you clear the data. ReportDefaults is an event function, which means it triggers on a particular Interject event. Click on cell G23 and enter =ReportDefaults() and click on the Function Wizard button. Step 2: Enter Pull for OnPullSaveOrBoth field, clear for OnClearRunOrBoth, and Pair(\"\",C33:C36) for TransferPairs. This will transfer \"\" into cells C33:C36 after a Pull-Clear event. Step 3: Clear the report. Notice the parameters are reset. Formatting the Report Step 1: You can go a step further and setup the formatting for the invoice detail and add a subtotal formula in row 12. Type =SUM(L12:O12) into cell P12 to add the formula for total. You will also change the color on cell R12 and T12. Step 2: After you add some headers–and move some cells, freeze panes, and formatting–the final product will look like this. Finally, clear the report, refreeze the panes, and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Create: Customer Orders Report","url":"/wGetStarted/L-Create-CustomerOrders.html","content":" Overview This page illustrates the process of building a Customer Order report from scratch and uses the multi-row option to provide a more advanced presentation. Here you will get a better understating of the ReportRange() and the jFreezePanes() functions. If you are following the Training Labs, this is Lab 3.2. Note: The Report Library at Training Labs for this lab will be blank as you are creating a report from a new blank Excel sheet. Building the Report Step 1: This process begins with the Interject Report Builder. Open the Report Build as illustrated below. There is a drop down list of Data Portals that can be chosen. An Interject Data Portal is a pre-configured data query that is setup so spreadsheet users can easily direct data into their own spreadsheet reports. Data Portals can be setup to access databases or cloud data and are either setup by Interject developers or an IT team. Step 2: For this Customer Orders report, use the NorthwindCustomerOrders Data Portal. Once chosen, click the Build Report Formula button. A new sheet should be added that looks like the screenshot below. Now the report is ready for further customization. Customizing the Report Step 1: Before you pull in the data, type SAVEA in the CustomerID field to shorten the data-set and make it easier to work with. Step 2: Now use the Pull on Data menu item to grab the data. You can now see all the columns available in the Data Portal will be shown by default with the column names on the first row. Step 3: Select a few columns for our report by copying a few of the column names to the Column Definition area on row 2. Follow the animated GIF below to multi-select CustomerID, CompanyName, ContactName, OrderID, OrderDate, OrderAmount, Freight, and TotalAmount. You can select them all individually while holding the Ctrl key. Then you can copy and paste them all at once in cell B2. Step 4: Once the Column Definitions are set, clear the report using the Pull Data menu item and choose the Clear Data button. The cleared report should look like this. Editing the Report Function Step 1: For easy editing, open the function wizard by clicking on the function in cell C6 and clicking the fx button. Step 2: First, set the ColDefRange to the second row (2:2) so that Interject knows which row is the Column Definition. Step 3: Next, scroll down further in the argument list to change UseEntireRow from FALSE to TRUE. Also change PutFieldNamesAtTop from TRUE to FALSE. These are not required but are best practice. Step 4: Now pull the report to see the data. It should pull only the data for the columns you requested in the column definitions. Step 4: Now that you have the data, remove any excess text and formatting not needed for the final report. Use the before and after screenshots to note what should be cleared. Before: After: Step 5: With all the extra text gone, you can now remove the unneeded rows, 10:12 and 19:20. Before: After: Adding Multi-Row Range: Continue adding column labels and applying the multi-row feature. Step 1: To set up the column labels in row 17, copy the text from row 2 in the Column Definitions. You can change the column labels further, but the text is fairly descriptive. Then you can add bold and underline the headers to add emphasis. Step 2: Now set up the report to use three rows for every record returned. Navigate to the top of the page and insert two rows between row 2 and 3. The end result should resemble the image below. Now add column definitions on row 3. You are going to add shipping information to the second row so the report does not have to be as wide. Leave the third row as a spacer between the next record. Step 4: Next, you need to add to our formatting Range. Before now, you have not needed to setup a Formatting Range since it defaults to the first row where the data is placed. With a multi-row report, a Formatting Range is required. Just like with column definitions, first add two more rows to the section, as shown below. Whatever the formatting, formulas or values placed in the Formatting Range will be copied first to new data rows before the data is placed on the worksheet. Below is an example of what a Formatting Range might look like (Note the column addition after Col C). It is okay to leave values there to visualize the formatting as long as it is understood the columns noted in the Column Definition will override the cells with data. Step 5: Before pulling the data, you need to edit the ReportRange() Formula in C10 so that it uses the Column Definition and Formatting Range set in the previous steps. Set the ColDefRange to 2:4 and FormatRange to 6:8 as illustrated below. Step 6: Now pull the data to see how it looks! The report should look something like this. Note that the text gets overwritten with the data pulled by Interject. However, the formatting, row size, text type, and text that does not coincide with the column definitions stay the same. Final Steps Step 1: Now setup a jFreezePanes function so you can quickly unfreeze and freeze the panes at the correct position. First, setup the jFreezePane function in cell F10 by going into the report formulas section and typing =jFreezePanes(), then click the fx button to open the Formula Wizard. Step 2: In the FeezePanesCell argument, input A22. This will set the row that will be frozen above A22, and also where you will place the column headers. For the AnchorViewCell argument, type in A14 to mark that row as the top of the visible report. This sets the top of the report that will be visible to the user. Step 3: Use JFreezePanes to toggle panes off and on. Go to the Quick Tools menu in the Interject Ribbon, then click Freeze/Unfreeze Panes. This will freeze the panes, and the report will look something like below. Every report will be specific to the company's needs and best practices, but a completed report should look like this: Finally, clear the report, refreeze the panes, and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Create: Building jDropdowns","url":"/wGetStarted/L-Create-Dropdowns.html","content":" Overview Interject reports typically have parameters that can be passed to a stored procedure that can filter the data. It can be difficult to remember what the exact filter names are and which are even available for the stored procedure. This is especially true in large reports with many filtering options. However, you can use Interject's jDropdown formula to automatically create hyperlinked lists of available filters. This makes filtering in large reports a much simpler task! In this example you will modify the Customer Aging report by adding the jDropdown functionality to one of the filters, while using an existing Data Portal. Note: The jDropdown feature requires a Data Portal with a stored procedure to operate. In the event that you cannot create a stored procedure, you can reuse a Data Portal from the report formula that populates the report in which you want to use this feature. To learn how to build the Database Connection, Data Portal, and stored procedure used in this example, follow the instructions in the developer example. Otherwise contact your IT department to help implement this functionality. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 5 Advanced Features > Lab 5.3 Building jDropdowns. Preparing the Report Step 1: Open the report Interject Customer Collections under the Interject Demos in the Report Library. Step 2: Next, unfreeze panes by going into Quick Tools and selecting Freeze/Unfreeze Panes. Adding a Named Range Step 1: Now select the Formulas ribbon tab and select Name Manager. Step 2: Next, select New…. Step 3: For the Name: field input CompanyNameDDL, and in the Refers to: field input =CustomerAging!$H$7. Click OK and Close the Name Manager window. Note: A named range is used here so that upon the movement of the formula, the hyperlink that is created later will still reference the cell with the jDropdown() formula. Creating the Formula Step 1: Next, in cell H7 insert =jDropdown() then select fx. Step 2: For the Data Portal argument field, input NorthwindCustomersDropdown. Step 3: For the MultiSelect argument field, input False. Then for the Target Cell Argument field, input C17. Step 4: In the Value Column Name argument field, insert CompanyName. Step 5: Scroll down in the function arguments until you see the Display Column Name argument field and insert DisplayText. Step 6: Next, scroll down in the function arguments to find the Instruction Text argument field and input Select A Customer. Click OK. IMPORTANT: The Value Column Name and the Display Column Name arguments must exactly match the name of a column that is returned by the stored procedure. A good place to look for valid columns is in the Column Definitions section of the report. To learn more about the jDropdown() function and what each of its arguments do, review its index page. Adding a Special Hyperlink Step 1: Now select cell B17 and right click. Then select the Link option in the menu. Step 2: Click on Place in This Document then select the CompanyNameDDL defined name in the list of options. Then select the ScreenTip… button. Step 3: In the ScreenTip text: field input Interject Dropdown (Note: The jDropdown function will not work without this). Reviewing the Report Changes Step 1: Now select the hyperlink you just made and type Market into the search options. Notice that there are 4 options. Select BOTTM - Bottom-Dollar Markets. Step 2: Pull the report. Step 3: The pull will only return the Bottom-Dollar Markets data. To build the stored procedure and Data Portal, and database connection that allows this formula to work, continue to the developer section of this example. Creating a Custom jDropdown List The jDropdown feature can be used to create a custom list of items in a dropdown list. Instead of a Data Portal, you can enter a list. For example, to create a dropdown list of 3 items: Yes, No, Maybe, use the following syntax: list:Yes,No,Maybe To display the list options in the dropdown window something different then the entry, use the following format: list:Yes^This is Yes,No^This is No,Maybe^This is Maybe Step 1: Find an empty cell and enter a heading: Step 2: On the cell above the heading, enter =jDropdown( and press the \"fx\" button to bring up the Function Wizard: Step 3: Enter the following for the jDropdown parameters and click OK: Data Portal: \"list:Yes^This is Yes,No^This is No,Maybe^This is Maybe\" Target Cell: <Enter cell ref here> Value Column Name: <Enter anything here> Step 4: Right click the cell you wish to create a link and click Link: Enter the cell reference of the jDropdown function and click ScreenTip: Enter \"Interject Dropdown\" for the ScreenTip and click OK and then OK again to create the link: Step 5: Click on the link to see the dropdown list: Click on an entry to see it populated: "},{"title":"Create: Financial Variable Report","url":"/wGetStarted/L-Create-FinancialVariable.html","content":" Overview The ReportVariable() function is ideal for financial reports since it directs data into multiple specified ranges of a report that can grow and shrink with the data. In this example you are going to use the Financial Cube (FinCube) Data Portal to create a financial statement from scratch. First you will use the ReportRange()formula to review the financial group summaries for a location. With the financial groups retrieved, you will than expand to create a subtotaled financial statement so each subtotaled detail will expand and shrink with the data. If you are following the Training Labs, this is Lab 3.5. Note: The Report Library at Training Labs for this lab will be blank as you are creating a report from a new blank Excel sheet. Pulling Financial Data With FinCube Data Portal To get started you will need to learn how to pull financial data from the Interject Financials for Spreadsheets application. You will initially use ReportRange() to pull a simple list of balances by account. Step 1: Open a new worksheet and choose the Report Builder from the Interject ribbon. For this example you will be using the Interject_FinCube Data Portal. Select Demo_Interject_FinCube from the Data Portal list and click the Build Report Formula button. Step 2: The worksheet should look similar to below. A ReportRange() formula should be setup in C6 and its related parameters were placed starting in row 16. This Data Portal is special and will not show all the available columns by default if you do not have a Column Definition defined. There are simply too many combination of column options to present. So you need to setup the Column Definition range first. Select cell C6 and click the Fx button. Set the ColDefRange argument to 2:2 as shown below. This row is where you will specify the columns for the report. Step 3: Adjust the default filters and the Column Definitions to match the intended report. In cell C17, change the Segment2 filter from 7001 to 7002. Segment2, in this demonstration demo, represents a location or a cost center. Before: After: Continue to input the Column Definitions. Enter Segment1 in C2, Segment1Name in D2, CYA1 in F2, CYA2 in G2, and CYA3 in H2. Segment1 in this demonstration represents a general ledger account. The notation CYA1 represents an amount, specifically for the C_urrent _Y_ear _A_ctuals for month _1, January. The notation options for amounts are further discussed in this link FinCube - The Financial Cube but you can go through several examples in this exercise. You need to do one more thing before pulling the data. Since this worksheet is very tall, freeze the panes in row 3 so you can keep the column headers in view as you are looking at the data that results. Step 4: Pull the data to see the results. Down in row 38, scroll to the data that was inserted. There are account descriptions and amounts for Jan 2002, Feb 2002 and Mar 2002. Change the width of column D to 35 so you can see the full account descriptions. You can answer the question on how you are viewing the amounts were for the year 2002. In cell C25, it shows the filter that was used and it is set to 2002. This will define what CYA (current year) is. There is also LYA (Last Year Actual) and others noted in the documentation link FinCube - The Financial Cube. Notice that you also defined a period 1 in cell C24. This will be the default period that you will use in the next notation example. Step 5: In cell E2, type in Act, short for Actuals. Then re-pull the report. In column E (from the Act notation), you can see is the same as column F (from the CYA1 notation). They are both for Jan 2002. The Act represents actual for the current period that was specified in the period filter noted above. Go further and change cell E2 to Act(1). The suffix (1) will adjust the period by one. By adding this the amounts returned should equal column G, Feb 2002. (You can use (-1) to go the other direction for previous months. You can review further notation options in the link FinCube - The Financial Cube.) Re-pull the data. Both columns E and G are the same amounts, as expected. Step 6: In cell I2, type CYAYTD3. CYAYTD stands for Current Year Actual Year To Date. The (3) signifies the amount for the 3rd month (March). In cell J2 type ActYTD(2). This stands for the Actual Year To Date and the (2) means add 2 months to the current month. So 2 months past January is March. Re-pull the data again. As seen in the below screenshot, both CYAYTD3 and ActYTD(2) values match. Before moving to the next step, clear out the data. Click the Pull Data menu item and choose the Clear button and the data should be removed as shown below. Step 7: Move on to the next amount notation that is much more flexible. By using a helper function jColumnDef() in Column Definitions you can define the columns illustrated above and go much further in defining what each column should be. First make room to use this helper function. Insert 4 rows under row 2. Now label the new rows. In cell D3, type Source:. In cell D4 type Period:. In cell D5, type Year:. Format D2:D5 to be right aligned as well since that will look better. Next remove the previous amount notations in cells E2 through J2. Select E2:J2 and clear contents as illustrated below. Step 8: Now insert the helper function, jColumnDef() into E2. Type =jColumnDef() in E2 and click the Fx button to bring up the Function Wizard. The arguments for the jColumnDef() function closely match many of the parameter filters of the Data Portal starting in row 20 of the spreadsheet. Go ahead and type E3 for the Source argument, type E4 for the Period argument, and type E5 for the Year argument. Copy the existing jColumnDef() formula to F2 and G2 so you have more columns to work with. Then pull data using the Pull Data menu item. Columns E, F and G are all the same amounts. They are amounts related to the Data Portal parameter filters starting in row 20 of the spreadsheet. Since the JColumnDef() function added no additional values for its arguments, it let the Data Portal parameters defaults remain. Those filters have defined the totals to be: PL accounts only (which is defined as all the Profit and Loss general ledger accounts); Segment2 (Location) = 7002, Period=1, Year=2002, and Source = Actual. If you do not setup any arguments for the jColumnDef functions, it does not refine it any further. It is important to understand how both sets of filters interact. The jColumnDef() arguments serve as filters for the column while the Data Portal parameter filters in the spreadsheet are default filters when not defined by JColumnDef(). Step 9: To expand on the jColumnDef() filter arguments, type in specific values for jColumnDef() to reference. In cells E4, type 1. In F4, type 2. in G4, type 3. Then re-pull the data. The resulting data is the same data you pulled for CYA1, CYA2, and CYA3 above. The Period argument for jColumnDef() overrode the Data Portal filters and changed how the column was presented. For clarity, type in all the jColumnDef arguments like shown below. Type Actual in cells E3, F3, and G3. Then type 2002 in E5, F5, and G5. This will not change the data that is pulled since it was already setup that way in Data Portal parameters, but it is easier for a report writer to see what is being presented. Before moving on, bring up the jColumnDef() Function Wizard again. Click on cell E2 and click the Fx button to view the arguments below Year. These are other dimensions/segments that can be used to define what each column holds and you can use advanced filter notation to handle complex arrangements. Columns could hold different cost centers, geographic regions, currencies, etc. See FinCube - The Financial Cube for further details on the filter syntax that can be used. You should have a much clearer idea on how to use notations to bring in the balances that you need for reports. You can continue to shape the existing report into a Profit and Loss report. Preparing the Row Format To setup the financial report you need to first get the financial groups that will be used as subtotal sections. Then you need to create the final row format with the subtotaled sections that you need for the report. In most cases you can use an existing report that has the correct row format and change the columns. In this example you will start from scratch. It will be more work up front, but it can be re-used for future reports. Step 1: First, you need to update the report to show the Account Type, which is the financial grouping you will use in cell D2, change Segment1Name to AccountType and re-pull the data. As seen in column D, you get the AccountType text and the account group in column C. These are the groups you need, but you want a unique list. Clear the data again. Step 2: Once the clear is done, remove the value in cell C2. By removing the Segment1 from the Column Definitions, the amounts will be summarized only by the Account Type. Re-pull the data once again. The report will look like below, showing the full data results of the amounts by account type. Step 3: Now you have the Account Types, you can start preparing the row format in the spreadsheet so each Account Type has its own section. Clear the data again and use the below screenshot as a guide to create a subtotal section for Revenue - Sales and Revenue - Other. It is important to add an extra row for the Sum() function (see row 45 and 49) so it will expand as data is inserted. A Revenue total line was also added to sum both of the revenue sections together. Since it is a spreadsheet, you can create any row format that you can think of. Lastly, please note that the Account Type names placed below in column B are the only values in the column. These are Row Definitions that will be the marker for where data is inserted. Now you are ready for the next step, changing the ReportRange() formula in C10 to a ReportVariable function. Converting ReportRange() to ReportVariable() Now you will convert ReportRange() to ReportVariable() to populate each financial group section in the row format. An automatic conversion is not available yet but changing the formula can be done quickly with the following steps. Step 1: Select the cell C10 and look at the Formula Bar. The ReportRange() formula needs to change to ReportVariable(). Change the wording as illustrated below. Before: After: Step 2: Next remove the last two arguments. Remove ,FALSE,TRUE that is at the end, but keep the ) at the end. It should look like the below screenshot when removed. Noticed the formula will end with two parenthesis, like )). Step 3: With the above two edits, the formula is converted and you can click the fx button to review the arguments. The only argument that still must change is RowDefRange. This must change to select the list of Account Types that were setup in column B in previous steps. In the below example, you see that the first Account Type started at B44. Go up one row above and include at least one row below the last Account Type and enter B43:B141 into the RowDefRange argument. Step 4: Before you can pull the ReportVariable() data for the first time, edit the Column Definitions. You last left Column Definitions with only AccountType in D2 along with 3 amount columns. This pulls a unique list of Account Types with their corresponding amounts. However, for this financial report you need to see account level detail in each Account Type subtotal section. Change D2 to Segment1. As noted earlier Segment1 relates to a general ledger account for this demonstration. Next, you must type AccountType in cell B2. This is purposefully above the RowDefRange you defined a moment ago. By placing this column name in that column, Interject will expect that column value to define how data rows are included in each of the subtotal sections. Step 5: Now you are ready to pull the data. Use the Pull Data menu item to pull the data. The data presented should look similar to the below screenshot. The Revenue - Sales section has three accounts listed and the totals are shown in row 48. There are new values in column B shown as [!DetailRow]. These values appear for each new row that is automatically added. These extra values will be deleted if you clear the data. Final Formatting Once the report is functioning and each subtotal section is expanding with data as needed, the rest of the work is simply spreadsheet work. There are a few key points to explain to make the spreadsheet work go a little faster. Point 1: Subtotal descriptions: The Row Definition in column B is typically hidden from view in the final report. You can insert a new column in between columns C and D to make room for the definition and you will add a formula in column D to equal the Account Type so it can show. In some cases, you could type in a more appropriate section name if not equal to the Row Definition value for that section. Point 2: Filters/Headers/Titles: In this screenshot there is an illustration of some of the small formatting options that help. For the column headers, they can link to the Column Definitions. The Actual value simply references the Source above on row 3. The months like Jan-02 uses the Date() function that points to the year and month in row 4 and 5. And do not forget to put a title on the top left. Point 3: Freezing panes: For ReportVariable() reports that have Row Definitions, you have to freeze the panes both vertically and horizontally. It helps to insert a new spacer column and keep the width narrow as shown below in column C. When freezing panes, you need to be sure to set the pane on the right of the spacer column. If set right next to the left side of the spreadsheet, the freeze panes will not lock horizontally. Point 4: The Leftovers section: An important element for financial reports is a means to check the totals. Interject provides a method to ensure all data is presented. Including a Leftovers section at the bottom of the report will help provide assurance if all data did not get assigned to any subtotal section in the report created. This concludes the exercise on creating a financial statement with Interject. There are still many more details to share but this will provide a foundation to get started. Once all the steps have been followed the report will look as below. Next, you can open up the PL trend to see how the created report compares. Do this by selecting the Report Library and selecting PL Trend. Then pull the data, set the location to 7002, and the date to 2002-03. Then select the 2 in the upper left corner to expand the groupings. Ta-Da! After comparing the reports you can notice that, besides some formatting differences, the reports are the same. Finally, clear the report, refreeze the panes, and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Create: Hiding Rows and Columns","url":"/wGetStarted/L-Create-HideRowCol.html","content":" Overview The ReportHideRowOrColumn() function allows you to hide rows columns when they are not needed, for example if a row contains no data. In the first example, you will hide rows containing a total value of zero. The second example shows how to hide columns using the same function and for a similar reason. Once completed, these two features can be combined to hide, without eliminating, certain unneeded values and generally clean up the presentation of your financial reports. Both of these examples use the Customer Aging Detail report created in a previous walk through. You can navigate to the report by opening the Customer Collections report in the Interject Demo folder of the Report Library. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 5 Advanced Features > Lab 5.1 Hiding Rows & Columns. Hiding Rows Step 1: With the report opened to the CustomerAgingDetail tab, type Market into the company name filter and pull the data using Ctrl+Shift+J or the pull button. Notice on row 61 that Great Lakes Market has an entry with zero value. Rows like this are what we'll hide using the ReportHideRowOrColumn function. Step 2: Unfreeze the report formula panes by clicking the Quick Tools icon in the ribbon menu and selecting Freeze/Unfreeze Panes. Step 3: Type Hide/Show Inv w/0 Subs in cell K27. Then type =ReportHideRowOrColumn() in cell L27. Step 4: With cell L27 still selected, click on the fx button to open the formula wizard. For OnPullSaveOrBoth, type Pull For OnClearRunOrBoth, type Both For RowOrColumnRange, enter C:C (this will copy the formula through all rows of the report) For Disabled, do not enter anything Hit OK Step 5: Now, in cell C16, type =IF(P16=0,\"Hide\",\"Show\"). This specifies how to handle 0 values based on the formula entered for the subtotal column. Step 6: Next we will insert the Interject function ReportCalc. This will force a recalculation of the current sheet upon an event such as a pull action or clear event. (This function is for previous versions of the Interject Add-in because the latest version will automatically perform a recalculation whenever the Pull, Save, or Drill window is displayed.) Insert a row above row 30, and in cell G30 type For Backward Compatibility. Then in cell H30 enter the formula =ReportCalc() and click fx. Enter the following into the Function Wizard: For OnPullSaveOrBoth, type Pull For OnClearRunOrBoth, type Both For SheetOrWorkbook, type Sheet For SheetName, type CustomerAgingDetail Step 7: Type Market into the customer name parameter again, then pull the report. Notice this time that the row containing no subtotal is now hidden. The data is not gone, it just isn't displayed in the report any longer. Hiding Columns In this next example our goal is to hide the rows that have a payment expected date and show the rows without one. Step 1: To begin you will unfreeze the report using Quick Tools. You are now ready to begin editing the excel sheet. Step 2: Select cell M34 and N34 and insert Hide. This is to hide the columns where the overdue charges are under 90 days since this data is not needed often. Step 3: Select cell O34 and insert =IF(SUMIF(C47:C48,\"Show\",O47:O48) > 0, \"Show\", \"Hide\"). Step 4: In cell G32 insert Hide Columns: and in cell H32 input =ReportHideRoworColumn() Step 5: Select cell H32 and click the fx button to open the function wizard Step 6: In the function wizard input Pull in the field labeled OnPullSaveOrBoth, input Both in the field OnClearRunOrBoth. Step 7: Select the filed RowOrColumnRange then select the three cells containing Hide. In this case it will be M34:O34. Click OK. Step 8: Select cells L5 and O5 and shift them left 3 cells by cutting the cells and pasting them into J5 and M5 respectively. Step 9: Select cells K19 and N19 and shift them left 3 cells by cutting the cells and pasting them into I19 and L19 respectively. Step 10: Re-freeze the report Step 11: In cell H39 input Market and set cell H42 to No and Pull the report Your report is now finished and can hide rows and columns where the invoices have an expected date and there is no invoice that is 90 days past due. Finally, clear the report and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Create: Inventory Fixed Report","url":"/wGetStarted/L-Create-InventoryFixed.html","content":" Overview In this page, you will go through the process of building a fixed Inventory report from scratch using the ReportFixed() function. If you are following the Training Labs, this is Lab 3.3. Note: The Report Library at Training Labs for this lab will be blank as you are creating a report from a new blank Excel sheet. Building the Report Step 1: Begin like you did when creating the Customer Aging report, with the Interject Report Builder. It is where you select the Data Portal that is needed for this particular report. Step 2: For this Inventory report, choose the NorthwindFixed Data Portal and click Build Report Formula. After the report is built, it will look like the one below. There are no parameters involved with this report, so none are listed after row 14. Delete rows 11 through 24 since they are not needed for this lesson. The page should look as illustrated below. Step 3: Because ReportRange() is the most used pull function, the report builder builds one automatically. However, in this report you will be using the ReportFixed() function. Clear the ReportRange function in cell C6. Step 4: A fixed report requires specific values to be entered in a row definition column. Enter the following categories as seen below. In cell B27, you also added a Leftovers section that is a special Interject feature, a Row Definition marking the start of a section that will include any data not matching the earlier fixed rows. This is helpful in ensuring all data is presented. Step 5: In C6, type =ReportFixed(), then click the fx button to bring up the Function Wizard as shown below. In order to bring in the correct data you will need to designate a Data Portal. The Data Portal for this example is NorthwindFixed. Step 6: In a ReportFixed function you need to define the Column Definition and Row Definition ranges. Using the Function Wizard, use B16:B28 for the RowDefRange . For Column Definitions, use row 2 by typing 2:2 in the ColDefRange argument. Step 7: Now define the Column Definitions that are available in the Data Portal. Type ProductTypeCount in G2 and UnitsInStock in H2. Step 8: In this step, add column labels, report titles, borders, and subtotals. Change the report to match. Step 9: Freeze the report panes so that just the report area is shown for users. In previous examples jFreezePanes() functions were used, but in this page use the standard Freeze Panes feature in Excel. Adjust the worksheet's vertical and horizontal scroll bars until the report is positioned like below. Select cell D15 and use the View menu to set Freeze Panes as seen below. The final product should look similar to the example below. Step 10: Now select Pull Data to view the data in the report. Your final data pull should look like this. You may need to do additional formatting to match the output. Setting up Run on Open Step 1 Click on File in the Excel Ribbon to bring up the file screen. Step 2 Under Info, select Advanced Properties in the Properties dropdown. The Properties window will open. Step 3 Under the Custom tab find the Name textbox and type Interject_RunOnOpen. The Type field should be Text. Step 4 The Value box below takes two options: True or T:TabName True will will cause Excel to run on the first tab seen on open. Specify the tab name to default to that tab. Option 1 If you would like to run on the first tab seen, set value to True and click Add. Option 2 If you would like to run on a specific tab, set the value to T:TabName and click Add. In this case, we want to pull CustomerAging on open, so type T:InventoryByCategory and that tab will be pulled. Step 5 Save the file and update the Report Library with the new file. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. Step 6 Close and reopen the file through the Report Library, and Excel will auto-pull the report. For a full guide using a different report, refer to the Run on Open Example. jWorkbookProperty() Finally, we will add a finishing touch with the jWorkbookProperty() function. This function pulls information saved in the Excel file properties into the report. To start, click on File on the top menu and then click Info, Properties, and then Advanced Properties. Enter some details into the Properties window. In cell H11 enter =jWorkbookProperty(\"company\") and see the results. "},{"title":"Create: Inventory Variable","url":"/wGetStarted/L-Create-InventoryVariable.html","content":" Overview The ReportVariable() function directs data into multiple specified ranges of a report that can grow and shrink with the data. It is ideal for a financial report or any report that has subtotaled sections. In this example, you will use the report seen in the Inventory Walkthrough. Once completed all rows of the report Inventory By Category with Detail will be populated with a single ReportVariable() function. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 3 Creating Reports > Lab 3.4 Inventory Variable Report. Report Variable Step 1: Open the Interject Report Library and select the Interject Inventory Demo in the Interject Demos folder. Step 2: The report will open in the InventoryByCategory tab, as shown below. Step 3: For this exercise, you will be using the worksheet InvByCategory_WithDetail. This worksheet is already setup for a Variable section report, and it will help focus on key concepts rather than the spreadsheet text and formatting. Click on the tab InvByCategory_WithDetail. Step 4: Open the configuration section of this report using the following three steps. First, select the View ribbon. Second, pull down the Freeze Panes menu and select Unfreeze. Last, click the plus sign, as shown below, to can expand the column groupings. Scroll to the top, and the full configuration area is seen in the left of the report. Clear the formula in cell C4 so you can build the ReportVariable() function from the beginning. Step 5: Now create a new report formula. In cell C4 type =ReportVariable(). Step 6: Next, click the fx button left of the formula to open the Function Wizard. Step 7: First enter the Data Portal for this example. Type NorthwindVariable in the Data Portal argument. Step 8: Next, setup the Column and Row Definitions for this report. For the RowDefRange argument, type B18:B54. This covers the Row Definitions for the main body of the report. Notice each group is separated by at least one row. This is required for the categories to be populated separately. This section also includes the Leftover section as well. This leftover section is special, since it will show any records that did not populate in one of the sections above. This helps ensure you are not missing any data in the report. For the ColDefRange argument, simply input 2:2, since the Column Definitions are already setup in row 2 for this report. Step 9: The detail rows of a Variable report are typically formatted using the Formatting Range. Initially, use the first row of the first section to set the formatting. Leave the FormatRange argument blank. Pull the report. With the report pulled, see how data was inserted into each of its sections, and each section expanded to fit the data. You can even see how the Leftover section works. Try changing the cell B19 from Beverages to BeveragesSkip. When you pull again, that section's records will move to the bottom. Go ahead and change B19 back to Beverages and re-pull. The data will return to the correct section. Step 10: Once you have pulled the report, adjust the formatting. You can select the top row (row 19) and change the format in one of the columns. Make Product Name bold, as it is below. Pull again. You can see that all the rows below Chai in the Product Name column are bold like the first row. If you scroll further down the report, the other sections will have the bold format as well. Step 11: The most common approach is using a formatting range. The existing report has a Formatting Range prepared in row 7. Update the ReportVariable() function in C4 to have a Formatting Range of 7:7. From this point forward, when the data is pulled, the formatting, values, and formulas placed in the Formatting Range will be used in all the sections below. Step 12: Now, add the filters. In this Data Portal and report there are two filter options, Min Qty In Stock and Product Name. Open the Function Wizard again on cell C4 and enter Param( I14, I15 ) into the Parameter argument. This configures Interject to look for the filters in cells I14 and I15. The order of cell references appearing in the Param() function must coincide with the order that was originally setup for the Data Portal. Final Touches Once you have finished all steps above, check the report by re-pulling. The data should be presented as shown below. Once the panes are frozen using Interject's Freeze Panes, the final result should look similar to the image below. ReportGrouping() Step 1: The ReportGrouping() function will collapse or expand all the groups after an Interject event. In this case, we will set up ReportGrouping to collapse the groups after a pulling the data (Pull-Run event). Click cell C5 and enter =ReportGrouping() and then click the Function Wizard button. Step 2: Enter \"Pull\" for OnPullSaveOrBoth, \"Run\" for OnClearRunOrBoth, \"Row\" for RowOrColumnGroup, and \"Collapse\" for GroupLevel. This will collapse all row groups on a Pull-Run event. Step 3: Pull the data. Notice all the groups are collapsed. Finally, clear the report, refreeze the panes, and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Create: Working with Pivot Tables","url":"/wGetStarted/L-Create-PivotTable.html","content":" Overview Pivot tables are a flexible and valuable tool for analyzing data in Excel. Interject makes it easier to scale and distribute pivot tables. In this walkthrough you will set up a pivot table based on an Interject report. There are a couple advantages to combining Interject with pivot tables. It provides the ability to build security into pivot table reports, users only see data relative to their credentials. Also, by allowing filters that are used at the database level, the amount of data in a user's pivot table is limited to data that is needed only for the analysis. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 6 Special Features > Lab 6.1 Working with Pivot Tables. Building the Support Tab Step 1: In this exercise, you will use the Customer Collections Demo from a previous walkthrough. This demo can be found in the Report Library under the Interject Demo folder as shown below. Step 2: When you open the report it will look like the screenshot below. Select the CustomerAccountDetail tab. Step 3: To build the Pivot table, right click the CustomerAccountDetail tab and make another copy so you can complete the following steps. Step 4: In the copy sheet dialog box, select move to end to make the copy at the end of the list of tabs. Now rename the tab something that represents the data, such as TargetForPivotTable. Step 5: Once the tab is copied, you are going to insert 3 columns, separating the date column (column I) into Month, Year, and Year-Mth columns. In the Month column in cell J21, type =TEXT(I21,\"mm\"). In the Year column in K21, type =TEXT($I21,\"yyyy\"). In the Year-Mth column in L21, type =TEXT(I21,\"yyyy-mm\"). Step 6: Next, you are going to add two parameters to the report by inserting two rows below Show Unapplied Only and labeling them Begin Date: and End Date:. Step 7: Select cell C14 and copy it to C18 and C19. Step 8: Use the quick tools menu in the interject ribbon. In the dialog box select Freeze/UnFreeze Panes (current tab) and click Run and Close. Step 9: Select the report formula in cell C4, then select the function wizard. Step 10: In the parameters section of the dialog box change the Parameters field to this: Param(C14,,C16,,C18,C19). Step 11: Hide rows C15, and C17 since they will not be needed for this report but exist as possible parameters in the stored procedure. Note: The parameter section of the report should look like the following screenshot. Step 12: Now that you have entered the fields, you can use Pull Data on the report, filtering for companies with Market in their names. First type Market in the filter cell C1 and then Pull Data. Step 13: Highlight the cells B21 to M122. Important: Be sure to include row 21, the column labels on the top of the range, and include the bottom anchor row, which is one row past the last customer record. The anchor row is important since it will grow and shrink as the data is pulled and cleared. Exclude the Paid? column from the table range. Step 14: In the screenshot below, you can see there are four steps to preparing the contents of the pivot table. Select the Insert ribbon as noted below. Within the Insert ribbon, click the PivotTable menu item so the Create PivotTable window appears. Ensure the range TargetForPivotTable!$B$21:$M$122 is selected in the Select a table or range box. Click the OK button, and a new tab will be created with the new pivot table. Building the Pivot Table Step 1: From here you can pivot in any way needed. Step 2: Use the PivotTable pane on the right to place Year in the columns. Company Name and Type go to rows, Country goes in Filters. Then, choose the Amount to be summed. Your pivot table should match the screenshot below. Step 3: Rename the tab \"Pivot\" and you can customize the look by clicking Design and then expand the table previews and select a color theme. Customizing the Pivot Table Step 1: Prepare the pivot table worksheet to interact with the Interject worksheet. That way the data can be updated based on select filters, and security can be considered. You will insert the configuration rows at the top as you normally do with Interject reports, but Report Formulas is the only section being used. You will also add a Title and hide the grids. Step 2: Now set up the ReportRun() function. This will cause the target sheet to perform a Pull Data or Clear Data when Pull Data is triggered from the pivot table worksheet. Step 3: In the ReportCellToRun argument, select the TargetForPivotTable tab and select the ReportRange() formula in C4. Step 4: Type True in the RunEntireWorksheet argument. And type Pull in the OnAction argument. This will trigger the second worksheet to run only when Pull Data is performed on the current pivot table worksheet. On a second line under row 4 (insert new row if needed), you will do the same for the second ReportRun(). This time, however, type PullClear in the OnAction argument so that the pivot table clear function works correctly. Step 5: Now that the ReportRange() fields are prepared, you can add filters for the searches. Rename the title to Pivot Table For Customer Transactions as seen below. Also, add the filters Company Name, Contact Name, CustomerID, Show Unapplied Only, Begin Date, and End Date. The filters in the Pivot tab should match the filters in the TargetForPivotTable tab. Note: Remember there are 2 hidden rows that you have to match. Step 6: Navigate to cell C14 of the TargetForPivotTable tab. Ensure the type is General. Step 7: For the Company Name, type =if(Pivot!B12=\"\",\"\",Pivot!B12). This formula will make the filters equal between pages and if the Pivot worksheet filter is blank, it will be blank as well. Normally, Excel will make the result 0 if not handled with this formula. Copy cell C14 and paste it through C19 so the other filters are linked as well. Step 8: Now go back to the pivot table and make sure it is working properly. Enter the following filters to check the pull. Now you can see that the table only pulled data from transactions occurring in 1997, so the filters, ReportRun(), and pivot table are working as they should. For more ways to work with a pivot table, see the pivot table section on the customer aging walkthrough. "},{"title":"Create: Protecting Sheets","url":"/wGetStarted/L-Create-Protecting.html","content":" Overview Excel provides a way to protect sheets to prevent accidentally or deliberately changing, moving, or deleting data in a worksheet. You can mark the cells you want unlocked so that when you protect the sheet, those cells will be unlocked. Finally, Excel requires a password to protect/unprotect the sheet. Interject provides a more convenient way to protect a sheet with the Sheet Protector. The Sheet Protector eliminates the need for a password. Interject uses a default password that is internally managed by the use of Interject roles. With the appropriate role, a user does not need to know the protect password and can easily protect/unprotect the sheet. When a sheet is protected using the Sheet Protector window, it will first attempt to use the current password. If that attempt fails it will try any previous passwords that are on file. If those do not work, it will also attempt to use a blank password. Protecting the sheet still allows for pulls, drills, and many other types of Interject formulas and features. A crucial part of Interject is to still allow users to utilize the input fields built into reports. Protecting the sheet with Interject allows for user inputs to remain unlocked regardless of the user’s role. In the following example, you will protect a sheet and use the Interject pull to illustrate how protected sheets continues to function properly. In this example you use the Customer Aging report. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 6 Special Features > Lab 6.2 Protecting Sheets. Interject Sheet Protector Roles In order to use Interject's Sheet Protector feature, you must have an appropriate role, otherwise you will get an error showing you are unable: The following roles allow the use of the Sheet Protector: ClientAdmin SysAdmin Protector Unlocking Cells In order to allow certain cells to be unlocked when protecting a sheet, you must uncheck the \"Locked\" field before you protect the sheet. Doing so will allow you to edit these cells even though the sheet is protected. One way of doing this is to first select cells C17, C18, C19. Right click and select Format Cells. A new window will pop up. Select Protection and uncheck Locked then click OK. Another way to leave filter cells unprotected is to use the Allow Users to Edit Range tool in the Review ribbon in Excel. A window will appear, select New. In the title field, type Filters then in the Refers to cells field, select cells C17, C18, C19 then click Ok then Apply. Note: If the password field is left empty for the named range then anyone can use the filters for the report but they cannot change the data outside of the filter range. Protecting the Sheet and Pulling Data Interject’s Sheet Protection tool has three options, Unprotect, Protect, and Cancel. Protect has additional options, which includes choosing to protect the current sheet or the whole workbook. Unprotect will unprotect the current spreadsheet if the user has the correct role within our company. Cancel will close Interject’s Sheet Protection tool. Navigate to the Interject Ribbon and select Sheet Protector then select Protect. To verify that the filter cells are not locked, input Market into the Company Name parameter then pull the report. The speadsheet should look like this after. Now if someone were to try and alter your data, for instance, changing the CustomerID of one of your records, they cannot since they do not have your user role. Now in cell C19 input SAVEA to verify that the input filters are not protected and pull the report. Protecting Multiple Sheets First ensure the sheet is unprotected. Then setup a grouping for columns I:L by selecting the columns, then navigating to the Data Ribbon and select Group. Now, hold down the shift key and select CustomerAccountDetail to select five different sheets. With these tabs selected, navigate back to the Interject ribbon and protect the sheet. This will protect all five of the sheets but leave sheets that were not selected alone. Special Consideration for Column Groupings The Interject Sheet Protector also allows for groupings to be expanded and contracted. Note: Interject leverages the existing sheet protector in native Excel. For this reason, most of the restrictions and rights are the same. Directly after protecting a sheet, groupings are still operational. However, closing and reopening a protected sheet with groupings in it will render the groupings locked. If you select the grouping toggle then it will be protected. There are two ways to fix this. Option 1: Pulling the report will refresh the protection settings. One of the settings that are refreshed is the protection of groupings. After a pull, groupings are unlocked while the rest of the report is still locked. Option 2: The other way is to navigate to the Interject Ribbon and click on the Advanced Menu to enter the advanced menu. Select the system dropdown and click Re-enable Protecting Groupings. Now, the sheet is still protected but groupings can function as normal. "},{"title":"Create: Using Report Macro","url":"/wGetStarted/L-Create-ReportMacro.html","content":" Overview ReportMacro() is an Excel formula provided by Interject. It allows Interject to interact with publicly defined VBA functions on a report. ReportMacro is useful for specialized reports where a customized action needs to be taken. This action can be built into a VBA Macro based on the complex needs of the report. Then, ReportMacro is used to execute the custom action at the right point within the reporting process. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 6 Special Features > Lab 6.3 Using Report Macro. Setting up the Worksheet The ReportMacro formula acts in conjunction with another Interject report formula such as a ReportRange(). It is useful when a workbook requiring VBA macros must be used. ReportMacro() is an ordered formula, which means that Interject will perform executions on all report formulas placed above or to the left of the ReportMacro() formula before it is executed. Step 1: Open the Customer Aging Report. (If this report is unfamiliar, click here for a business use case review on the Customer Aging Report.) This time, we want to make sure a value is set to 200 every time the report is pulled. Step 2: To begin, unfreeze the panes. Step 3: If you see the Developer Ribbon, skip forward to the next section. However, if you do not see the Developer Ribbon select File. Step 4: Now, select Options. Step 5: Select the Customize Ribbon tab in the Main Tabs section, select the check box next to Developer, then select OK. Step 6: Select the Developer Ribbon. Using Report Macro Step 1: Select Visual Basic. Step 2: To create a new module, right click in the Projects window, place your cursor over Insert, and select Module. The example code is provided here. Public Function MyCustomFunction() Call Place_Value(ActiveSheet.Range(\"L31\")) End Function ' Clears the value in the cell then sets it to equal 200 Sub Place_Value(sTarget As Range) sTarget.ClearContents sTarget = 200 End Sub Step 3: Insert your code into the editing window, then select Debug, then compile VBAProject and exit out of the VBA window. Step 4: In cell D8, Insert the label Macro 1: and align it to the right. Step 5: In cell E8 insert =ReportMacro() and select fx. Step 6: In the parameter OnpullSaveOrBoth, input Pull. In the parameter OnClearRunOrBoth, input Both. Step 7: For the MacroNameToRun parameter, input the exact name of the public function that you created. In this case, you will use MyCustomFunction. Step 8: Pull the data. You will notice that the ReportMacro was ordered after the report range action. This is due to Interject formula event ordering. Requirements for VBA ReportMacro() requires a public function without any parameters, as it is the initial interaction point with Interject. Inside of that initial function, any function can be run, including calls to subroutines and other functions, but the initializing macro must be a public function. ReportMacro() also requires the VBA macro to be in written in a shared module as it will not work with a Workbook or Sheet module. Interject will error out the ReportMacro formula upon completion of the Interject event associated with the macro formula, however the Interject event will complete. Enabling VBA Hooks Due to heavy load on user sessions, four of the six VBA hooks that Interject uses will be deprecated. This feature should only be enabled when a VBA macro is required for custom actions in specialized reports. VBA Hooks To Be Deprecated When Used Interject_SaveComplete Upon completion of an Interject save event Interject_PullComplete Upon completion of an Interject pull event Interject_ClearPullComplete Upon completion of an Interject clear event Interject_ClearSaveComplete Upon completion of an Interject clear event on the save form VBA Hooks To Be Supported When Used Interject_WorkbookOpen_Drill When a drill opens a different workbook from the initial workbook Interject_WorkbookOpen_Library When a workbook is opened from the report library Enabling Interject VBA hooks is currently done by including a VBA Module with a public subroutine (not function) that matches the name hook above without any parameters. If the subroutine is found, it will be fired at the appropriate time, based on the type of VBA hook used. Using a VBA hook does not require a ReportMacro() formula in order to function, because the VBA hook is sent by Interject upon the completion of certain events. ' Simple Example of using a VBA hook Public Sub Interject_PullComplete() If ActiveSheet.Range(\"L31\") > 199 Then ActiveSheet.Range(\"L31\") = 150 End If End Sub "},{"title":"Create: Using the Retain Feature","url":"/wGetStarted/L-Create-RetainFeature.html","content":" Overview Interject provides a retain feature so that you can update the data in a report without deleting rows, keeping your formulas and other information intact. Typically, when using Interject to pull data into your spreadsheet, the report area will be cleared before new data is inserted. This is typically done by the deletion of rows. In some situations, you may want to avoid this clear action in order to retain some formulas or other information, since pulling could remove formulas you have on other columns related to certain data rows. This is especially true when you are budgeting or forecasting with historical numbers. The report may have history on the left and your forecasting formulas and numbers will be input on the right. Interject's retain feature is available for the ReportRange() and the ReportVariable() functions. Since Interject must still update your data, it must determine which columns act as the key values, so it can place the correct data in the correct row. By specifying these key columns in the RetainRowColumns parameter, Interject will retain any row of data where there is a value in these columns. Consequently, on a Pull-Clear action, Interject will not delete these rows but instead zero the amounts. This example shows how to use the retain feature in your reports. It uses the PL Trend report found in the Report Library under the Interject Financials folder. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 5 Advanced Features > Lab 5.5 Using the Retain Feature. Create Simple Formulas Step 1: To start, copy the columns L-N in the PLTrend tab and paste them into Column P-R. Unfreeze the sheet. Step 2: Clear out the cell range P2:R5 from the new columns so new data does not populate on the right side. This is also a good time to clear out the extra input spaces in the P20:R26 cell range. Now input 7002 into Location and 2002-05 into Month. Then Pull the report. Step 3: Now, with the blank section to the right, we will create a projection based on the previous 3 months. First, in cell Q26, input Forecasting Formulas. Then, edit the formula in P27 to be =IFERROR(EOMONTH(DATEVALUE(M23 &\"-01\"),1),\"-\"). The following month formulas are set to use this formula and will update accordingly. Project a 10% increase to every value. First select cell P29 and input the formula =L29 * 1.10. Copy cell P29 to the clipboard. Next highlight cells P29:R152. Finally, right-click on the area and copy the formulas. Without RetainedRowColumns If the account numbers were to change, the 10% increase would no longer be accurate since the data is old. Re-pull the data to update your numbers. Without using the RetainedRowColumns feature, if your formulas are on the same rows as the data detail rows, the formulas get deleted when pulling updated data. Notice after pulling, the projected increase is deleted: Note: The reason that some of the rows do not lose their formulas is because they are what are considered summary rows. A ReportVariable() also contains detail rows which are rows that get deleted on a pull or clear. With RetainedRowColumns To fix this, use the RetainedRowColumns to retain the rows and your formulas. Step 1: Start by inputting =L29 * 1.1 into cell P29 again and then copy the formula into cells P29:R152 like before. Step 2: Now, click on the cell G16, which contains the ReportVariable() formula. Now click the fx button to pull up the function wizard. Now scroll down to the RetainRowColumns. The RetainRowColumns argument expects a single string of comma delimited names of columns that will be retained after a data pull. Instead of entering the string, the jCombine() helper function is helpful as it will concatenate the column names for us. Enter jCombine((F2:G2)) in the field. This will retain all rows that have a value in the Segment1 or Segment1Name columns. Step 3: Now, if the data changes again, you need to Pull the report again. Notice that the formulas are still intact and accurate to the new data. Insert New Rows Within Every time you pull data, it will retrieve the most custom data set. Sometimes this means it has to add new rows of data that do not currently exist in the report. When a new row of data has to be added, there are two options: 1) insert the new row at the bottom of the section or 2) insert the row based on the sorting of the key values columns. The default action is to insert the new rows of data at the bottom of the section, since this helps avoid adding the new rows in-between your formulas. The following will illustrate the difference. Step 1: Highlight the row with the account 32000 and right-click on it and delete the row. Step 2: Now pull the data again to add the missing row. Notice two things: 1) the row is added at the bottom of the section (You may need to expand the row height to see it), and 2) the custom formulas are missing from the new row. Step 3: To illustrate using the InsertNewRowsWithin, first delete the row again. Click on the cell which contains the ReportVariable() formula and click the fx button to pull up the function wizard. Scroll down to the InsertNewRowsWithin parameter and enter True and click OK. Step 4: Finally, pull the data again and notice the new row is added in sorted order. "},{"title":"Create: Interject Run On Open","url":"/wGetStarted/L-Create-RunOnOpen.html","content":" Overview Some reports require default values, settings, or have summary pages that must be pulled before others in order for the report to function properly. Using the Run on Open Interject property will auto-run the first tab that appears. This can save time and helps streamline Interject processes. We will walk through Run on Open using the Customer Aging Report. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 6 Special Features > Lab 6.4 Interject Run On Open. Setting up Run on Open via Diagnostics The Diagnostics window provides an easy way to set up the run on open feature. It also provides many more ways to customize this feature. To setup the feature you need to input the correct code in the Input field and click Execute Selected Action. RunOnOpen Input Syntax Code Description T: Designates an Excel Tab (followed by the name of a tab) F: Designates a report Formula (followed by a cell reference or a named range) RunOnce Runs the designated report once and then turns off the setting Prompt Opens the Pull Data window upon file open Test= Executes the code that follows in test mode and displays results ! The exclamation symbol negates or excludes an action | The pipe symbol is used to connect two pieces of code (e.g. a tab and a cell) , The comma is used to enter multiple codes RunOnOpen Examples Codes Examples Description T:Sheet1 Will run all report formulas in the sheet \"Sheet1\" T:Sheet1|F:A5 Will run the report formula in cell A5 in Sheet \"Sheet1\" T:Sheet1|F:!A5 Will run all report formulas in the sheet \"Sheet1\" except for the formula in cell A5 F:A5 Will run the report formula in cell A5 in the active sheet F:CellName Will run the report formula in the range name \"CellName\" RunOnce,T:Sheet1 Will run all report formulas in the sheet \"Sheet1\" and then turn off the setting RunOnce,F:A5 Will run the report formula in cell A5 in the active sheet and then turn off the setting T:Sheet1,T:Sheet2|F:CellName Will run the report formulas in \"Sheet1\" and then in \"Sheet2\" and then in the range name \"CellName\" Prompt Will open the Pull Data window when the file opens Test= true Displays information in Results as if RunOnOpen was actually executed Test= F:A5 Displays information in Results as if the formula in A5 was executed as RunOnOpen RunOnOpen Example Step 1: To begin, open the Customer Collections report in the Report Library. Step 2: Click on the Advanced Menu if it is not already displayed. Step 3: Click on Diagnostics. Step 4: The RunOnOpen feature is located on the System Tools folder of the Diagnostics. Input F:C6 in the Input field and click Execute Selected Action. Step 5: Save the file and reopen it to find the report automatically runs the report formula found in cell C6. "},{"title":"Create: Special Column Definitions","url":"/wGetStarted/L-Create-SpecColDefs.html","content":" Overview Interject's Special Column Definitions are a convenient way you can customize a cell and provide additional features to your reports. There are a number of options available: Adding a cell comment Adding a hyperlink to a web address Adding a custom drop down validation to each row Adding multiple cell values stacked on a single cell These additional features are added by editing the Column Definition Row. The Column Definition Row is a row that designates, and filters, the placement of information. For example, if your report is presenting the field \"Company Name\", your Column Definition would have a cell with the value \"Company Name\". To add one of these features to the cells in a column where the report is populated you use an identifier such as AddComm for comments, hLink for hyperlinks, and Valuelist for a drop down list. This example uses the Customer Credits report, which is a version of the Customer Aging. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 5 Advanced Features > Lab 5.4 Special Column Definitions. Special Cell Value Comment A comment is often used to note more detailed information about the data in a cell. Comments are useful when the information contained within them are not required but need to be referenced when you put your mouse over the cell. In this example you will add comments to the credit limit column to note who last changed the credit. To start, unfreeze the panes. In the Company Name field in cell C21 input Market and Pull the data. The report looks like this: Select cell H2 and input CreditLimit Addcomm:LastCredit. Note: Addcomm designates the type of special column that you are using and LastCredit is the actual content in the comment. Pull the data. Place your cursor over cell H27 and review the comment that is placed in the cell. Notice that the Credit Limit column was pulled as it was before the changes but it has a comment associated with it that now details the changes made to that column. Note: Not all of the cells have been changed, and so there is no comment created for those cells. Special Cell Value Hyperlink Excel has two types of hyperlinks, the hyperlink property and the Hyperlink() spreadsheet function. This feature uses the spreadsheet function in the report so users can click to open specific web pages. In this example you will use Interject to add hyperlinks to the address column of the report that links the address to a google map search. Select cell C2 and input CompanyName hlink:MapsURL. Note: The MapsURL segment of the hlink string designates a column built in the SQL stored procedure. The hlink string only links to a whole column of data you cannot concatenate values in Excel, but can in the SQL stored procedure as long as it results in a single column. Pull the data. CompanyName is still pulled normally but instead of the normal dataset look, it will create a hyperlink formula. The Link Location goes to Google Maps and searches for the full address for that company.concatenated with the address associated with each company. This way the location data is accessible but does not overcrowd the information while the Friendly Name of the URL is the Company Name. Select cell C27 and notice that it takes you to Google Maps. Note: The addresses may not be valid as they are fabricated data from the Northwind Database. Special Cell Value Validation List Inserting data validation dropdown lists are similar to the other special column definitions. When used they create dropdown lists using comma delimited strings, with each value inside the string separated by commas. In this example you will add data validation to the account freeze column to limit possible input values. For this example, use AccountFreeze in cell K2. Select the cell, then input AccountFreeze valuelist:FreezeOptions. Pull the Data again. AccountFreeze will be shown as a blank value but upon selecting the cell, you can see that there is a drop down list with the options Yes or No. If there was a comma separated list instead of FreezeOptions , the value list would only include what is in the comma separated list. Through using this feature with Interject, you can have a different validation list for every row in your report. Even though this is not shown in this example, if you wanted to select a city name inside of a state, it is possible to have the validation list only show the cities available within the state which would have to change based on the row the data is on. Stacking Special Cell Types Excel allows users to have multiple special cell values attributed to a single cell. This is also the case when using Interject integration. You can add multiple cell value types in the column definitions of the report. For this example, use Company Name cell C2 Select the cell, then input CompanyName hlink:MapURL addcomm:AddressLong Pull the data. Hover your mouse over cell C27 and it will have a comment attributed to the cell along with the hyperlink. Click on the hyperlink in cell C27 and notice that the functionality of the hyperlink is unaltered and that the comment brought back the address that is used in the google map search. If there are any additional special column features that are not listed here or you have any questions, please contact Interject at info@gointerject.com. "},{"title":"Portal: Database Connection","url":"/wPortal/L-Database-Connection.html","content":" Overview A Data Connection can be set up to connect directly to a database using a OLEDB or a .Net Adapter connection string for MS SQL Server or using a ODBC connection string to connect to Oracle, MySQL, or others that support stored procedures. Setup for a Data Connection to a Database Step 1: Start off by navigating to https://portal.gointerject.com. Once logged in you can setup a data connection by clicking on the Data Connections icon. Step 2: In the Data Connections page select the New Connection button in the top right-hand corner. Step 3: In the Connection Type field, make sure Database is selected. Step 4: The Connection Details page will contain the following information for the new connection. Name: A unique friendly name used when connecting a Data Portal to the Data Connection Description (optional): description of what the connection string is connecting to Connection String: used by Interject to connect to the specified server & database Step 5: After adding the required information, click on the Save button to create the new data connection. The Database Data Connection is now ready to be used in a Data Portal. Testing the Connection String From Within Excel Before setting up a Data Connection to a Database, you can verify that the connection can be established within Excel. Step 1: With Excel open, go to the Interject Ribbon menu and click Advanced Menu (Skip this step if already at Advanced menu). Step 2: Click System drop-down and select Check Connection. Step 3: Paste the database connection string you will be using to configure the Data Connection into the text-box. When the connection functions it will display a message such as the one below. "},{"title":"Develop: Customer Aging","url":"/wGetStarted/L-Dev-CustomerAging.html","content":" Overview On this page, you will create a simple data pull using the Customer Aging Report. To review the business use case for this report, see Real World Walkthroughs - Customer Aging. This example begins with steps for creating the Interject data connection and data portals, followed by the steps on how to create the stored procedure. Finally, you will be directed to another page that shows how to use the data portal to create the spreadsheet report from scratch. Note: This example uses Microsoft's Northwind Database. You can download this database here or you can use this example as a guide for your own data source. Developer Note: To work through this example, locate the Customer Collections link in the Interject Report Library. Setting up the Data Connection Step 1: Navigate to https://portal.gointerject.com and log in. Set up a data connection by clicking the Data Connections icon. Step 2: On the Data Connections page, click the New Connection button. Step 3: In the Connection Type field, verify that Database is selected. Step 4: The Connection Details page needs to contain the following information for the new connection. Type NorthwindExampleDB_MyName in Connection Name, but include your own name in the suffix. Each connection name must be unique. For the connection string, type Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;. You are using Windows authentication, so username and password are not required. Replace the server name and database name to match your own that you are using for this walkthrough. Step 5: In the Description field include details about what the data connection will be used for. Step 6: Click the Save button to create the new data connection. The Database Data Connection is now ready to be used in a Data Portal. You should always test a new connection with your security context. Follow the steps in Database Connection to test your connection string. Setting up the Data Portal Step 1: To add a new data portal, return to https://portal.gointerject.com and select Data Portals from the sidebar menu. Step 2: Click New Data Portal. Step 3: Type NorthwindCustomers_MyName for the Data Portal Code. Since this field must be unique, replace \"MyName\" with your name. Select the connection that was made in the previous step. Also enter a name for the stored procedure [demo].[Northwind_Customers_Pull_MyName], which will be created later. Again, replace \"MyName\" with your name. Step 4: Click Create Data Portal to save the new data portal. Additional options display after selecting the Create Data Portal button for adding parameters. Note: If this is your first time setting up a data portal, review Data Portals, which describes the data portal parameters in more detail, including the difference between formula and system parameters. Proceed to the next step to continue. Setting up Formula Parameters Step 1: To add your first formula parameter, click Click here to add a Formula Parameter. For this parameter, enter CompanyName for Name, varchar for Type, and input for Direction to input, as shown below. Step 2: Click the More button. Step 3: As shown in the screenshot below, enter Market for Helper Default and Search is a wildcard that contains search for Comments. Click the Save icon. Note: When you set up a formula parameter, the Save icon is red until you save your changes. After your changes are saved, the Save icon turns green. Step 5: Click the Click here to add a Formula Parameter to add the second parameter. Enter ContactName for Name, varchar for Type, and input for Direction. Step 6: Click the More button. Enter Contact Name for Helper Name and Search is a wildcard that contains search for Comments. Click the Save icon. Step 7: To add the final Formula Parameter click Click here to add a Formula Parameter. Enter CustomerID for Name, varchar for Type, and input for Direction. Step 8: Click the More button. Enter Customer ID for Helper Name and The customer ID is an exact search that will be used by the drill for Comments. Click the Save icon. System Parameters System parameters are similar to formula parameters, except the system parameter values are provided by the system instead of cells that are in the spreadsheet report. There are several system parameters that aid in communication with the middle-tier service. In this case, a stored procedure is used. See Data Portals in Interject Website Portal for more information. In this example, you will use the system parameter, Interject_NTLogin, which passes the user’s Windows login. This is helpful for implementing row-level security; however, the best practice is to use SQL Server built-in functions like sysname() when available. You are also using Interject_LocalTimeZoneOffset , which provides the numeric offset in hours between the user’s profile time zone setting and universal time. The Interject_LocalTimeZoneOffset parameter is used to convert date and time values to the user’s time zone. Step 1: To add a new system parameter, click Click here to add a System Parameter button. Choose Interject_NTLogin for the name of the first parameter. Click Save. Step 2: Add a second system parameter by clicking Add a System Parameter button. Choose Interject_LocalTimeZoneOffset for the name and click Save. Creating the Stored Procedure A stored procedure or data API serves as a middle tier for an Interject report. In this example you will be using a stored procedure. Interject can retrieve one or more result sets from a stored procedure into the spreadsheet report. The Interject Website Portal allows you to create and manage Data Portals and reference stored procedures you create. Data Portals are stored locally in your Excel session when you log into Interject. When requesting data Interject creates a point-to-point connection with the intended data source. The below steps assume you are proficient with SQL Management Studio for Microsoft SQL Server and in creating stored procedures. If you need additional training in this area, please contact us at info@gointerject.com. Step 1: Create a stored procedure called [demo].[Northwind_Customers_Pull_MyName] using the following code example (replace \"MyName\" with your name): [demo].[Northwind_Customers_Pull_MyName] CREATE PROC [demo].[Northwind_Customers_Pull_MyName] @CompanyName VARCHAR(100) ,@ContactName VARCHAR(100) ,@CustomerID VARCHAR(500) = '' ,@Interject_NTLogin VARCHAR(50) ,@Interject_LocalTimeZoneOffset MONEY AS BEGIN SET NOCOUNT ON -- helps reduce conflicts with ADO DECLARE @DateCompare VARCHAR(20) = '1997-09-15' DECLARE @ErrorMessage VARCHAR(100) IF LEN(@CompanyName)>40 BEGIN SET @ErrorMessage = 'Usernotice:The company search text must not be more than 40 characters.' RAISERROR (@ErrorMessage, 18, 1) RETURN END --CREATE CTE to consolidate the invoice data into separate categories based on date ;WITH Invoice_CTE AS ( SELECT CustomerID ,SUM(InvoiceTotal) AS InvoiceTotal ,SUM([Current]) AS [Current] ,SUM([30Days]) AS [30Days] ,SUM([60Days]) AS [60Days] ,SUM([90Days]) AS [90Days] ,IsPaid FROM ( SELECT i.CustomerID ,i.InvoiceDate ,i.InvoiceTotal ,CASE WHEN DATEDIFF(dd,i.InvoiceDate,@DateCompare) < 30 THEN (i.InvoiceTotal) ELSE 0 END AS [Current] ,CASE WHEN DATEDIFF(dd,i.InvoiceDate,@DateCompare) between 30 and 59 THEN (i.InvoiceTotal) ELSE 0 END AS [30Days] ,CASE WHEN DATEDIFF(dd,i.InvoiceDate,@DateCompare) between 60 and 89 THEN (i.InvoiceTotal) ELSE 0 END AS [60Days] ,CASE WHEN DATEDIFF(dd,i.InvoiceDate,@DateCompare) > 90 THEN (i.InvoiceTotal) ELSE 0 END AS [90Days] ,IsPaid FROM [demo].[Northwind_Invoices] i WHERE IsPaid = 0 --This line selects the invoices that have not been paid ) t GROUP BY CustomerID, IsPaid ) SELECT c.[CustomerID] ,c.[CompanyName] ,c.[ContactName] ,c.[ContactTitle] ,ISNULL(c.[Address],'') AS [Address] ,c.[City] ,c.[Region] ,c.[PostalCode] ,c.[Country] ,c.[Phone] ,cte.[Current] ,cte.[30Days] ,cte.[60Days] ,cte.[90Days] ,cte.IsPaid ,ISNULL(c.PostalCode,'') + ',' + ISNULL(c.Country,'') AS TestValueList FROM [demo].[Northwind_Customers] c LEFT JOIN Invoice_CTE cte ON c.CustomerID = cte.CustomerID WHERE (@CompanyName='' OR c.CompanyName LIKE '%' + @CompanyName + '%') AND (@ContactName='' OR c.ContactName LIKE '%' + @ContactName + '%') AND (@CustomerID='' OR c.CustomerID = @CustomerID) ORDER BY c.[CompanyName] END Step 2: Stored procedures are natively supported by Interject. There are a few key areas to note in the code example that help illustrate Interject features. Parameters: The parameters included in the stored procedure are the same that were added to the Data Portal in the previous steps. On each request, Interject passes the Formula Parameters values from the spreadsheet configuration along with System Parameters to the stored procedure. Output parameters are supported which can populate values in the spreadsheet but they are not included in this example. Validation: The example code includes an example of validating the input for the @CompanyName parameter. It limits the search text to 40 characters and will raise an error if the length is beyond. The custom error shown has a prefix Usernotice:,which is a keyword that tells Interject to provide a message box with the text to the user as a response. Without this prefix, Interject will interpret the error as a generic error. Select Statements: Returning data to Interject simply uses a select statement as shown below. More than one can be returned at a time to reduce the connections needed to fully populate a complex report. You only have one select statement in this example. Step 3: It is important to test the stored procedure in the database before testing through the Interject platform. The following example code is a SQL statement that can be executed in a new query. Be sure to change the procedure name to match your own. Example Test Script Execute demo.[Northwind_Customers_Pull_MyName] @CompanyName = 'market' ,@ContactName = '' ,@CustomerID = '' ,@Interject_NTLogin = 'MaryM' ,@Interject_LocalTimeZoneOffset = -7 When executed you should see the following result set. Create the Report At this point you have a tested stored procedure that uses parameters to filter the results. An Interject Data Connection has been set up to go to your example database and you added an Interject Data Portal to use that connection. In addition, this Portal is mapped to the stored procedure that was just created. Now you are ready to build the spreadsheet report. Fortunately, the documentation to build this report has already been presented in Create: Customer Aging and you likely have already completed it. However, it is recommended to refamiliarize yourself with setting up this report again to reinforce the process. Just be sure to use your own Data Portal that you just set up for the report. The end result should look like the screenshot below. Now that this Data Pull has been completed, please continue to the next example. "},{"title":"Develop: Customer Aging Detail","url":"/wGetStarted/L-Dev-CustomerAgingDetail.html","content":" Overview In this example, you will learn to create a third report, Customer Aging Detail, that will be drilled to from the Customer Aging Report. This report shows a customer's outstanding balance by individual invoice. The Aging Detail is a more complex report than shown in the earlier example Develop: Customer Orders, because it leverages two report formulas to create a report with subtotals. You should have already seen the Customer Aging Detail report while reviewing the business use case in the Customer Aging in Real-World Walkthroughs. Verifying the Data Connection Because this report uses the same database as Develop: Customer Aging Detail, you do not need to create another data connection. The same connection can be used for this report. The connection created in the previous example was named NorthwindExampleDB_MyName and your own data connection likely had your name in the suffix. Copying and Modifying the Data Portals For this report you are going to use two data portals. The first will be the same data portal used in a previous example called NorthwindCustomers_MyName. You created your own with your name in the suffix. The below steps will create a copy of this data portal for the customer invoice detail since it saves a little time. Step 1: Navigate to the data portal, NorthwindCustomers_MyName, and click the green clone button on the top right of the page. Step 2: A new data portal named, NorthwindCustomers_MyName_copy, generates. Change this data portal name to NorthwindCustomerInvoices_MyName. Since each Data Portal Code must be unique, you should add your name to the suffix. Step 3: Change the procedure name to run [demo].[Northwind_Invoices_Pull_MyName], which you will create shortly. As in the last step, replace _MyName with your own name. Step 4: You will use the existing Formula Parameters but for this example you need to add more more. Select Click here to add a Formula Parameter. Enter IncludePaid for Name, varchar for Type, and input for direction. Click the More button. Enter Include Paid for Helper Name and enter Include Invoices that have already been paid for by the customer for Comments. Click the Save icon. Step 5: Click the trash 🗑 can icon on the far right of the Interject_LocalTimeZoneOffset to delete it. You are going to a use a different System Parameter for this data portal to illustrate a new System Parameter that has not been presented in previous examples. Step 6: Click the drop-down on the Interject_NTLogin and change it Interject_RequestContext. This System Parameter provides all request and user context that is available in a single XML string. It is best practices to use Interject_RequestContext as the only System Parameter since it reduces work over the long run. Since this parameter includes all system parameter information, the data portal configuration does not need to be changed if the stored procedure needs to reference additional context. Click Save. Creating the Stored Procedure Stored procedures or data APIs serve as a middle tier for an Interject report. In this example, you are using a stored procedure. Interject can retrieve one or more result sets from the stored procedure into the spreadsheet report. The Interject Website Portal allows you to create and manage the data portals and reference stored procedures you create. Data portals are stored locally in your Excel session when you log into Interject. When requesting data, Interject creates a point-to-point connection with the intended data source. The steps below assume you are proficient with SQL Management Studio for Microsoft SQL Server and in creating stored procedures. If you need additional training in this area, please contact us at info@gointerject.com. Step 1: Create a stored procedure called [demo].[Northwind_Invoices_Pull_MyName] using the following example code. Please use your name in the suffix of the stored procedure name. [demo].[Northwind_Invoices_Pull_MyName] CREATE PROC [demo].[Northwind_Invoices_Pull_MyName] @CompanyName VARCHAR(100) ,@ContactName NVARCHAR(100) ,@CustomerID VARCHAR(500) = '' ,@IncludePaid VARCHAR(5) = 0 ,@Interject_RequestContext NVARCHAR(MAX) AS BEGIN SET NOCOUNT ON -- helps reduce conflicts with ADO DECLARE @Interject_LoginName VARCHAR(200) DECLARE @UtcOffset DECIMAL(6,4) -- Dataset has very old dates -- To give a static date to compare to we hard coded the date. DECLARE @DateCompare VARCHAR(20) = '1997-09-15' DECLARE @ErrorMessage VARCHAR(100) IF LEN(@CompanyName)>40 BEGIN SET @ErrorMessage = 'Usernotice:The company search text must not be more than 40 characters.' RAISERROR (@ErrorMessage, 18, 1) RETURN END -- This is another SP that parses the xml in request context to get the needed system data EXEC [demo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@Interject_LoginName = @Interject_LoginName OUTPUT ,@UtcOffset = @UtcOffset OUTPUT -- @IncludePaid is default 0. -- if set to Yes, change it to 1 IF @IncludePaid = 'Yes' SET @IncludePaid = 1 ----------------------------------------------- -- REMAINDER OF DATA QUERY ----------------------------------------------- --Create CTE that sorts data by InvoiceDate's difference from the hardcoded DateCompare ;WITH Invoice_CTE AS ( SELECT [CustomerID] ,[InvoiceID] ,[InvoiceNum] ,[InvoiceTotal] ,[Current] ,[30Days] ,[60Days] ,[90Days] ,[IsPaid] FROM ( SELECT i.[CustomerID] ,i.[InvoiceID] ,i.[InvoiceNum] ,i.[InvoiceDate] ,i.[InvoiceTotal] ,CASE WHEN DATEDIFF(dd,InvoiceDate,@DateCompare) < 30 THEN (i.[InvoiceTotal]) ELSE 0 END AS [Current] ,CASE WHEN DATEDIFF(dd,InvoiceDate,@DateCompare) BETWEEN 30 AND 59 THEN (i.[InvoiceTotal]) ELSE 0 END AS [30Days] ,CASE WHEN DATEDIFF(dd,InvoiceDate,@DateCompare) BETWEEN 60 AND 89 THEN (i.[InvoiceTotal]) ELSE 0 END AS [60Days] ,CASE WHEN DATEDIFF(dd,InvoiceDate,@DateCompare) > 90 THEN (i.[InvoiceTotal]) ELSE 0 END AS [90Days] ,@IncludePaid AS IsPaid FROM [demo].[Northwind_Invoices] i ) t WHERE [IsPaid] = @IncludePaid GROUP BY [CustomerID] ,[InvoiceID] ,[InvoiceNum] ,[InvoiceTotal] ,[Current] ,[30Days] ,[60Days] ,[90Days] ,[IsPaid] ) -- Final Select statement SELECT c.[CustomerID] ,c.[CompanyName] ,c.[ContactName] ,c.[ContactTitle] ,c.[Country] ,i.[InvoiceID] ,i.[InvoiceNum] ,i.[InvoiceDate] ,i.[OrderTotal] ,i.[Freight] ,i.[InvoiceTotal] ,i.[BillName] ,i.[BillAddress] ,i.[BillCity] ,i.[BillCountry] ,i.[IsPaid] ,o.[OrderID] ,cte.[IsPaid] ,cte.[Current] ,cte.[30Days] ,cte.[60Days] ,cte.[90Days] ,p.[PaidAmount] ,n.[KeyValue] AS Note ,d.[KeyValue] AS ExpectedDate FROM [demo].[Northwind_Invoices] i LEFT JOIN [demo].[Northwind_Customers] c ON i.[CustomerID] = c.[CustomerID] LEFT JOIN Invoice_CTE cte ON cte.[InvoiceID] = i.[InvoiceID] LEFT JOIN demo.Northwind_Payments p ON i.[InvoiceID] = p.[InvoiceID] LEFT JOIN demo.Northwind_Orders o ON o.[CustomerID] = i.[CustomerID] AND o.[Freight] = i.[Freight] LEFT JOIN demo.Northwind_InvoiceExternal n ON n.[InvoiceID] = i.[InvoiceID] AND n.[KeyName] = 'NOTE' LEFT JOIN demo.Northwind_InvoiceExternal d ON d.[InvoiceID] = i.[InvoiceID] AND d.[KeyName] = 'ExpectedDate' WHERE i.IsPaid = @IncludePaid AND (@CompanyName='' OR c.[CompanyName] LIKE '%' + @CompanyName + '%') AND (@ContactName='' OR c.[ContactName] LIKE '%' + @ContactName + '%') AND (@CustomerID='' OR c.[CustomerID] = @CustomerID) ORDER BY c.[CompanyName] ,i.[InvoiceDate] ,i.[InvoiceID] END It is important to test the stored procedure in the database before testing it through the Interject platform. Using Interject_RequestContext requires the test scripts to be much longer than in the previous steps. To help with this extra text Interject will create the test code for you using the current users context. Step 2: First you must select a report formula that uses the data portal that is mapped to the stored procedure you want to test. You can quickly make a report formula and delete it since you are not creating the spreadsheet report yet. In a spreadsheet tab, in any cell, type =ReportVariable(\"NorthwindCustomerInvoices\",A42:A304,2:2,16:16,Param(H36,H37,H38,\"\")) but replace the Data Portal name with the name you created for your own example. Make sure the the cell with the ReportRange() formula is selected. Step 3: Next, click Advanced Menu in the Interject Ribbon. This button is a toggle, so if it is currently showing Simple Menu the advanced menu is already showing. Step 4: Click the System dropdown and select View SQL Test for ActiveCell. A window will pop up providing the developer with the SQL template used to create the stored procedure. Step 5: Copy and paste the template code into the development environment, SQL Server Management Studio. The full text code is shown below. Test Script Execute [demo].[Northwind_Invoices_Pull_MyName] @CompanyName = 'market' ,@ContactName = '' ,@CustomerID = '' ,@IncludePaid = '' ,@Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>16.0</ExcelVersion> <IdsVersion>2.3.0.11</IdsVersion> <FileName>Interject_CustomerDemo_v1.xlsx</FileName> <FilePath>C:\\Users\\MaryM\\AppData\\Local\\Interject\\FileCache</FilePath> <TabName>CustomerAgingDetail</TabName> <CellRange>H27</CellRange> <SourceFunction>Ranges</SourceFunction> <UtcOffset>-7</UtcOffset> <ColDefItems> <Value Row=\"2\" Column=\"1\"> <Name>CustomerId</Name> </Value> <Value Row=\"2\" Column=\"2\"> <Name>InvoiceID</Name> </Value> <Value Row=\"2\" Column=\"9\"> <Name>InvoiceNum</Name> </Value> <Value Row=\"2\" Column=\"10\"> <Name>OrderID</Name> </Value> <Value Row=\"2\" Column=\"11\"> <Name>InvoiceDate</Name> </Value> <Value Row=\"2\" Column=\"12\"> <Name>Current</Name> </Value> <Value Row=\"2\" Column=\"13\"> <Name>30Days</Name> </Value> <Value Row=\"2\" Column=\"14\"> <Name>60Days</Name> </Value> <Value Row=\"2\" Column=\"15\"> <Name>90Days</Name> </Value> <Value Row=\"2\" Column=\"18\"> <Name>ExpectedDate</Name> </Value> <Value Row=\"2\" Column=\"20\"> <Name>Note</Name> </Value> <Value Row=\"2\" Column=\"21\"> <Name>[Clear]</Name> </Value> </ColDefItems> <ResultDefItems /> <RowDefItems> <Value Row=\"46\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"53\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"60\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"67\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"74\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"81\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"88\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"95\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"102\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"109\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"116\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"123\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"130\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> <Value Row=\"137\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> <Value Row=\"144\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> <Value Row=\"151\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> </RowDefItems> <UserContext> <MachineLoginName>MaryM</MachineLoginName> <MachineName>.</MachineName> <FullName> </FullName> <UserId>UUvP4HYoeu</UserId> <ClientId>CgCfW9qi</ClientId> <LoginName>MaryM@mycompany.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>05/03/2018 5:39:48</LoginDateUtc> <UserRoles> <Role>ClientAdmin</Role> </UserRoles> </UserContext> <UserContextEncrypted>Encrypted only through interject api protocol, not direct connection</UserContextEncrypted> <XMLDataToSave></XMLDataToSave> </RequestContext>' Step 7: When this code is executed, it returns the following result set. Create the Report At this point you, have a tested a new stored procedure that uses parameters to filter the results. You set up an Interject data connection to go to your example database and you added another Interject data portal to use that connection, which is mapped to the stored procedure that you just created. So now you are ready to build the spreadsheet report using two data portals. The steps for building the spreadsheet report are in the example Customer Aging Detail. You have likely completed this in earlier training sessions. Repeat the instructions with your newly created data portals discussed in this topic. When you are done, your report should resemble the screenshot below. Creating a New Data Portal With Multiple Record Sets You just created a report that used ReportRange() to list all the customers with subtotaled regions. Then ReportVariable() was used to populate the invoices for each customer region. Two separate data portals were used and two connections were made to the database. To illustrate the multiple record set feature of Interject, you can take this one step further. You can copy the second data portal and stored procedure and modify it so that it returns both record sets. In this approach, you make only one connection to the database, which is more efficient. And this process requires one less data portal and stored procedure to create. Multiple record sets are a very efficient report approach when your data is not a simple list. In this example the feature will work as follows. On the first data request two record sets are retrieved by Interject. ReportRange() uses the customer summary list record set but both record sets temporarily remain in memory until all report formulas are completed. This allows the ReportVariable() to access the second record set for populating the details in the same report run. The following steps will help you create this change yourself. Step 1: Navigate to the data portal that you just created, similar to NorthwindCustomerInvoices_MyName, and click the green clone button on the top right of the page. Step 2: A new data portal named, NorthwindCustomerInvoices_MyName_copy, generates. Change this data portal name to NorthwindMultiRecord_MyName. You can add your name to the suffix, because each data portal code must be unique. Step 3: Change the procedure name to run [demo].[Northwind_CustomerInvoices_Pull_MyName] but use your own name as the suffice. You will create this stored procedure shortly. Everything else in the cloned data portal remains the same. Updating the Stored Procedure for 2 Record Sets Step 1: In SQL Server Management Studio, open the stored procedure used in the report that pulled the invoice detail. The stored procedure name should be similar to [demo].[Northwind_Invoices_Pull_MyName]. Step 2: Change the name of the stored procedure to [demo].[Northwind_CustomerInvoices_MyName], using your own name as the suffix. By using Create Procedure as shown below, the stored procedure will be copied to the new name when executed. Step 3: Change the Create procedure back to Alter procedure and continue with editing the new procedure. Step 4: You have to make a few changes to the stored procedure so the summary record set showing a list of customers can be provided. First add into #InvoiceDetail as shown below. It will put the invoice detail in a temporary table to be used later in the stored procedure. Step 5: After the SQL statement, add Select * from #InvoiceDetail. Then order by the CustomerID. This step returns the invoice detail as the first record set from the stored procedure. Step 6: Next you must use the detail to generate a customer summary list. The below code should be copied into the bottom of the stored procedure. This code simply creates a distinct list of all the customers include in the invoice detail and orders by the customer name. Steps 5 and 6 should look like below: Simple Select Statements -- Select all detail from the dataset created above SELECT * FROM #InvoiceDetail ORDER BY [CustomerID] -- Select unique customers to form a summary list of all of the customers. SELECT DISTINCT [CustomerID] ,[CompanyName] ,[ContactName] ,[ContactTitle] ,[Country] FROM #InvoiceDetail ORDER BY CustomerID Step 7: The changes to the stored procedure are complet. It is important to test the stored procedure in the database before testing it through the Interject platform. You can use the same test script used earlier in this topic. Your test code should look similar to the SQL below. Test Script Execute [demo].[Northwind_CustomerInvoices_Pull_MyName] @CompanyName = 'market' ,@ContactName = '' ,@CustomerID = '' ,@IncludePaid = '' ,@Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>16.0</ExcelVersion> <IdsVersion>2.3.0.11</IdsVersion> <FileName>Interject_CustomerDemo_v1.xlsx</FileName> <FilePath>C:\\Users\\Marym\\AppData\\Local\\Interject\\FileCache</FilePath> <TabName>CustomerAgingDetail</TabName> <CellRange>H27</CellRange> <SourceFunction>Ranges</SourceFunction> <UtcOffset>-7</UtcOffset> <ColDefItems> <Value Row=\"2\" Column=\"1\"> <Name>CustomerId</Name> </Value> <Value Row=\"2\" Column=\"2\"> <Name>InvoiceID</Name> </Value> <Value Row=\"2\" Column=\"9\"> <Name>InvoiceNum</Name> </Value> <Value Row=\"2\" Column=\"10\"> <Name>OrderID</Name> </Value> <Value Row=\"2\" Column=\"11\"> <Name>InvoiceDate</Name> </Value> <Value Row=\"2\" Column=\"12\"> <Name>Current</Name> </Value> <Value Row=\"2\" Column=\"13\"> <Name>30Days</Name> </Value> <Value Row=\"2\" Column=\"14\"> <Name>60Days</Name> </Value> <Value Row=\"2\" Column=\"15\"> <Name>90Days</Name> </Value> <Value Row=\"2\" Column=\"18\"> <Name>ExpectedDate</Name> </Value> <Value Row=\"2\" Column=\"20\"> <Name>Note</Name> </Value> <Value Row=\"2\" Column=\"21\"> <Name>[Clear]</Name> </Value> </ColDefItems> <ResultDefItems /> <RowDefItems> <Value Row=\"46\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"61\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"76\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"91\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>BOTTM</Name> </Value> <Value Row=\"106\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"117\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"128\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"139\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>GREAL</Name> </Value> <Value Row=\"150\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"173\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"196\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"219\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>SAVEA</Name> </Value> <Value Row=\"242\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> <Value Row=\"258\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> <Value Row=\"274\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> <Value Row=\"290\" Column=\"1\" ColumnName=\"CustomerId\"> <Name>WHITC</Name> </Value> </RowDefItems> <UserContext> <MachineLoginName>MaryM</MachineLoginName> <MachineName>.</MachineName> <FullName> </FullName> <UserId>UUvP4HYoeu</UserId> <ClientId>CgCfW9qi</ClientId> <LoginName>Mary@mycompany.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>05/03/2018 5:39:48</LoginDateUtc> <UserRoles> <Role>ClientAdmin</Role> </UserRoles> </UserContext> <UserContextEncrypted>Encrypted only through interject api protocol, not direct connection</UserContextEncrypted> <XMLDataToSave></XMLDataToSave> </RequestContext>' When this code is executed, it should return two record sets as shown below. Updating the Report for 2 Record Sets You are ready to modify the report to use your new data portal. The changes are simple since you only need to use a new function, jDataPortal(), to specify the data portal record set number for each report function. Step 1: In the Customer Aging Detail report that you just completed, change the =ReportRange() function by replacing the previous data portal with the new one. However, you will be encasing the new data portal inside a jDataPortal() function. So =ReportRange(“oldDataPortalCode”,.. becomes =ReportRange(jDataPortal(“NorthwindMultiRecord_MyName”,2),… The end result should look like the below screenshot for ReportRange(). The second parameter, DataResultNumber, indicates which record set this report function will use. Using 2 causes the ReportRange() function to grab the second record set that is a simple list of customers. Step 2: Now change the =ReportVariable() function by replacing the previous data portal with the new one. Again you must encase the new data portal inside a jDataPortal() function. So =ReportVariable(\"oldDataPortalCode\",… becomes =ReportVariable(jDataPortal(\"NorthwindMultiRecord_MyName\",1),… In this step you are using 1 so the first record set is used in this report function. The end result should look like the below screenshot for ReportVariable(). Step 3: Once the report formulas are edited, you can re-pull the data in the report and the results should be the same as when it used two data portals. Notice that (1) the customer account detail is presented as well as (2) the customer information. "},{"title":"Develop: Customer Credit Save","url":"/wGetStarted/L-Dev-CustomerCreditSave.html","content":" Overview This section will detail a full review of how the Interject save feature works. Start by using the Customer Aging example. This example will show how to design three user input fields into an existing report. The Interject platform will assist in creating a stored procedure that can be used in SQL Server to help facilitate the process. Other database engines or API methods can be used for the save process as well, but for simplicity you are focusing on SQL Server and a database stored procedure as the data source. You will be using the Customer Aging report, as you have already become familiar with its business use case. Setting up the Data Portals This report uses the same database as Develop: Customer Aging and other reports, you do not need to create another data connection. Use the same connection as in this previous example. The Data Portals for saving data are very similar to their Pull counterparts. Step 1: Navigate to the Interject Portal Website, then select Data Portals in the sidebar menu. Step 2: Click the New Data Portal button. Step 3: In the Data Portal Code field enter NorthwindCreditSave_MyName. Step 4: In the description, you will fill out a short detail saying what this data portal will be used for. In this case, it will say Simple Data Save. Step 5: In the Category field, label the type of data portal connection that this data portal will be. In this case it will be a Demo. Step 6: In the connection drop down menu you will choose the data connection NorthwindExampleDB_MyName that you have already created in the Develop: Customer Aging. Step 7: For the Command Type you will use the stored procedure option, and in Stored Procedure / Command input a name for the stored procedure you will create later. In this case you use [demo].[Northwind_Credit_Save_MyName]. Then click Create Data Portal. Setting up System Parameters System Parameters are similar to Formula Parameters, but the names are reserved for Interject. To review the System parameters and their purposes, go to the System Parameters section of the Data Portal page. In this example you are going to use Interject_ReturnError and Interject_RequestContext. Step 1: To add the first system parameter, click the Click here to add a System Parameter button. Then select Interject_RequestContext for the name and click save. Step 2: To add an additional system parameter, first click the Click here to add a System Parameter button. Then select Interject_ReturnError for the name of our second parameter. Then click Save. Creating the Report Step 1: Open the Report Library and open the Interject Customer Aging report. Step 2: Right click the worksheet tab and select Move or Copy. Step 3: Select the copy check box. Step 4: Rename the worksheet tab to CustomerCredits and the worksheet title to Customer Credits. Step 5: Unfreeze the panes. Step 6: Insert 4 rows below row 2. Then using the format painter, apply the format from row 9 and apply it to rows 3 and 5. Step 7: Delete columns G:L. Step 8: Add InvoiceTotal, CreditLimit, AccountFreeze valueList:FreezeOptions, and AccountNotes to cells G2,H2,J2, and K2 accordingly. Step 9: Change the cell type for cells G8 and H8 from General to Accounting. Step 10: Insert a column between columns H and I. Step 11: In cell I25 insert Credit Remaining and in cell I8 input the formula =H8-G8. Step 12: Add coditional formatting to cell J8 by selecting the home tab, and selecting conditional formatting, then select New Rule… Step 13: Select the rule type Format only cells that contain and select Specific Text, containing, yes. Step 14: Apply a red fill color by selecting the fill tab, then selecting the dark red color. Step 15: Add a white text color through selecting font, then inside the color dropdown select the white color. Step 16: In cell L2 input [Clear] and in cell L6 input MessageToUser. Step 17: Apply the formatting range to the report range formula in cell C10 by selecting the fx button and inputting 8:8 into the FormatRange argument. Step 18: In cell H11 begin writing the report save formula by inserting =ReportSave(). Step 19: Select the fx button and for the Data Portal insert the Save Data Portal that you created earlier in this example. Step 20: Select the range B26:B27 for the RowDefSave argument, and select the range 4:4 for the ColumnDefinitions, and finally, the range 6:6 for the ResultsRange argument. Step 21: Insert CustomerID into cell B4, CreditLimit into cell H4, AccountFreeze into cell J4 and AccountNotes into cell K4. Step 22: Refreeze the panes. Pull the report and it will look like this. Now it is ready for you to create a save stored procedure in the next section. Creating the Stored Procedure Step 1: First, select the Pull button and pull the data into the spreadsheet. Step 2: In the Excel sheet, click the cell with the ReportSave formula. Then display the Advanced Menu in the Interject: If Simple Menu is displayed, click it to view the Advanced Menu. Step 3: Then, click the System dropdown and select View SQL Template for ActiveCell. Make sure you have the ReportSave cell selected. A window will pop up providing the developer with the SQL template used to create the stored procedure. Copy and paste the template code into the MSSQL Server from your Excel sheet. This template is a helpful starting point that includes the Data Portal parameters and pre-formatted test code, but more work is needed to construct the required data save. Here is an example test code to compare with, but yours will be different. Do not copy this code and use it for your report as it will not work. [demo].[Northwind_Credit_Save_MyName] CREATE PROC [demo].[Northwind_Credit_Save_MyName] -- System Params not in formula @Interject_RequestContext nvarchar(max) ,@Interject_ReturnError varchar(2000) OUTPUT ,@TestMode bit = 0 -- used only for testing the stored procedure directly. It will show more results when set to 1. AS /* ================================================================================== Test Code Example Declare @Interject_ReturnError varchar(2000) Execute [demo].[Northwind_Credit_Save] @Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>16.0</ExcelVersion> <IdsVersion>2.3.22.0</IdsVersion> <FileName>Interject_CustomerDemo_v1.4.xlsx</FileName> <FilePath></FilePath> <TabName>CustomerCredits</TabName> <CellRange>H11</CellRange> <SourceFunction>Save</SourceFunction> <UtcOffset>-7</UtcOffset> <ColDefItems> <Value Row=\"4\" Column=\"2\"> <Name>CustomerID</Name> </Value> <Value Row=\"4\" Column=\"8\"> <Name>CreditLimit</Name> </Value> <Value Row=\"4\" Column=\"10\"> <Name>AccountFreeze</Name> </Value> <Value Row=\"4\" Column=\"11\"> <Name>AccountNotes</Name> </Value> </ColDefItems> <ResultDefItems> <Value Row=\"6\" Column=\"12\"> <Name>MessageToUser</Name> </Value> </ResultDefItems> <RowDefItems> <Value Row=\"27\" Column=\"2\" ColumnName=\"CustomerID\"> <Name>BOTTM</Name> </Value> </RowDefItems> <UserContext> <MachineLoginName></MachineLoginName> <MachineName></MachineName> <FullName></FullName> <UserId>UFR62JQWx4</UserId> <ClientId>CgCfW9qi</ClientId> <LoginName></LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc></LoginDateUtc> <UserRoles> <Role></Role> </UserRoles> </UserContext> <UserContextEncrypted>Encrypted only through interject api protocol, not direct connection</UserContextEncrypted> <XMLDataToSave> <c Column=\"Row\" OrigValue=\"Row\" /> <c Column=\"CustomerID\" OrigValue=\"CustomerID\" /> <c Column=\"CreditLimit\" OrigValue=\"CreditLimit\" /> <c Column=\"AccountFreeze\" OrigValue=\"AccountFreeze\" /> <c Column=\"AccountNotes\" OrigValue=\"AccountNotes\" /> <r> <Row>27</Row> <CustomerID>BOTTM</CustomerID> <CreditLimit>50000</CreditLimit> <AccountFreeze>Yes</AccountFreeze> <AccountNotes>Customer has exceeded credit limit</AccountNotes> </r> </XMLDataToSave> </RequestContext>' ,@Interject_ReturnError = @Interject_ReturnError output Select @Interject_ReturnError as '@Interject_ReturnError' ================================================================================== */ After getting the template, it is important to modify the procedure for what is needed. For example, the parameters are automatically set to max, so an easy change would be to set them to more realistic character lengths. [demo].[Northwind_Credit_Save_MyName] ALTER PROC [demo].[Northwind_Credit_Save_MyName] @Interject_RequestContext nvarchar(max) ,@Interject_ReturnError varchar(2000) OUTPUT ,@TestMode bit = 0 AS -- -- Use helper to extract data from Interject_RequestContext. Remove items that are not needed -- The helper stored procedure [dbo].[RequestContext_Parse] is required for this section to function -- DECLARE @Interject_XMLDataToSave XML DECLARE @Interject_NTLogin VARCHAR(50) EXEC [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@Interject_XMLDataToSave = @Interject_XMLDataToSave OUTPUT ,@MachineLoginName = @Interject_NTLogin OUTPUT IF @TestMode = 1 BEGIN SELECT @Interject_XMLDataToSave AS '@Interject_XMLDataToSave' ,@Interject_NTLogin AS '@Interject_NTLogin' END DECLARE @ErrorMessageToUser AS VARCHAR(1000) = '' DECLARE @NowUTC AS DATETIME = GETUTCDATE() -- -- PROCESS THE XML DATA INTO TABLE VARIABLE -- DECLARE @DataToProcess TABLE ( [_ExcelRow] INT ,[_MessageToUser] VARCHAR(500) DEFAULT('') ,[CustomerID] VARCHAR(max) ,[CreditLimit] VARCHAR(max) ,[AccountFreeze] VARCHAR(max) ,[_FreezeBit] BIT DEFAULT(0) ,[AccountNotes] VARCHAR(max) ) IF DATALENGTH(@Interject_XMLDataToSave) > 0 BEGIN declare @DataToProcessXML as XML -- Handle conversion of XML text into an XML variable. BEGIN TRY SET @DataToProcessXML = CAST(@Interject_XMLDataToSave as XML) END TRY BEGIN CATCH SET @ErrorMessageToUser = 'Error in Parsing XML from Interject. Error: ' + ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH -- Insert the XML into the table variable for further processing INSERT into @DataToProcess( [_ExcelRow] ,[CustomerID] ,[CreditLimit] ,[AccountFreeze] ,[AccountNotes] ) SELECT T.c.value('./Row[1]', 'INT') as [_ExcelRow] ,T.c.value('./CustomerID[1]', 'VARCHAR(max)') as [CustomerID] ,T.c.value('./CreditLimit[1]', 'VARCHAR(max)') as [CreditLimit] ,T.c.value('./AccountFreeze[1]', 'VARCHAR(max)') as [AccountFreeze] ,T.c.value('./AccountNotes[1]', 'VARCHAR(max)') as [AccountNotes] FROM @DataToProcessXML.nodes('/XMLDataToSave/r') T(c) END -- TestMode is provided so a test save can be executed and all related data can be -- easily viewed for testing while not effecting any data in the database IF @TestMode =1 BEGIN SELECT '@DataToProcess - After XML Processing' as ResultName SELECT * FROM @DataToProcess END -- -- VALIDATION SECTION - Ensure inputs received from Excel are valid -- -- Validate that the details do not have duplicates on the primary key UPDATE m SET [_MessageToUser] = [_MessageToUser] + ', Duplicate key' FROM @DataToProcess m INNER JOIN ( SELECT [CustomerID] FROM @DataToProcess WHERE [CustomerID] <> '' GROUP BY [CustomerID] HAVING COUNT(1) > 1 ) as t ON m.[CustomerID] = t.[CustomerID] -- Validate a column has valid text UPDATE @DataToProcess SET [_MessageToUser] = [_MessageToUser] + ', Account Freeze must be either Yes or left blank' WHERE [AccountFreeze] NOT IN ('Yes','') UPDATE @DataToProcess SET [_MessageToUser] = [_MessageToUser] + ', Account Notes must be 140 characters or less' FROM @DataToProcess WHERE LEN([AccountNotes]) >= 140 -- Now check if there were any validation issues in the detail and stop processing if true IF EXISTS(SELECT 1 FROM @DataToProcess WHERE [_MessageToUser] <> '') BEGIN SET @ErrorMessageToUser = 'There were errors in the details of your input. Please review the errors noted in each row.' GOTO FinalResponseToUser END IF @TestMode = 1 BEGIN SELECT '@DataToProcess - After Validation' as ResultName SELECT * FROM @DataToProcess END -- convert the 'yes' input into a bit for table storage UPDATE @DataToProcess SET [_FreezeBit] = 1 WHERE [AccountFreeze] = 'Yes' UPDATE @DataToProcess SET CreditLimit = 0 WHERE CreditLimit IS NULL -- -- DATA UPDATE -- BEGIN TRY -- this table variable will log the changes to the target table so it can be used -- to return helpful feedback to the user about how the save action resulted DECLARE @ChangeLog as TABLE ( [_ExcelRow] INT -- will capture the source row that affected the target table ,[UpdateTypeCode] VARCHAR(10) -- Will show UPDATE, INSERT, or DELETE ,[TargetTableKey] VARCHAR(5) ) BEGIN TRAN t1 -- -- use MERGE statement that UPDATES, INSERTS, and DELETES in one action -- MERGE [demo].[Northwind_AccountCredits] t -- t = the target table or view to update USING @DataToProcess s -- s = the source data to be used to update the target table ON s.[CustomerID] = t.[CustomerID] WHEN MATCHED -- Handles the update based on INNER JOIN AND ( t.[CustomerID] <> s.[CustomerID] OR t.[CreditLimit] <> s.[CreditLimit] OR t.[AccountFreeze] <> s.[_FreezeBit] OR t.[AccountNotes] <> s.[AccountNotes] ) THEN UPDATE SET t.[CustomerID] = s.[CustomerID] ,t.[CreditLimit] = s.[CreditLimit] ,t.[AccountFreeze] = s.[_FreezeBit] ,t.[AccountNotes] = s.[AccountNotes] ,t.[LastChangedBy] = @Interject_NTLogin ,t.[LastChangedDate] = @NowUTC WHEN NOT MATCHED BY TARGET THEN -- Handles the insert based on LEFT JOIN INSERT ( [CustomerID] ,[CreditLimit] ,[AccountFreeze] ,[AccountNotes] ,[LastChangedBy] ,[LastChangedDate] ) VALUES ( s.[CustomerID] ,s.[CreditLimit] ,s.[_FreezeBit] ,s.[AccountNotes] ,@Interject_NTLogin ,@NowUTC ) -- the output captures the changes to the table and logs to a table variable OUTPUT isnull(inserted.[CustomerID],deleted.[CustomerID]) -- include deleted in case delete is added later. Inserted is used for both Update an Insert ,s.[_ExcelRow] ,$action as UpdateTypeCode -- this logs into an a change log table variable INTO @ChangeLog ( [TargetTableKey] ,[_ExcelRow] ,[UpdateTypeCode] ); --now we have enough information to update the message to user for each row UPDATE dtp SET [_MessageToUser] = CASE cl.UpdateTypeCode WHEN 'INSERT' THEN ', Added!' -- not used in this example WHEN 'UPDATE' THEN ', Updated!' END FROM @DataToProcess dtp INNER JOIN @ChangeLog cl ON dtp.[_ExcelRow] = cl.[_ExcelRow] IF @TestMode = 1 BEGIN SELECT '@ChangeLog- Show log of changes made' as ResultName select * from @ChangeLog ROLLBACK TRAN t1 -- note this does not roll back changes to table variables, only real tables SELECT 'Changes rolled back since in TEST mode!' as TestModeNote END ELSE BEGIN COMMIT TRAN t1 END END TRY BEGIN CATCH IF @@TRANCOUNT > 0 ROLLBACK TRAN t1 SET @ErrorMessageToUser = ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH FinalResponseToUser: -- -- PROVIDE RESPONSE TO THE SAVE ACTION -- -- if test mode, show the final table IF @TestMode = 1 BEGIN SELECT '@DataToProcess - After Validation' as ResultName SELECT * FROM @DataToProcess END -- return the recordset results back to the spreadsheet, if needed. SELECT [_ExcelRow] as [Row] -- this relates to the original row of the spreadsheet the data came from ,SUBSTRING([_MessageToUser],3,1000) as [MessageToUser] -- This is a field that, if it matches a column in the Results Range, will be placed in that column for the specified row FROM @DataToProcess -- if there is an error, raise error and Interject will catch and present to the user. -- Note that this is specifically done after the above resultset is returned, since initiating an error before -- will not allow a result set to be returned to provide feedback on each row IF @ErrorMessageToUser <> '' BEGIN -- by adding 'UserNotice:' as a prefix to the message, Interject will not consider it a unhandled error -- and will present the error to the user in a message box. SET @ErrorMessageToUser = 'UserNotice:' + @ErrorMessageToUser RAISERROR (@ErrorMessageToUser, 18, -- Severity, 1) -- State) RETURN END Testing the Stored Procedure For quick testing, click on the View SQL Test and copy the test code to the development area. For more information, go to the common troubleshooting page. Now that you have modified the stored procedure, go back to Excel and see if the data gets correctly saved. After the save, there will be a return message stating what was changed based on the row. "},{"title":"Develop: Customer Orders","url":"/wGetStarted/L-Dev-CustomerOrders.html","content":" Overview In this example, you will create a second report, Customer Orders, that can be drilled to from the Customer Aging Report you built in the last example. (To learn how to set up a drill, see Drilling Between Reports.) Verifying the Data Connection Because this report uses the same database as the previous example, you do not need to create another data connection. The same connection can be used for this report. The connection created there was named NorthwindExampleDB_MyName (\"MyName\" is replaced with your name). Copy the Data Portal Step 1: Navigate to the data portal you set up in the previous report on the Portal Site. Click the green Clone button on the top right corner of the page. Step 2: A new data portal named, NorthwindCustomers_MyName_copy, generates. Change this data portal name to NorthwindOrders_MyName. Since each Data Portal must have a unique code, please use your name instead of \"MyName\". Then click Save Changes. Step 3: Change the procedure name to [Demo].[Northwind_CustomerOrders_Pull_MyName] (again sub \"MyName\" with your name). You will set up this procedure next. Then click Save Changes. Creating the Stored Procedure A stored procedure or data API serves as a middle tier for an Interject report. In this example you will be using a stored procedure. Interject can retrieve one or more result sets from a stored procedure into the spreadsheet report. The Interject Website Portal allows you to create and manage Data Portals and reference stored procedures you create. Data Portals are stored locally in your Excel session when you log into Interject. When requesting data Interject creates a point-to-point connection with the intended data source. The below steps assume you are proficient with SQL Management Studio for Microsoft SQL Server and in creating stored procedures. If you need additional training in this area, please contact us at info@gointerject.com. Step 1: Create a stored procedure called [demo].[Northwind_CustomerOrders_Pull_MyName] using the following code example (replace \"MyName\" with your name): [demo].[Northwind_CustomerOrders_Pull_MyName] CREATE PROC [demo].[Northwind_CustomerOrders_Pull_MyName] @CompanyName VARCHAR(100) ,@ContactName VARCHAR(100) ,@CustomerID VARCHAR(500) = '' ,@Interject_NTLogin VARCHAR(10) ,@Interject_LocalTimeZoneOffset MONEY AS BEGIN SET NOCOUNT ON -- helps reduce conflicts with ADO DECLARE @ErrorMessage VARCHAR(100) IF LEN(@CompanyName)>40 BEGIN SET @ErrorMessage = 'Usernotice:The company search text must not be more than 40 characters.' RAISERROR (@ErrorMessage, 18, 1) RETURN END SELECT c.[CustomerID] ,c.[CompanyName] ,c.[ContactName] ,c.[Country] ,o.[OrderID] ,o.[OrderDate] ,o.[ShipCity] ,o.[ShipCountry] ,s.[CompanyName] AS ShipVia ,o.[ShippedDate] ,SUM(d.[UnitPrice] * cast(d.[Quantity] AS MONEY) * (cast(1 AS MONEY) -d.[Discount])) AS OrderAmount ,o.[Freight] ,SUM(d.[UnitPrice] * cast(d.[Quantity] AS MONEY) * (cast(1 AS MONEY) -d.[Discount])) + o.[Freight] AS TotalAmount FROM [demo].[Northwind_Orders] o INNER JOIN [demo].[Northwind_Customers] c ON o.[CustomerID] = c.[CustomerID] INNER JOIN [demo].[Northwind_Shippers] s ON o.[ShipVia] = s.[ShipperID] INNER JOIN [demo].[Northwind_Order Details] d ON o.[OrderID] = d.[OrderID] WHERE (@CompanyName='' OR c.CompanyName LIKE '%' + @CompanyName + '%') and (@ContactName='' OR c.ContactName LIKE '%' + @ContactName + '%') and (@CustomerID='' OR c.[CustomerID] = @CustomerID) GROUP BY c.[CustomerID] ,c.[CompanyName] ,c.[ContactName] ,c.[Country] ,o.[OrderID] ,o.[OrderDate] ,o.[ShipName] ,o.[ShipCity] ,o.[ShipCountry] ,s.[CompanyName] ,o.[ShippedDate] ,o.[Freight] ORDER BY c.[CompanyName], o.[OrderID] DESC END Step 2: Stored procedures are natively supported by Interject. There are a few key areas to note in the code example that help illustrate Interject features. Parameters: The parameters included in the stored procedure are the same that were added to the Data Portal in the previous steps. On each request, Interject passes the Formula Parameters values from the spreadsheet configuration along with System Parameters to the stored procedure. Output parameters are supported which can populate values in the spreadsheet but they are not included in this example. Validation: The example code includes an example of validating the input for the @CompanyName parameter. It limits the search text to 40 characters and will raise an error if the length is beyond. The custom error shown has a prefix Usernotice:,which is a keyword that tells Interject to provide a message box with the text to the user as a response. Without this prefix, Interject will interpret the error as a generic error. Select Statements: Returning data to Interject simply uses a select statement as shown below. More than one can be returned at a time to reduce the connections needed to fully populate a complex report. You only have one select statement in this example. Step 3: It is important to test the stored procedure in the database before testing through the Interject platform. The following example code is an SQL statement that can be executed in a new query. Be sure to change the procedure name to match your own. Example Test Script Execute [demo].[Northwind_CustomerOrders_Pull_MyName] @CompanyName = 'market' ,@ContactName = '' ,@CustomerID = '' ,@Interject_NTLogin = 'MaryM' ,@Interject_LocalTimeZoneOffset = -7 When executed you should see the following result set. Create the Report At this point you have a tested stored procedure that uses parameters to filter the results. An Interject Data Connection has been set up to go to your example database and you added an Interject Data Portal to use that connection. In addition, this Portal is mapped to the stored procedure that was just created. Now you are ready to build the spreadsheet report. Fortunately, the documentation to build this report has already been presented in Create: Customer Orders Report and you likely have already completed it. However, it is recommended to refamiliarize yourself with setting up this report again to reinforce the process. Just be sure to use your own Data Portal that you just set up for the report. The end result should look like the screenshot below. "},{"title":"Develop: Editing Data Save","url":"/wDeveloper/L-Dev-EditingDataSave.html","content":" Overview In this example you will build from the previous report where you built a Data Pull. Here, you will walkthrough the steps in order to Save Data using the Interject function ReportSave. This function makes it convenient to modify the data source right inside of your Excel report without having to edit the data source directly. In this Editing Data Save example, you will set up a data save that will allow you to edit a customer's contact name and title right from within the Excel report. Note: The Customer Aging Report used in this example is a report that displays a customer's outstanding balances. It is not normally used to edit a customer directly. However, for this walkthrough demonstration purpose, you will modify the report in order to do so. This walkthrough involves 6 main steps: Set up a Data Connection (completed already) Set up a Data Portal Setting up the report to handle the save Set up the ReportSave function Set up the Stored Procedures (SP) to handle the save Test the Stored Procedure & ReportSave Note: This example uses Microsoft's Northwind Database. You can download this database here or you can use this example as a guide for your own data source. Setting up the Data Connection For the Data Connection for this example, you will use the connection previously set up here. Setting up the Data Portal Step 1: Navigate to https://portal.gointerject.com and log in. Click on Data Portals on the left side bar and then the NEW DATA PORTAL button. Step 2: Enter the following details on setting up the new data portal and click \"CREATE DATA PORTAL\". Data Portal Code: NorthwindEditingData_Save Description: Data portal for editing data save Category: Demo Connection: NorthwindExampleDB_MyName (replace \"MyName\" with your name) Command Type: Stored Procedure Stored Procedure/Command: NorthwindEditingDataSaveSP Note: You will create the \"NorthwindEditingDataSaveSP\" Stored Procedure later. Step 3: After creating the data portal, scroll down and click Click here to add a System Parameter and ensure the Interject_RequestContext parameter is set. The System Parameter Interject_RequestContext will transfer contextual data to the Stored Procedure you will set up later. In this example you will not need this info but it is a good practice to set this parameter for all your Stored Procedures. Setting up the Report Begin by opening up the report that was completed in the Data Pull. You will modify this report to set up the ReportSave. Step 1: Ensure Market is entered as a Company Name filter and pull the data: Step 2: Unfreeze the panes (if they are frozen): Step 3: Highlight the first two rows, right click within the selection and click Copy: Step 4: Right click row 3 and click Insert Copied Cells: Step 5: Copy & paste the same 2 rows again this time by right clicking row 5 and Insert Copied Cells: Step 6: Set up the configuration section: Enter [clear] in the last column (This will clear the messages when pulling) Clear all values in row 4 except the CustomerID, ContactName and ContactTitle (These are the column names that will be used to save to the data source) Enter MessageToUser in the last column on row 6 (The save will return a message in this column if necessary) Add a row below the row containing the ReportRange function (You will add the ReportSave function on this new row) Setting up the ReportSave Function The only thing left to set up in this report is the actual ReportSave function. Step 1: Click on the cell below the \"ReportRange\" function and enter =ReportSave() and click the fx button to bring up the Function Wizard: Step 2: Enter the following details in the Function Wizard: DataPortal: Enter the Data Portal you set up in the beginning. RowDefRange: This range defines the unique keys in the data source for each row. In this case it is the CustomerID. Enter the single column range for the CustomerIDs and be sure to select one row beyond the last ID (to allow expansion). ColDefRange: Enter 4:4. This range contains the columns that will be saved. ResultsRange: Enter 6:6. This range represents the return message to the user. Everything is now ready for the ReportSave. You can further customize your report with styling and colors if you like: Setting up the Stored Procedure Now that the ReportSave function is completed, Interject can use it to generate an example Stored Procedure for your save. Step 1: First click on the cell that contains the ReportSave. Ensure the Advanced Menu is displayed. Click on System and then View SQL Template For ActiveCell: Step 2: Highlight the SQL code in the new window and copy the contents to the clipboard: Step 3: Open up the database you want to use and paste the copied SQL code into a new query: Add the RequestContext_Parse Stored Procedure The template that is created by Interject references a Stored Procedure called \"RequestContext_Parse\". This SP will process the XML data that is passed to your SP via the \"Interject_RequestContext\" parameter. After processing this data, you will have SP variables you can use within your SP (e.g. \"@Interject_UserID\", \"@Interject_LoginDateUTC\"). In order for the Data save Stored Procedure to work, you need to create the \"RequestContext_Parse\" Stored Procedure. In your database, open up a new query and execute the following code: RequestContext_Parse /****** Object: StoredProcedure [dbo].[RequestContext_Parse] Script Date: 12/20/2022 11:23:26 AM ******/ SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO CREATE proc [dbo].[RequestContext_Parse] @Interject_RequestContext nvarchar(max) ,@ExcelVersion nvarchar(100) = '' output ,@IdsVersion nvarchar(100) = '' output ,@FileName nvarchar(1000) = '' output ,@FilePath nvarchar(1000) = '' output ,@TabName nvarchar(1000) = '' output ,@CellRange nvarchar(100) = '' output ,@SourceFunction nvarchar(100) = '' output ,@UtcOffset decimal(6,4) = 0 output ,@ColDefItemsDelimited xml = '' output ,@ResultDefItemsDelimited xml = '' output ,@RowDefItemsDelimited xml = '' output ,@MachineLoginName nvarchar(100) = '' output ,@MachineName nvarchar(100) = '' output ,@Interject_UserID nvarchar(100) = '' output ,@Interject_ClientID nvarchar(100) = '' output ,@Interject_LoginName nvarchar(100) = '' output ,@Interject_LoginAuthTypeID int = 0 output ,@Interject_LoginDateUTC datetime = null output ,@Interject_UserRolesDelimited nvarchar(max) = '' output ,@UserContextEncrypted nvarchar(4000) = '' output ,@Interject_XMLDataToSave xml = null output as /* This SP is a helper to pull all data from the RequestContext that is passed from Interject. Below are examples to pull all the data or just a couple values that you need (which is much less typing) declare @Interject_RequestContext nvarchar(max) ,@ExcelVersion nvarchar(100) ,@IdsVersion nvarchar(100) ,@FileName nvarchar(1000) ,@FilePath nvarchar(1000) ,@TabName nvarchar(1000) ,@CellRange nvarchar(100) ,@SourceFunction nvarchar(100) ,@UtcOffset decimal(6,4) ,@ColDefItemsDelimited xml ,@ResultDefItemsDelimited xml ,@RowDefItemsDelimited xml ,@MachineLoginName nvarchar(100) ,@MachineName nvarchar(100) ,@Interject_UserID nvarchar(100) ,@Interject_ClientID nvarchar(100) ,@Interject_LoginName nvarchar(100) ,@Interject_LoginAuthTypeID int ,@Interject_LoginDateUTC datetime ,@Interject_UserRolesDelimited nvarchar(max) ,@UserContextEncrypted nvarchar(4000) ,@Interject_XMLDataToSave xml set @Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>14.0</ExcelVersion> <IdsVersion>2.2.5.13</IdsVersion> <FileName>Interject_TestFile (version 1).xlsb</FileName> <FilePath>C:\\Users\\jeffh-high\\AppData\\Roaming\\Microsoft\\Excel</FilePath> <TabName>DB_ReportRangeShort</TabName> <CellRange>C6</CellRange> <SourceFunction>Range</SourceFunction> <UtcOffset>7</UtcOffset> <ColDefItems> <Value>customerid</Value> <Value>companyname</Value> <Value>contactname</Value> <Value>contacttitle</Value> <Value>address</Value> <Value>city</Value> <Value>region</Value> <Value>phone</Value> <Value>fax</Value> </ColDefItems> <ResultDefItems> <Value>customerid</Value> <Value>companyname</Value> </ResultDefItems> <RowDefItems> <Value Row=\"1\">customerid</Value> <Value Row=\"2\">companyname</Value> </RowDefItems> <UserContext> <MachineLoginName>jeffh-high</MachineLoginName> <MachineName>IJECT-VMWARE7</MachineName> <UserId>UoSnjxR2bD</UserId> <ClientId>CKuWBCtT</ClientId> <LoginName>jeffh@gointerject.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>06/16/2014 11:04:08</LoginDateUtc> <UserRoles> <Role>SysAdmin</Role> <Role>SchedulerAdmin</Role> <Role>CustomItems</Role> </UserRoles> </UserContext> <UserContextEncrypted>KAJeycwLWiy0t4Xe4GxPiI0sskc=</UserContextEncrypted> <XMLDataToSave> <c Column=\"Row\" OrigValue=\"Row\" /> <c Column=\"Start\" OrigValue=\"Start\" /> <c Column=\"CodeInputs\" OrigValue=\"CodeInputs\" /> <c Column=\"Description\" OrigValue=\"Description\" /> <c Column=\"End\" OrigValue=\"End\" /> <c Column=\"Duration\" OrigValue=\"Duration\" /> <c Column=\"Client\" OrigValue=\"Client\" /> <c Column=\"Code1\" OrigValue=\"Code1\" /> <c Column=\"Code2\" OrigValue=\"Code2\" /> <c Column=\"Code3\" OrigValue=\"Code3\" /> <c Column=\"Code4\" OrigValue=\"Code4\" /> <c Column=\"ChargeCategory\" OrigValue=\"ChargeCategory\" /> <r> <Row>18</Row> <Start>0.291666666666667</Start> <CodeInputs>.ids.dev..</CodeInputs> <Description>upgrade timelook</Description> <End /> <Duration>15.4</Duration> <Client>ids</Client> <Code1>dev</Code1> <Code2 /> <Code3 /> <Code4 /> <ChargeCategory>NB</ChargeCategory> </r> </XMLDataToSave> </RequestContext> ' exec [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@ExcelVersion = @ExcelVersion output ,@IdsVersion = @IdsVersion output ,@FileName = @FileName output ,@FilePath = @FilePath output ,@TabName = @TabName output ,@CellRange = @CellRange output ,@SourceFunction = @SourceFunction output ,@UtcOffset = @UtcOffset output ,@ColDefItemsDelimited = @ColDefItemsDelimited output ,@ResultDefItemsDelimited = @ResultDefItemsDelimited output ,@RowDefItemsDelimited = @RowDefItemsDelimited output ,@MachineLoginName = @MachineLoginName output ,@MachineName = @MachineName output ,@Interject_UserID = @Interject_UserID output ,@Interject_ClientID = @Interject_ClientID output ,@Interject_LoginName = @Interject_LoginName output ,@Interject_LoginAuthTypeID = @Interject_LoginAuthTypeID output ,@Interject_LoginDateUTC = @Interject_LoginDateUTC output ,@Interject_UserRolesDelimited = @Interject_UserRolesDelimited output ,@UserContextEncrypted = @UserContextEncrypted output ,@Interject_XMLDataToSave = @Interject_XMLDataToSave output Select @ExcelVersion as '@ExcelVersion' ,@IdsVersion as '@IdsVersion' ,@FileName as '@FileName' ,@FilePath as '@FilePath ' ,@TabName as '@TabName' ,@CellRange as '@CellRange' ,@SourceFunction as '@SourceFunction' ,@UtcOffset as '@UtcOffset' ,@ColDefItemsDelimited as '@ColDefItemsDelimited' ,@ResultDefItemsDelimited as '@ResultDefItemsDelimited' ,@RowDefItemsDelimited as '@RowDefItemsDelimited' ,@MachineLoginName as '@MachineLoginName' ,@MachineName as '@MachineName' ,@Interject_UserID as '@Interject_UserID' ,@Interject_ClientID as '@Interject_ClientID' ,@Interject_LoginName as '@Interject_LoginName' ,@Interject_LoginAuthTypeID as '@Interject_LoginAuthTypeID' ,@Interject_LoginDateUTC as '@Interject_LoginDateUTC' ,@Interject_UserRolesDelimited as '@Interject_UserRolesDelimited' ,@UserContextEncrypted as '@UserContextEncrypted' ,@Interject_XMLDataToSave as '@Interject_XMLDataToSave' -- since all paramters are optional, you can also just ask for the values you need like below exec [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@Interject_LoginName = @Interject_LoginName output ,@Interject_UserID = @Interject_UserID output Select @Interject_UserID as '@Interject_UserID' ,@Interject_LoginName as '@Interject_LoginName' */ set nocount on declare @Interject_RequestContextXML as xml set @Interject_RequestContextXML = @Interject_RequestContext select @ExcelVersion = T.c.value('./ExcelVersion[1]', 'nvarchar(100)') ,@IdsVersion = T.c.value('./IdsVersion[1]', 'nvarchar(100)') ,@FileName = T.c.value('./FileName[1]', 'nvarchar(1000)') ,@FilePath = T.c.value('./FilePath[1]', 'nvarchar(1000)') ,@TabName = T.c.value('./TabName[1]', 'nvarchar(1000)') ,@CellRange = T.c.value('./CellRange[1]', 'nvarchar(100)') ,@SourceFunction = T.c.value('./SourceFunction[1]', 'nvarchar(100)') ,@UtcOffset = T.c.value('./UtcOffset[1]', 'decimal(6,4)') ,@MachineLoginName = T.c.value('./UserContext[1]/MachineLoginName[1]', 'nvarchar(100)') ,@MachineName = T.c.value('./UserContext[1]/MachineName[1]', 'nvarchar(100)') ,@Interject_UserID = T.c.value('./UserContext[1]/UserId[1]', 'nvarchar(100)') ,@Interject_ClientID = T.c.value('./UserContext[1]/ClientId[1]', 'nvarchar(100)') ,@Interject_LoginName = T.c.value('./UserContext[1]/LoginName[1]', 'nvarchar(100)') ,@Interject_LoginAuthTypeID = T.c.value('./UserContext[1]/LoginAuthTypeId[1]', 'int') ,@Interject_LoginDateUTC = T.c.value('./UserContext[1]/LoginDateUtc[1]', 'datetime') ,@UserContextEncrypted = T.c.value('./UserContextEncrypted[1]', 'nvarchar(100)') ,@Interject_XMLDataToSave = T.c.value('./XMLDataToSave[1]', 'nvarchar(max)') from @Interject_RequestContextXML.nodes('/RequestContext') T(c) set @Interject_XMLDataToSave = cast(@Interject_RequestContextXML.query('/RequestContext/XMLDataToSave') as nvarchar(max)) -- UserRolesDelimited Select @Interject_UserRolesDelimited = STUFF ( ( SELECT ',' + T.c.value('.', 'nvarchar(100)') from @Interject_RequestContextXML.nodes('RequestContext/UserContext[1]/UserRoles[1]/Role') T(c) ORDER BY T.c.value('.', 'nvarchar(100)') FOR XML PATH ('') ) ,1 ,1 ,'' ) -- ColDefItemsDelimited Select @ColDefItemsDelimited = STUFF ( ( SELECT ',' + T.c.value('.', 'nvarchar(500)') from @Interject_RequestContextXML.nodes('RequestContext/ColDefItems/Value') T(c) ORDER BY T.c.value('.', 'nvarchar(500)') FOR XML PATH ('') ) ,1 ,1 ,'' ) -- ResultDefItemsDelimited Select @ResultDefItemsDelimited = STUFF ( ( SELECT ',' + T.c.value('.', 'nvarchar(500)') from @Interject_RequestContextXML.nodes('RequestContext/ResultDefItems/Value') T(c) ORDER BY T.c.value('.', 'nvarchar(500)') FOR XML PATH ('') ) ,1 ,1 ,'' ) -- RowDefItemsDelimited Select @RowDefItemsDelimited = STUFF ( ( SELECT ',' + isnull(T.c.value('.', 'nvarchar(500)'),'') + isnull('|' + T.c.value('./@Row', 'nvarchar(500)'),'') from @Interject_RequestContextXML.nodes('RequestContext/RowDefItems/Value') T(c) ORDER BY T.c.value('.', 'nvarchar(500)') FOR XML PATH ('') ) ,1 ,1 ,'' ) GO Modifying the Stored Procedure The SQL auto generated template by Interject is formatted based on the ReportSave function within your report. It includes the definitions you set in that function to build the Stored Procedure. It also includes some example code. Some of this code you may choose to use depending on your purposes but other code you will not need and can delete. The following walks you through the major sections of the code with instructions on the changes. Deletions are marked with red highlight, changes are marked in yellow. Parameters There are 2 parameters in the SP. The first one, \"Interject_RequestContext\", was the System Parameter you set up previously in the Data Portal. Again, this XML contextual information will be passed by Interject to the SP upon execution. The second parameter is a \"TestMode\" bit. If you are testing, you can set the value to 1 to print out detailed information upon execution. This will also rollback any changes so your database remains unchanged during testing. Testing The next section is a commented out code used for testing. If you want to test your SP, you can simply highlight the text within and execute it. Notice at the end the ContactName and ContactTitle data are sent for each row in your report. You can change this data if you desire for testing purposes. Context Parameters This section declares and sets variables with the RequestContext_Parse SP. This SP takes in the XML data sent by Interject and parses it into variables that you can use within your SP. Error Message The ErrorMessageToUser is declared as blank to begin with. If the execution of the SP encounters any errors, it will set this variable with a message. Data To Process This section declares a table variable (\"@DataToProcess\") that will be used to store all the data that will be processed in the save. Each record includes the corresponding row in Excel (\"_ExcelRow\"), and a message (\"_MessageToUser\") that can be sent back to the user. The last two columns (\"ExampleColumnKey\" and \"ExampleColumnValue\") are just examples used to validate the data coming in. They are not used in this example so delete them. You also need to change the data types and size to match your data. Inserting the Data to Process This section will take the XML data sent by Interject from your report and put it into the \"@DataToProcess\" table. Again, you can delete the \"ExampleColumnKey\" and \"ExampleColumnValue\" columns and change the data types and size to match your data. Validations Now that you have all the data from your report into a table, you can do some validations on it before your target data source is updated. This section will run through certain validations and marks the _MessageToUser upon a check. This is example code. You can use and modify it to match your report and data or you can delete it. There are 5 parts: Validating a parameter is a certain value (not used in this example) Validating the data to save does not contain duplicate keys (change data type and size to match your data) Validating a required column is not blank (not used in this example) Validating a column has certain text (not used in this example) If any validation checks recorded a message, this SP will GOTO the end and not update any records (it will show the user the message on the corresponding row) ChangeLog You can delete the \"CREATE TABLE #ExampleTableToUpdate\" part, it is not used in this example. Next, another table variable is declared. The \"@ChangeLog\" table will be filled with information regarding the changes to the data, such as the row in the Excel report, the type of change that was done, and the corresponding key. Merge This section is where the data from your report (located in the \"@DataToProcess\" table), is merged with the target table in your database. It first declares a transaction. This is so the following changes can either be committed if no errors or rolled back if there is an error. Next it merges by joining the tables on your key and updating the desired columns when there is a change detected. Finally, it outputs the change information to the \"@ChangeLog\" table. Set Message To User This section sets the message that will be displayed to the user by comparing the action values in the \"@ChangeLog\" table. You can change the message to anything you like. Final Response To User This last section simply returns the message on each row back to the user. This could be an \"Update\" or an error message if it was set previously. It also raises an error message if the parameter \"@ErrorMessageToUser\" was set. Now that the Stored Procedure is finished, execute it to save it. The following is the finished SP: NorthwindEditingDataSaveSP CREATE OR ALTER PROC NorthwindEditingDataSaveSP -- System Params not in formula @Interject_RequestContext nvarchar(max) ,@TestMode bit = 0 -- used only for testing the stored procedure directly. It will show more results when set to 1. AS /* ================================================================================== CREATED DATE: 3/7/2023 8:22 AM CREATED BY: Interject Default DESCRIPTION: Example data pull to be used with Interject --------------------------------------------------------------------------- TEST Example: Use the below to test this stored procedure: --------------------------------------------------------------------------- EXEC NorthwindEditingDataSaveSP @TestMode = 1 ,@Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>16.0</ExcelVersion> <IdsVersion>2.4.1.25</IdsVersion> <FileName>DevelopEditingDataSave.xlsx</FileName> <FilePath>D:\\Users\\test\\Documents\\Documentation\\DevReportSave</FilePath> <TabName>NewReport_1</TabName> <CellRange>C11</CellRange> <SourceFunction>Save</SourceFunction> <UtcOffset>-8</UtcOffset> <ColDefItems> <Value Row=\"4\" Column=\"2\"> <Name>CustomerID</Name> </Value> <Value Row=\"4\" Column=\"4\"> <Name>ContactName</Name> </Value> <Value Row=\"4\" Column=\"5\"> <Name>ContactTitle</Name> </Value> </ColDefItems> <ResultDefItems> <Value Row=\"6\" Column=\"13\"> <Name>MessageToUser</Name> </Value> </ResultDefItems> <RowDefItems> <Value Row=\"24\" Column=\"2\" ColumnName=\"CustomerID\"> <Name>BOTTM</Name> </Value> <Value Row=\"25\" Column=\"2\" ColumnName=\"CustomerID\"> <Name>GREAL</Name> </Value> <Value Row=\"26\" Column=\"2\" ColumnName=\"CustomerID\"> <Name>SAVEA</Name> </Value> <Value Row=\"27\" Column=\"2\" ColumnName=\"CustomerID\"> <Name>WHITC</Name> </Value> </RowDefItems> <UserContext> <MachineLoginName>test</MachineLoginName> <MachineName>1234</MachineName> <FullName> </FullName> <UserId>1234</UserId> <ClientId>1234</ClientId> <LoginName>test@email.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>03/06/2023 3:52:17</LoginDateUtc> <UserRoles> <Role></Role> </UserRoles> </UserContext> <UserContextEncrypted>Encrypted only through interject api protocol, not direct connection</UserContextEncrypted> <XMLDataToSave> <c Column=\"Row\" OrigValue=\"Row\" /> <c Column=\"CustomerID\" OrigValue=\"CustomerID\" /> <c Column=\"ContactName\" OrigValue=\"ContactName\" /> <c Column=\"ContactTitle\" OrigValue=\"ContactTitle\" /> <r> <Row>24</Row> <CustomerID>BOTTM</CustomerID> <ContactName>Elizabeth Lincoln</ContactName> <ContactTitle>Accounting Manager</ContactTitle> </r> <r> <Row>25</Row> <CustomerID>GREAL</CustomerID> <ContactName>Howard Snyder</ContactName> <ContactTitle>Marketing Manager</ContactTitle> </r> <r> <Row>26</Row> <CustomerID>SAVEA</CustomerID> <ContactName>Jose Pavarotti</ContactName> <ContactTitle>Sales Representative</ContactTitle> </r> <r> <Row>27</Row> <CustomerID>WHITC</CustomerID> <ContactName>Karl Jablonski</ContactName> <ContactTitle>Owner</ContactTitle> </r> </XMLDataToSave> </RequestContext>' --------------------------------------------------------------------------- Validation Example: --------------------------------------------------------------------------- Note: By adding 'UserNotice:' to the error message, Interject will show the message in an alert box and not flag the formula with an error. Without it, the formula will show an error with the text the user can click into. IF @ParameterName = 'TheWrongValue' BEGIN RAISERROR ('UserNotice:You selected an invalid value. Unable to continue.', 18, -- Severity, 1) -- State) RETURN END --------------------------------------------------------------------------- Reserved Parameters: --------------------------------------------------------------------------- Note: If the below parameters are added to your stored procedure and to the dataportal parameter list, Interject will pass the related value automatically. @Interject_XMLDataToSave varchar(max) - Required for saving data. It contains XML for the designated cells values. @Interject_ColDefItems varchar(max) - Provides the Column Definitions in XML designated within the report formula. @Interject_RowDefItems varchar(max) - Provides the Row Definitions in XML designated within the report formula. @Interject_SourceFileAndPath varchar(500) - Provides the path and file name delimited by '|' of the current file. @Interject_SourceFilePathAndTab varchar(1000) - Provides the path, file name and active tab name delimited by '|' of the current file. @Interject_LocalTimeZoneOffset money - Provides a number (0.000) that represents the offset of the users time to UTC time. @Interject_NTLogin varchar(50) - Provides the user's computer login name for their current session. @Interject_UserID varchar(50) - Provides the Interject User ID for their current session. @Interject_LoginName varchar(50) - Provides the Interject Full name for their current session. @Interject_ExcelVersion varchar(50) - Provides the users Excel version. @Interject_UserRoles varchar(1000) - Provides the Interject roles assigned to the user. @Interject_ClientID varchar(50) - Provides the Interject Client ID for their current session. @Interject_ReturnError varchar(2000) - Is an output parameter that can be used to return an error back to the user. Pass empty string for no error. @Interject_RequestContext nvarchar(max) - Provides all above request context and both the open text and encrypted version of the user context. ================================================================================== */ -- -- Use helper to extract data from Interject_RequestContext. Remove items that are not needed -- The helper stored procedure [dbo].[RequestContext_Parse] is required for this section to function -- DECLARE @ExcelVersion NVARCHAR(100) ,@IdsVersion NVARCHAR(100) ,@FileName NVARCHAR(1000) ,@FilePath NVARCHAR(1000) ,@TabName NVARCHAR(1000) ,@CellRange NVARCHAR(100) ,@SourceFunction NVARCHAR(100) ,@UtcOffset DECIMAL(6,4) ,@ColDefItemsDelimited xml ,@ResultDefItemsDelimited xml ,@RowDefItemsDelimited xml ,@MachineLoginName NVARCHAR(100) ,@MachineName NVARCHAR(100) ,@Interject_UserID NVARCHAR(100) ,@Interject_ClientID NVARCHAR(100) ,@Interject_LoginName NVARCHAR(100) ,@Interject_LoginAuthTypeID INT ,@Interject_LoginDateUTC DATETIME ,@Interject_UserRolesDelimited NVARCHAR(max) ,@UserContextEncrypted NVARCHAR(4000) ,@Interject_XMLDataToSave xml EXEC [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@ExcelVersion = @ExcelVersion OUTPUT ,@IdsVersion = @IdsVersion OUTPUT ,@FileName = @FileName OUTPUT ,@FilePath = @FilePath OUTPUT ,@TabName = @TabName OUTPUT ,@CellRange = @CellRange OUTPUT ,@SourceFunction = @SourceFunction OUTPUT ,@UtcOffset = @UtcOffset OUTPUT ,@ColDefItemsDelimited = @ColDefItemsDelimited OUTPUT ,@ResultDefItemsDelimited = @ResultDefItemsDelimited OUTPUT ,@RowDefItemsDelimited = @RowDefItemsDelimited OUTPUT ,@MachineLoginName = @MachineLoginName OUTPUT ,@MachineName = @MachineName OUTPUT ,@Interject_UserID = @Interject_UserID OUTPUT ,@Interject_ClientID = @Interject_ClientID OUTPUT ,@Interject_LoginName = @Interject_LoginName OUTPUT ,@Interject_LoginAuthTypeID = @Interject_LoginAuthTypeID OUTPUT ,@Interject_LoginDateUTC = @Interject_LoginDateUTC OUTPUT ,@Interject_UserRolesDelimited = @Interject_UserRolesDelimited OUTPUT ,@UserContextEncrypted = @UserContextEncrypted OUTPUT ,@Interject_XMLDataToSave = @Interject_XMLDataToSave OUTPUT IF @TestMode = 1 BEGIN SELECT @ExcelVersion as '@ExcelVersion' ,@IdsVersion as '@IdsVersion' ,@FileName as '@FileName' ,@FilePath as '@FilePath ' ,@TabName as '@TabName' ,@CellRange as '@CellRange' ,@SourceFunction as '@SourceFunction' ,@UtcOffset as '@UtcOffset' ,@ColDefItemsDelimited as '@ColDefItemsDelimited' ,@ResultDefItemsDelimited as '@ResultDefItemsDelimited' ,@RowDefItemsDelimited as '@RowDefItemsDelimited' ,@MachineLoginName as '@MachineLoginName' ,@MachineName as '@MachineName' ,@Interject_UserID as '@Interject_UserID' ,@Interject_ClientID as '@Interject_ClientID' ,@Interject_LoginName as '@Interject_LoginName' ,@Interject_LoginAuthTypeID as '@Interject_LoginAuthTypeID' ,@Interject_LoginDateUTC as '@Interject_LoginDateUTC' ,@Interject_UserRolesDelimited as '@Interject_UserRolesDelimited' ,@UserContextEncrypted as '@UserContextEncrypted' ,@Interject_XMLDataToSave as '@Interject_XMLDataToSave' END DECLARE @ErrorMessageToUser as varchar(1000) = '' -- -- PROCESS THE XML DATA INTO TABLE VARIABLE -- varchar(max) is used for the data type by default. Please change for the specific requirement. -- DECLARE @DataToProcess TABLE ( -- the below are system values used internally in this stored procedures [_ExcelRow] INT ,[_MessageToUser] VARCHAR(500) DEFAULT('') -- Below are your columns expected from the spreadsheet that is calling this save stored procedure -- Please change the (max) to the expected length of the text input. If limiting length, be sure to make the size larger than allowed so you can add validation to notify the user ,[CustomerID] NCHAR(5) ,[ContactName] NVARCHAR(30) ,[ContactTitle] NVARCHAR(30) ) IF DATALENGTH(@Interject_XMLDataToSave) > 0 BEGIN declare @DataToProcessXML as XML -- Handle conversion of XML text into an XML variable. BEGIN TRY SET @DataToProcessXML = CAST(@Interject_XMLDataToSave as XML) END TRY BEGIN CATCH SET @ErrorMessageToUser = 'Error in Parsing XML from Interject. Error: ' + ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH -- Insert the XML into the table variable for further processing INSERT into @DataToProcess( [_ExcelRow] -- The below columns are provided based on your column definitions in the ReportSave() function] ,[CustomerID] ,[ContactName] ,[ContactTitle] ) SELECT -- The below row value is always provided by Interject T.c.value('./Row[1]', 'INT') as [_ExcelRow] -- The below columns are provided based on your column definitions in the ReportSave() function ,T.c.value('./CustomerID[1]', 'NCHAR(5)') as [CustomerID] ,T.c.value('./ContactName[1]', 'NVARCHAR(30)') as [ContactName] ,T.c.value('./ContactTitle[1]', 'NVARCHAR(30)') as [ContactTitle] FROM @DataToProcessXML.nodes('/XMLDataToSave/r') T(c) END -- TestMode is provided so a test save can be executed and all related data can be -- easily viewed for testing while not effecting any data in the database IF @TestMode =1 BEGIN SELECT '@DataToProcess - After XML Processing' as ResultName SELECT * FROM @DataToProcess END -- -- VALIDATION SECTION - Ensure inputs received from Excel are valid -- -- Validate that the details do not have duplicates on the primary key UPDATE m SET [_MessageToUser] = [_MessageToUser] + ', Duplicate key' FROM @DataToProcess m INNER JOIN ( SELECT [CustomerID] FROM @DataToProcess WHERE [CustomerID] <> '' GROUP BY [CustomerID] HAVING COUNT(1) > 1 ) as t ON m.CustomerID = t.CustomerID -- Now check if there were any validation issues in the detail and stop processing if true IF EXISTS(SELECT 1 FROM @DataToProcess WHERE [_MessageToUser] <> '') BEGIN SET @ErrorMessageToUser = 'There were errors in the details of your input. Please review the errors noted in each row.' GOTO FinalResponseToUser END -- -- DATA UPDATE -- BEGIN TRY -- this table variable will log the changes to the target table so it can be used -- to return helpful feedback to the user about how the save action resulted DECLARE @ChangeLog as TABLE ( [_ExcelRow] INT -- will capture the source row that affected the target table ,[UpdateTypeCode] VARCHAR(10) -- Will show UPDATE, INSERT, or DELETE ,[CustomerID] NCHAR(5) ) BEGIN TRAN t1 -- -- use MERGE statement that UPDATES, INSERTS, and DELETES in one action -- MERGE dbo.Northwind_Customers t -- t = the target table or view to update USING ( SELECT [_ExcelRow] ,[CustomerID] ,[ContactName] ,[ContactTitle] FROM @DataToProcess ) s -- s = the source data to be used to update the target table -- the join on the column keys is specified below ON s.[CustomerID] = t.[CustomerID] WHEN MATCHED -- Handles the update based on INNER JOIN AND NOT ( s.[ContactName] = t.[ContactName] -- To ensure only changes are captured AND s.[ContactTitle] = t.[ContactTitle] ) THEN UPDATE SET t.[ContactName] = s.[ContactName] ,t.[ContactTitle] = s.[ContactTitle] --WHEN NOT MATCHED BY TARGET THEN -- Handles the insert based on LEFT JOIN -- NOT USED IN THIS EXAMPLE -- INSERT([ExampleColumnKey],[ExampleColumnValue]) -- VALUES(s.ExampleColumnKey],s.[ExampleColumnValue]) --WHEN NOT MATCHED BY SOURCE -- Handles the delete based on the RIGHT JOIN -- NOT USED IN THIS EXAMPLE -- AND... add restrictions so delete doesn't remove too much. Filter params are normally considered here. -- THEN -- DELETE -- the output captures the changes to the table and logs to a table variable OUTPUT isnull(inserted.[CustomerID],deleted.[CustomerID]) -- include deleted in case delete is added later. Inserted is used for both Update an Insert ,s.[_ExcelRow] ,$action as UpdateTypeCode -- this logs into an a change log table variable INTO @ChangeLog ( [CustomerID] ,[_ExcelRow] ,[UpdateTypeCode] ); --now we have enough information to update the message to user for each row UPDATE dtp SET [_MessageToUser] = CASE cl.UpdateTypeCode --WHEN 'INSERT' THEN ', Added!' -- not used in this example --WHEN 'DELETE' THEN ', Deleted' -- this will never match the excel side but can be used for other types of logging WHEN 'UPDATE' THEN ', Updated!' --ELSE ', No change' -- not used in this example END FROM @DataToProcess dtp INNER JOIN @ChangeLog cl -- use Left Join if 'No Change' is to be identified ON dtp.[_ExcelRow] = cl.[_ExcelRow] IF @TestMode = 1 BEGIN SELECT '@ChangeLog- Show log of changes made' as ResultName select * from @ChangeLog ROLLBACK TRAN t1 -- note this does not roll back changes to table variables, only real tables SELECT 'Changes rolled back since in TEST mode!' as TestModeNote END ELSE BEGIN COMMIT TRAN t1 END END TRY BEGIN CATCH IF @@TRANCOUNT > 0 ROLLBACK TRAN t1 SET @ErrorMessageToUser = ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH FinalResponseToUser: -- -- PROVIDE RESPONSE TO THE SAVE ACTION -- -- if test mode, show the final table IF @TestMode = 1 BEGIN SELECT '@DataToProcess - After Validation' as ResultName SELECT * FROM @DataToProcess END -- return the recordset results back to the spreadsheet, if needed. SELECT [_ExcelRow] as [Row] -- this relates to the original row of the spreadsheet the data came from ,SUBSTRING([_MessageToUser],3,1000) as [MessageToUser] -- This is a field that, if it matches a column in the Results Range, will be placed in that column for the specified row FROM @DataToProcess -- if there is an error, raise error and Interject will catch and present to the user. -- Note that this is specifically done after the above resultset is returned, since initiating an error before -- will not allow a result set to be returned to provide feedback on each row IF @ErrorMessageToUser <> '' BEGIN -- by adding 'UserNotice:' as a prefix to the message, Interject will not consider it a unhandled error -- and will present the error to the user in a message box. SET @ErrorMessageToUser = 'UserNotice:' + @ErrorMessageToUser RAISERROR (@ErrorMessageToUser, 18, -- Severity, 1) -- State) RETURN END Testing the Stored Procedure Now you can test the SP by using the test code. For example, make a change to the data in the test code and execute the test. Because the \"@TestMode\" bit is set to 1, it will display all kinds of information about the SP process. Notice the changes and message to user that would be displayed. Note that when using the test script, no actually changes are being made to the database since the transaction of the merge is rolled back: Testing the ReportSave The only thing left to do is test the SP by running the ReportSave function within the Excel report. First pull the data: Next make a change to a Contact Name or Contact Title and run the Report Save: Notice the results!: "},{"title":"Develop: Error Handling with RAISERROR and UserNotice","url":"/wGetStarted/L-Dev-Error-Handling.html","content":" Overview This page will cover error handling in Interject development using T-SQL’s RAISERROR and Interject’s UserrNotice flag. Understanding Error Handling There are two types of errors that Interject can display: unhandled and handled. Unhandled errors are system generated, whereas handled errors are anticipated and written by developers. For example, on a pull or save, an error may occur on the server which the report is trying to access. This error could be handled by the developer if the developer anticipates it, or it could be left as an unhandled error. Error Handling With RAISERROR Interject leverages the T-SQL statement RAISERROR in its Data Portals to process errors. RAISERROR is designed to generate error messages and initiate error processing in the session (Source: Microsoft RAISERROR Documentation). It is used as follows: @ErrorMessageToUser - a string containing a description of the error, with or without a prefix of ‘UserNotice:’. severity - generally a number from 0-18 ranking the severity of the error, typically 18 if you want to stop the execution of a stored procedure. state - number, 0-255, used to locate where errors occur in your code. See Microsoft RAISERROR Documentation from more detailed information on using RAISERROR and its parameters. Error Handling With UserNotice UserNotice: is an Interject-defined identifying string that we append to the beginning of the @ErrorMessageToUser argument at the time of passing to RAISERROR to indicate that we would like a popup to appear to the user in Excel when the error occurs. It is used as follows: When UserNotice: is added to your @ErrorMessageToUser before being passed to RAISERROR, it enables the option of having a popup window appear, alerting the user of the error in Excel. Errors can quickly be handled (as opposed to leaving them unhandled) by developers simply by using the UserNotice string. Unhandled Error Behavior If you opt not to use UserNotice, your error will still be reported by the Interject Addin, but no popup window will appear for the user: "},{"title":"Develop: Insert &amp; Delete Data Save","url":"/wDeveloper/L-Dev-InsertDeleteDataSave.html","content":" Overview In this example you will modify the previous Editing Data Save, which was set up to edit a customer's contact name and title. In this Insert & Delete Data Save, you will walkthrough the steps to edit all the columns. In addition, you will also include the ability to insert or delete a customer from within the Excel report. Note: The Customer Aging Report used in this example is a report that displays a customer's outstanding balances. It is not normally used to edit, insert, or delete a customer directly. However, for this walkthrough demonstration purpose, you will modify the report in order to do so. This walkthrough involves 6 main steps: Set up a Data Connection (completed already) Set up a Data Portal Setting up the report to handle the save Setting up the soft delete Set up the Stored Procedure (SP) to handle the save Test the Stored Procedure & ReportSave Note: This example uses Microsoft's Northwind Database. You can download this database here or you can use this example as a guide for your own data source. Setting up the Data Connection For the Data Connection for this example, you will use the connection previously set up here. Setting up the Data Portal Step 1: Navigate to https://portal.gointerject.com and log in . Click on Data Portals on the left side bar and then the NEW DATA PORTAL button. Step 2: Enter the following details on setting up the new data portal and click \"CREATE DATA PORTAL\". Data Portal Code: NorthwindInsertDeleteDataSave Description: Data portal for insert and delete data save Category: Demo Connection: NorthwindExampleDB_MyName (replace \"MyName\" with your name) Command Type: Stored Procedure Stored Procedure/Command: NorthwindInsertDeleteDataSaveSP Note: You will create the \"NorthwindInsertDeleteDataSaveSP\" Stored Procedure later. Step 3: After creating the data portal, scroll down and click Click here to add a System Parameter and ensure the Interject_RequestContext parameter is set. The System Parameter Interject_RequestContext will transfer contextual data to the Stored Procedure you will set up later. In this example you will not need this info but it is a good practice to set this parameter for all your Stored Procedures. Setting up the Report Begin by opening up the report that was completed in the previous data save. You will modify this report to set up the Insert & Delete Data Save. Step 1: First click on the cell containing the ReportSave function and change it to match the Data Portal you just set up: Step 2: Next add the CompanyName, Phone, City, Country and Delete to the \"Column Definition - Save\" configuration row so that this data will be saved to the data source: Step 3: Next you will add a Delete? column to the report. This way if there is a \"Yes\" marked in this column, the record for that row will be deleted. This prevents the accidental deletion of records if they are missing from the report: Highlight the cells on the new Delete? column and click Data Validation to bring up the Data Validation window: For the Validation criteria, click on List for the Allow field and enter Yes for the Source: Step 4: Finally, enter [clear] into cell N2 in order for the entries in the Delete column to be cleared out on a pull. That's it. The report is now ready to add, delete, or update a customer. Setting up the Soft Delete There are two main ways to delete a record from a database: a hard delete and a soft delete. A hard delete simply removes the record altogether. A soft delete simply flags the record as deleted. This approach is preferable over a hard delete because you can recover the data easily by switching the flag. The example in this data save uses a soft delete. In order to implement this, you will need to set up a column in the targeted data table that will store a boolean \"IsDeleted\" value to distinguish which records have been soft deleted. Step 1: Execute the following SQL to add a IsDeleted column to the table that you are saving to: ALTER TABLE dbo.Northwind_Customers ADD IsDeleted BIT Step 2: Now that the new column has been added, you need to set all the existing values to 0. Execute the following SQL on the same table: UPDATE dbo.Northwind_Customers SET IsDeleted = 0 Step 3: Next, since you don't want to allow nulls for this flag, set the IsDeleted column to \"Not Null\" by executing the following SQL: ALTER TABLE dbo.Northwind_Customers ALTER COLUMN IsDeleted bit NOT NULL Step 4: Lastly, in order to only pull records that are not deleted, you will need to add the following line to the Stored Procedure previously set up that pulls the data for this report: Setting up the Stored Procedure Next you will created a new Stored Procedure that builds from the previous save. To make this easier, simply copy the SP into a new query, change the command to \"CREATE OR ALTER PROC NorthwindInsertDeleteDataSaveSP\" and execute it to save it. Then you can begin making modifications to it. For your convenience, the SP is posted here. Note: The code for testing the SP has been removed. It will be handled later: NorthwindInsertDeleteDataSaveSP CREATE OR ALTER PROC NorthwindInsertDeleteDataSaveSP -- System Params not in formula @Interject_RequestContext nvarchar(max) ,@TestMode bit = 0 -- used only for testing the stored procedure directly. It will show more results when set to 1. AS /* ================================================================================== CREATED DATE: 3/7/2023 8:22 AM CREATED BY: Interject Default DESCRIPTION: Example data pull to be used with Interject --------------------------------------------------------------------------- TEST Example: Use the below to test this stored procedure: --------------------------------------------------------------------------- This section has been removed. To get sample code for testing this stored procedure, select the cell in Excel containing the ReportSave function. Then click on the Interject ribbon, click System > View SQL Test For ActiveCell. --------------------------------------------------------------------------- Validation Example: --------------------------------------------------------------------------- Note: By adding 'UserNotice:' to the error message, Interject will show the message in an alert box and not flag the formula with an error. Without it, the formula will show an error with the text the user can click into. IF @ParameterName = 'TheWrongValue' BEGIN RAISERROR ('UserNotice:You selected an invalid value. Unable to continue.', 18, -- Severity, 1) -- State) RETURN END --------------------------------------------------------------------------- Reserved Parameters: --------------------------------------------------------------------------- Note: If the below parameters are added to your stored procedure and to the dataportal parameter list, Interject will pass the related value automatically. @Interject_XMLDataToSave varchar(max) - Required for saving data. It contains XML for the designated cells values. @Interject_ColDefItems varchar(max) - Provides the Column Definitions in XML designated within the report formula. @Interject_RowDefItems varchar(max) - Provides the Row Definitions in XML designated within the report formula. @Interject_SourceFileAndPath varchar(500) - Provides the path and file name delimited by '|' of the current file. @Interject_SourceFilePathAndTab varchar(1000) - Provides the path, file name and active tab name delimited by '|' of the current file. @Interject_LocalTimeZoneOffset money - Provides a number (0.000) that represents the offset of the users time to UTC time. @Interject_NTLogin varchar(50) - Provides the user's computer login name for their current session. @Interject_UserID varchar(50) - Provides the Interject User ID for their current session. @Interject_LoginName varchar(50) - Provides the Interject Full name for their current session. @Interject_ExcelVersion varchar(50) - Provides the users Excel version. @Interject_UserRoles varchar(1000) - Provides the Interject roles assigned to the user. @Interject_ClientID varchar(50) - Provides the Interject Client ID for their current session. @Interject_ReturnError varchar(2000) - Is an output parameter that can be used to return an error back to the user. Pass empty string for no error. @Interject_RequestContext nvarchar(max) - Provides all above request context and both the open text and encrypted version of the user context. ================================================================================== */ -- -- Use helper to extract data from Interject_RequestContext. Remove items that are not needed -- The helper stored procedure [dbo].[RequestContext_Parse] is required for this section to function -- DECLARE @ExcelVersion NVARCHAR(100) ,@IdsVersion NVARCHAR(100) ,@FileName NVARCHAR(1000) ,@FilePath NVARCHAR(1000) ,@TabName NVARCHAR(1000) ,@CellRange NVARCHAR(100) ,@SourceFunction NVARCHAR(100) ,@UtcOffset DECIMAL(6,4) ,@ColDefItemsDelimited xml ,@ResultDefItemsDelimited xml ,@RowDefItemsDelimited xml ,@MachineLoginName NVARCHAR(100) ,@MachineName NVARCHAR(100) ,@Interject_UserID NVARCHAR(100) ,@Interject_ClientID NVARCHAR(100) ,@Interject_LoginName NVARCHAR(100) ,@Interject_LoginAuthTypeID INT ,@Interject_LoginDateUTC DATETIME ,@Interject_UserRolesDelimited NVARCHAR(max) ,@UserContextEncrypted NVARCHAR(4000) ,@Interject_XMLDataToSave xml EXEC [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@ExcelVersion = @ExcelVersion OUTPUT ,@IdsVersion = @IdsVersion OUTPUT ,@FileName = @FileName OUTPUT ,@FilePath = @FilePath OUTPUT ,@TabName = @TabName OUTPUT ,@CellRange = @CellRange OUTPUT ,@SourceFunction = @SourceFunction OUTPUT ,@UtcOffset = @UtcOffset OUTPUT ,@ColDefItemsDelimited = @ColDefItemsDelimited OUTPUT ,@ResultDefItemsDelimited = @ResultDefItemsDelimited OUTPUT ,@RowDefItemsDelimited = @RowDefItemsDelimited OUTPUT ,@MachineLoginName = @MachineLoginName OUTPUT ,@MachineName = @MachineName OUTPUT ,@Interject_UserID = @Interject_UserID OUTPUT ,@Interject_ClientID = @Interject_ClientID OUTPUT ,@Interject_LoginName = @Interject_LoginName OUTPUT ,@Interject_LoginAuthTypeID = @Interject_LoginAuthTypeID OUTPUT ,@Interject_LoginDateUTC = @Interject_LoginDateUTC OUTPUT ,@Interject_UserRolesDelimited = @Interject_UserRolesDelimited OUTPUT ,@UserContextEncrypted = @UserContextEncrypted OUTPUT ,@Interject_XMLDataToSave = @Interject_XMLDataToSave OUTPUT IF @TestMode = 1 BEGIN SELECT @ExcelVersion as '@ExcelVersion' ,@IdsVersion as '@IdsVersion' ,@FileName as '@FileName' ,@FilePath as '@FilePath ' ,@TabName as '@TabName' ,@CellRange as '@CellRange' ,@SourceFunction as '@SourceFunction' ,@UtcOffset as '@UtcOffset' ,@ColDefItemsDelimited as '@ColDefItemsDelimited' ,@ResultDefItemsDelimited as '@ResultDefItemsDelimited' ,@RowDefItemsDelimited as '@RowDefItemsDelimited' ,@MachineLoginName as '@MachineLoginName' ,@MachineName as '@MachineName' ,@Interject_UserID as '@Interject_UserID' ,@Interject_ClientID as '@Interject_ClientID' ,@Interject_LoginName as '@Interject_LoginName' ,@Interject_LoginAuthTypeID as '@Interject_LoginAuthTypeID' ,@Interject_LoginDateUTC as '@Interject_LoginDateUTC' ,@Interject_UserRolesDelimited as '@Interject_UserRolesDelimited' ,@UserContextEncrypted as '@UserContextEncrypted' ,@Interject_XMLDataToSave as '@Interject_XMLDataToSave' END DECLARE @ErrorMessageToUser as varchar(1000) = '' -- -- PROCESS THE XML DATA INTO TABLE VARIABLE -- varchar(max) is used for the data type by default. Please change for the specific requirement. -- DECLARE @DataToProcess TABLE ( -- the below are system values used internally in this stored procedures [_ExcelRow] INT ,[_MessageToUser] VARCHAR(500) DEFAULT('') -- Below are your columns expected from the spreadsheet that is calling this save stored procedure -- Please change the (max) to the expected length of the text input. If limiting length, be sure to make the size larger than allowed so you can add validation to notify the user ,[CustomerID] NCHAR(5) ,[ContactName] NVARCHAR(30) ,[ContactTitle] NVARCHAR(30) ) IF DATALENGTH(@Interject_XMLDataToSave) > 0 BEGIN declare @DataToProcessXML as XML -- Handle conversion of XML text into an XML variable. BEGIN TRY SET @DataToProcessXML = CAST(@Interject_XMLDataToSave as XML) END TRY BEGIN CATCH SET @ErrorMessageToUser = 'Error in Parsing XML from Interject. Error: ' + ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH -- Insert the XML into the table variable for further processing INSERT into @DataToProcess( [_ExcelRow] -- The below columns are provided based on your column definitions in the ReportSave() function] ,[CustomerID] ,[ContactName] ,[ContactTitle] ) SELECT -- The below row value is always provided by Interject T.c.value('./Row[1]', 'INT') as [_ExcelRow] -- The below columns are provided based on your column definitions in the ReportSave() function ,T.c.value('./CustomerID[1]', 'NCHAR(5)') as [CustomerID] ,T.c.value('./ContactName[1]', 'NVARCHAR(30)') as [ContactName] ,T.c.value('./ContactTitle[1]', 'NVARCHAR(30)') as [ContactTitle] FROM @DataToProcessXML.nodes('/XMLDataToSave/r') T(c) END -- TestMode is provided so a test save can be executed and all related data can be -- easily viewed for testing while not effecting any data in the database IF @TestMode =1 BEGIN SELECT '@DataToProcess - After XML Processing' as ResultName SELECT * FROM @DataToProcess END -- -- VALIDATION SECTION - Ensure inputs received from Excel are valid -- -- Validate that the details do not have duplicates on the primary key UPDATE m SET [_MessageToUser] = [_MessageToUser] + ', Duplicate key' FROM @DataToProcess m INNER JOIN ( SELECT [CustomerID] FROM @DataToProcess WHERE [CustomerID] <> '' GROUP BY [CustomerID] HAVING COUNT(1) > 1 ) as t ON m.CustomerID = t.CustomerID -- Now check if there were any validation issues in the detail and stop processing if true IF EXISTS(SELECT 1 FROM @DataToProcess WHERE [_MessageToUser] <> '') BEGIN SET @ErrorMessageToUser = 'There were errors in the details of your input. Please review the errors noted in each row.' GOTO FinalResponseToUser END -- -- DATA UPDATE -- BEGIN TRY -- this table variable will log the changes to the target table so it can be used -- to return helpful feedback to the user about how the save action resulted DECLARE @ChangeLog as TABLE ( [_ExcelRow] INT -- will capture the source row that affected the target table ,[UpdateTypeCode] VARCHAR(10) -- Will show UPDATE, INSERT, or DELETE ,[CustomerID] NCHAR(5) ) BEGIN TRAN t1 -- -- use MERGE statement that UPDATES, INSERTS, and DELETES in one action -- MERGE dbo.Northwind_Customers t -- t = the target table or view to update USING ( SELECT [_ExcelRow] ,[CustomerID] ,[ContactName] ,[ContactTitle] FROM @DataToProcess ) s -- s = the source data to be used to update the target table -- the join on the column keys is specified below ON s.[CustomerID] = t.[CustomerID] WHEN MATCHED -- Handles the update based on INNER JOIN AND NOT ( s.[ContactName] = t.[ContactName] -- To ensure only changes are captured AND s.[ContactTitle] = t.[ContactTitle] ) THEN UPDATE SET t.[ContactName] = s.[ContactName] ,t.[ContactTitle] = s.[ContactTitle] --WHEN NOT MATCHED BY TARGET THEN -- Handles the insert based on LEFT JOIN -- NOT USED IN THIS EXAMPLE -- INSERT([ExampleColumnKey],[ExampleColumnValue]) -- VALUES(s.ExampleColumnKey],s.[ExampleColumnValue]) --WHEN NOT MATCHED BY SOURCE -- Handles the delete based on the RIGHT JOIN -- NOT USED IN THIS EXAMPLE -- AND... add restrictions so delete doesn't remove too much. Filter params are normally considered here. -- THEN -- DELETE -- the output captures the changes to the table and logs to a table variable OUTPUT isnull(inserted.[CustomerID],deleted.[CustomerID]) -- include deleted in case delete is added later. Inserted is used for both Update an Insert ,s.[_ExcelRow] ,$action as UpdateTypeCode -- this logs into an a change log table variable INTO @ChangeLog ( [CustomerID] ,[_ExcelRow] ,[UpdateTypeCode] ); --now we have enough information to update the message to user for each row UPDATE dtp SET [_MessageToUser] = CASE cl.UpdateTypeCode --WHEN 'INSERT' THEN ', Added!' -- not used in this example --WHEN 'DELETE' THEN ', Deleted' -- this will never match the excel side but can be used for other types of logging WHEN 'UPDATE' THEN ', Updated!' --ELSE ', No change' -- not used in this example END FROM @DataToProcess dtp INNER JOIN @ChangeLog cl -- use Left Join if 'No Change' is to be identified ON dtp.[_ExcelRow] = cl.[_ExcelRow] IF @TestMode = 1 BEGIN SELECT '@ChangeLog- Show log of changes made' as ResultName select * from @ChangeLog ROLLBACK TRAN t1 -- note this does not roll back changes to table variables, only real tables SELECT 'Changes rolled back since in TEST mode!' as TestModeNote END ELSE BEGIN COMMIT TRAN t1 END END TRY BEGIN CATCH IF @@TRANCOUNT > 0 ROLLBACK TRAN t1 SET @ErrorMessageToUser = ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH FinalResponseToUser: -- -- PROVIDE RESPONSE TO THE SAVE ACTION -- -- if test mode, show the final table IF @TestMode = 1 BEGIN SELECT '@DataToProcess - After Validation' as ResultName SELECT * FROM @DataToProcess END -- return the recordset results back to the spreadsheet, if needed. SELECT [_ExcelRow] as [Row] -- this relates to the original row of the spreadsheet the data came from ,SUBSTRING([_MessageToUser],3,1000) as [MessageToUser] -- This is a field that, if it matches a column in the Results Range, will be placed in that column for the specified row FROM @DataToProcess -- if there is an error, raise error and Interject will catch and present to the user. -- Note that this is specifically done after the above resultset is returned, since initiating an error before -- will not allow a result set to be returned to provide feedback on each row IF @ErrorMessageToUser <> '' BEGIN -- by adding 'UserNotice:' as a prefix to the message, Interject will not consider it a unhandled error -- and will present the error to the user in a message box. SET @ErrorMessageToUser = 'UserNotice:' + @ErrorMessageToUser RAISERROR (@ErrorMessageToUser, 18, -- Severity, 1) -- State) RETURN END Execute the above code to save the Store Procedure. Modifying the Stored Procedure The following walks you through the major sections of the code with instructions on the changes. Additions are marked in yellow. Data to Process Since you are going to be saving more columns of data back to the data source, you simply need to add these columns to the @DataToProcess table. Be sure to match the data type of the table you will be saving the data to: Inserting the Data to Process Again, these additions are simply adding the additional columns so that they will be saved: Set IsDeleted Flag After the \"BEGIN TRAN t1\" line, you are going to add a section that handles marking which records are deleted. Technically, the deletions can be handled in the Merge statement. However, since you are doing a soft delete and want the output of 'DELETE' along with the Excel_Row, it must be done outside the Merge statement. The following code sets the \"IsDeleted\" flag in the target table wherever the @DataToProcess column is marked \"yes\" for deletion. It also outputs information to the @ChangeLog table: Set Added Back After the addition in the previous section, you will add a section that handles the case where a previously deleted record is added back again. If this section is missing and handled by the Merge statement, it will see it as a typical 'UPDATE'. By handling it here, you can distinguish it as an 'ADDED_BACK'. If the record is not marked for deletion and is currently deleted, this will switch the \"IsDeleted\" flag to 0 (false): Merge Select Next you will update the merge statement to include the additional columns to save: Merge Update The \"WHEN MATCHED\" section handles updates to the data. It needs to be updated to add the additional columns: Merge Insert Just after the previous section, you will add another section \"WHEN NOT MATCHED BY TARGET\". This will handle new insertions: Set Message To User The last piece of code that needs to be changed is setting the message to the user. You will simply add a few cases to handle the \"Added Back\", \"Deleted\", and \"Inserted\" cases: Final Stored Procedure Now that the Stored Procedure is finished, execute it to save it. The following is the finished SP: NorthwindInsertDeleteDataSaveSP CREATE OR ALTER PROC [dbo].[NorthwindInsertDeleteDataSaveSP] -- System Params not in formula @Interject_RequestContext nvarchar(max) ,@TestMode bit = 0 -- used only for testing the stored procedure directly. It will show more results when set to 1. AS /* ================================================================================== CREATED DATE: 3/7/2023 8:22 AM CREATED BY: Interject Default DESCRIPTION: Example data pull to be used with Interject --------------------------------------------------------------------------- TEST Example: Use the below to test this stored procedure: --------------------------------------------------------------------------- This section has been removed. To get sample code for testing this stored procedure, select the cell in Excel containing the ReportSave function. Then click on the Interject ribbon, click System > View SQL Test For ActiveCell. --------------------------------------------------------------------------- Validation Example: --------------------------------------------------------------------------- Note: By adding 'UserNotice:' to the error message, Interject will show the message in an alert box and not flag the formula with an error. Without it, the formula will show an error with the text the user can click into. IF @ParameterName = 'TheWrongValue' BEGIN RAISERROR ('UserNotice:You selected an invalid value. Unable to continue.', 18, -- Severity, 1) -- State) RETURN END --------------------------------------------------------------------------- Reserved Parameters: --------------------------------------------------------------------------- Note: If the below parameters are added to your stored procedure and to the dataportal parameter list, Interject will pass the related value automatically. @Interject_XMLDataToSave varchar(max) - Required for saving data. It contains XML for the designated cells values. @Interject_ColDefItems varchar(max) - Provides the Column Definitions in XML designated within the report formula. @Interject_RowDefItems varchar(max) - Provides the Row Definitions in XML designated within the report formula. @Interject_SourceFileAndPath varchar(500) - Provides the path and file name delimited by '|' of the current file. @Interject_SourceFilePathAndTab varchar(1000) - Provides the path, file name and active tab name delimited by '|' of the current file. @Interject_LocalTimeZoneOffset money - Provides a number (0.000) that represents the offset of the users time to UTC time. @Interject_NTLogin varchar(50) - Provides the user's computer login name for their current session. @Interject_UserID varchar(50) - Provides the Interject User ID for their current session. @Interject_LoginName varchar(50) - Provides the Interject Full name for their current session. @Interject_ExcelVersion varchar(50) - Provides the users Excel version. @Interject_UserRoles varchar(1000) - Provides the Interject roles assigned to the user. @Interject_ClientID varchar(50) - Provides the Interject Client ID for their current session. @Interject_ReturnError varchar(2000) - Is an output parameter that can be used to return an error back to the user. Pass empty string for no error. @Interject_RequestContext nvarchar(max) - Provides all above request context and both the open text and encrypted version of the user context. ================================================================================== */ -- -- Use helper to extract data from Interject_RequestContext. Remove items that are not needed -- The helper stored procedure [dbo].[RequestContext_Parse] is required for this section to function -- DECLARE @ExcelVersion NVARCHAR(100) ,@IdsVersion NVARCHAR(100) ,@FileName NVARCHAR(1000) ,@FilePath NVARCHAR(1000) ,@TabName NVARCHAR(1000) ,@CellRange NVARCHAR(100) ,@SourceFunction NVARCHAR(100) ,@UtcOffset DECIMAL(6,4) ,@ColDefItemsDelimited xml ,@ResultDefItemsDelimited xml ,@RowDefItemsDelimited xml ,@MachineLoginName NVARCHAR(100) ,@MachineName NVARCHAR(100) ,@Interject_UserID NVARCHAR(100) ,@Interject_ClientID NVARCHAR(100) ,@Interject_LoginName NVARCHAR(100) ,@Interject_LoginAuthTypeID INT ,@Interject_LoginDateUTC DATETIME ,@Interject_UserRolesDelimited NVARCHAR(max) ,@UserContextEncrypted NVARCHAR(4000) ,@Interject_XMLDataToSave xml EXEC [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@ExcelVersion = @ExcelVersion OUTPUT ,@IdsVersion = @IdsVersion OUTPUT ,@FileName = @FileName OUTPUT ,@FilePath = @FilePath OUTPUT ,@TabName = @TabName OUTPUT ,@CellRange = @CellRange OUTPUT ,@SourceFunction = @SourceFunction OUTPUT ,@UtcOffset = @UtcOffset OUTPUT ,@ColDefItemsDelimited = @ColDefItemsDelimited OUTPUT ,@ResultDefItemsDelimited = @ResultDefItemsDelimited OUTPUT ,@RowDefItemsDelimited = @RowDefItemsDelimited OUTPUT ,@MachineLoginName = @MachineLoginName OUTPUT ,@MachineName = @MachineName OUTPUT ,@Interject_UserID = @Interject_UserID OUTPUT ,@Interject_ClientID = @Interject_ClientID OUTPUT ,@Interject_LoginName = @Interject_LoginName OUTPUT ,@Interject_LoginAuthTypeID = @Interject_LoginAuthTypeID OUTPUT ,@Interject_LoginDateUTC = @Interject_LoginDateUTC OUTPUT ,@Interject_UserRolesDelimited = @Interject_UserRolesDelimited OUTPUT ,@UserContextEncrypted = @UserContextEncrypted OUTPUT ,@Interject_XMLDataToSave = @Interject_XMLDataToSave OUTPUT IF @TestMode = 1 BEGIN SELECT @ExcelVersion as '@ExcelVersion' ,@IdsVersion as '@IdsVersion' ,@FileName as '@FileName' ,@FilePath as '@FilePath ' ,@TabName as '@TabName' ,@CellRange as '@CellRange' ,@SourceFunction as '@SourceFunction' ,@UtcOffset as '@UtcOffset' ,@ColDefItemsDelimited as '@ColDefItemsDelimited' ,@ResultDefItemsDelimited as '@ResultDefItemsDelimited' ,@RowDefItemsDelimited as '@RowDefItemsDelimited' ,@MachineLoginName as '@MachineLoginName' ,@MachineName as '@MachineName' ,@Interject_UserID as '@Interject_UserID' ,@Interject_ClientID as '@Interject_ClientID' ,@Interject_LoginName as '@Interject_LoginName' ,@Interject_LoginAuthTypeID as '@Interject_LoginAuthTypeID' ,@Interject_LoginDateUTC as '@Interject_LoginDateUTC' ,@Interject_UserRolesDelimited as '@Interject_UserRolesDelimited' ,@UserContextEncrypted as '@UserContextEncrypted' ,@Interject_XMLDataToSave as '@Interject_XMLDataToSave' END DECLARE @ErrorMessageToUser as varchar(1000) = '' -- -- PROCESS THE XML DATA INTO TABLE VARIABLE -- varchar(max) is used for the data type by default. Please change for the specific requirement. -- DECLARE @DataToProcess TABLE ( -- the below are system values used internally in this stored procedures [_ExcelRow] INT ,[_MessageToUser] VARCHAR(500) DEFAULT('') -- Below are your columns expected from the spreadsheet that is calling this save stored procedure -- Please change the (max) to the expected length of the text input. If limiting length, be sure to make the size larger than allowed so you can add validation to notify the user ,[CustomerID] NCHAR(5) ,[CompanyName] NVARCHAR(30) ,[ContactName] NVARCHAR(30) ,[ContactTitle] NVARCHAR(30) ,[Phone] NVARCHAR(24) ,[Phone_Int] INT ,[City] NVARCHAR(15) ,[Country] NVARCHAR(15) ,[ToBeDeleted] NVARCHAR(10) ) IF DATALENGTH(@Interject_XMLDataToSave) > 0 BEGIN declare @DataToProcessXML as XML -- Handle conversion of XML text into an XML variable. BEGIN TRY SET @DataToProcessXML = CAST(@Interject_XMLDataToSave as XML) END TRY BEGIN CATCH SET @ErrorMessageToUser = 'Error in Parsing XML from Interject. Error: ' + ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH -- Insert the XML into the table variable for further processing INSERT into @DataToProcess( [_ExcelRow] ,[CustomerID] ,[CompanyName] ,[ContactName] ,[ContactTitle] ,[Phone] ,[City] ,[Country] ,[ToBeDeleted] ) SELECT -- The below row value is always provided by Interject T.c.value('./Row[1]', 'INT') as [_ExcelRow] -- The below columns are provided based on your column definitions in the ReportSave() function ,T.c.value('./CustomerID[1]', 'NCHAR(5)') as [CustomerID] ,T.c.value('./CompanyName[1]', 'NVARCHAR(30)') as [CompanyName] ,T.c.value('./ContactName[1]', 'NVARCHAR(30)') as [ContactName] ,T.c.value('./ContactTitle[1]', 'NVARCHAR(30)') as [ContactTitle] ,T.c.value('./Phone[1]', 'NVARCHAR(24)') as [Phone] ,T.c.value('./City[1]', 'NVARCHAR(15)') as [City] ,T.c.value('./Country[1]', 'NVARCHAR(15)') as [Country] ,T.c.value('./Delete[1]', 'NVARCHAR(10)') as [ToBeDeleted] FROM @DataToProcessXML.nodes('/XMLDataToSave/r') T(c) END -- TestMode is provided so a test save can be executed and all related data can be -- easily viewed for testing while not effecting any data in the database IF @TestMode =1 BEGIN SELECT '@DataToProcess - After XML Processing' as ResultName SELECT * FROM @DataToProcess END -- -- VALIDATION SECTION - Ensure inputs received from Excel are valid -- -- Validate that the details do not have duplicates on the primary key UPDATE m SET [_MessageToUser] = [_MessageToUser] + ', Duplicate key' FROM @DataToProcess m INNER JOIN ( SELECT [CustomerID] FROM @DataToProcess WHERE [CustomerID] <> '' GROUP BY [CustomerID] HAVING COUNT(1) > 1 ) as t ON m.CustomerID = t.CustomerID -- Now check if there were any validation issues in the detail and stop processing if true IF EXISTS(SELECT 1 FROM @DataToProcess WHERE [_MessageToUser] <> '') BEGIN SET @ErrorMessageToUser = 'There were errors in the details of your input. Please review the errors noted in each row.' GOTO FinalResponseToUser END -- -- DATA UPDATE -- BEGIN TRY -- this table variable will log the changes to the target table so it can be used -- to return helpful feedback to the user about how the save action resulted DECLARE @ChangeLog as TABLE ( [_ExcelRow] INT -- will capture the source row that affected the target table ,[UpdateTypeCode] VARCHAR(10) -- Will show UPDATE, INSERT, or DELETE ,[CustomerID] NCHAR(5) ) BEGIN TRAN t1 -- -- set IsDeleted = true for deletions -- UPDATE t SET t.IsDeleted = 1 OUTPUT s.[_ExcelRow] ,'DELETE' ,inserted.CustomerID INTO @ChangeLog ( [_ExcelRow] ,[UpdateTypeCode] ,[CustomerID] ) FROM dbo.Northwind_Customers t INNER JOIN @DataToProcess s ON t.CustomerID = s.CustomerID WHERE LOWER(s.[ToBeDeleted]) = 'yes' AND t.IsDeleted = 0 -- -- set IsDeleted = false for records added back -- UPDATE t SET t.IsDeleted = 0 OUTPUT s.[_ExcelRow] ,'ADDED_BACK' ,inserted.CustomerID INTO @ChangeLog ( [_ExcelRow] ,[UpdateTypeCode] ,[CustomerID] ) FROM dbo.Northwind_Customers t INNER JOIN @DataToProcess s ON t.CustomerID = s.CustomerID WHERE LOWER(s.[ToBeDeleted]) <> 'yes' AND t.IsDeleted = 1 -- -- use MERGE statement that UPDATES and INSERTS in one action -- MERGE dbo.Northwind_Customers t -- t = the target table or view to update USING ( SELECT [_ExcelRow] ,[CustomerID] ,[CompanyName] ,[ContactName] ,[ContactTitle] ,[Phone] ,[City] ,[Country] ,[ToBeDeleted] FROM @DataToProcess ) s -- s = the source data to be used to update the target table -- the join on the column keys is specified below ON s.[CustomerID] = t.[CustomerID] WHEN MATCHED -- Handles the update based on INNER JOIN AND NOT ( -- To ensure only changes are captured s.[CompanyName] = t.[CompanyName] AND s.[ContactName] = t.[ContactName] AND s.[ContactTitle] = t.[ContactTitle] AND s.[Phone] = t.[Phone] AND s.[City] = t.[City] AND s.[Country] = t.[Country] ) THEN UPDATE SET t.[CompanyName] = s.[CompanyName] ,t.[ContactName] = s.[ContactName] ,t.[ContactTitle] = s.[ContactTitle] ,t.[Phone] = s.[Phone] ,t.[City] = s.[City] ,t.[Country] = s.[Country] WHEN NOT MATCHED BY TARGET AND LOWER(s.[ToBeDeleted]) <> 'yes' THEN INSERT ( [CustomerID] ,[CompanyName] ,[ContactName] ,[ContactTitle] ,[Phone] ,[City] ,[Country] ,[IsDeleted] ) VALUES ( [CustomerID] ,[CompanyName] ,[ContactName] ,[ContactTitle] ,[Phone] ,[City] ,[Country] ,0 ) -- the output captures the changes to the table and logs to a table variable OUTPUT isnull(inserted.[CustomerID],deleted.[CustomerID]) -- include deleted in case delete is added later. Inserted is used for both Update an Insert ,s.[_ExcelRow] ,$action as UpdateTypeCode -- this logs into an a change log table variable INTO @ChangeLog ( [CustomerID] ,[_ExcelRow] ,[UpdateTypeCode] ); IF @TestMode = 1 BEGIN SELECT * FROM dbo.Northwind_Customers where CompanyName LIKE '%Market%' END --now we have enough information to update the message to user for each row UPDATE dtp SET [_MessageToUser] = CASE cl.UpdateTypeCode WHEN 'ADDED_BACK' THEN ', Added!' WHEN 'DELETE' THEN ', Deleted!' WHEN 'UPDATE' THEN ', Updated!' WHEN 'INSERT' THEN ', Inserted!' --ELSE ', No change' -- not used in this example END FROM @DataToProcess dtp INNER JOIN @ChangeLog cl -- use Left Join if 'No Change' is to be identified ON dtp.[_ExcelRow] = cl.[_ExcelRow] IF @TestMode = 1 BEGIN SELECT '@ChangeLog- Show log of changes made' as ResultName select * from @ChangeLog ROLLBACK TRAN t1 -- note this does not roll back changes to table variables, only real tables SELECT 'Changes rolled back since in TEST mode!' as TestModeNote END ELSE BEGIN COMMIT TRAN t1 END END TRY BEGIN CATCH IF @@TRANCOUNT > 0 ROLLBACK TRAN t1 SET @ErrorMessageToUser = ERROR_MESSAGE() GOTO FinalResponseToUser END CATCH FinalResponseToUser: -- -- PROVIDE RESPONSE TO THE SAVE ACTION -- -- if test mode, show the final table IF @TestMode = 1 BEGIN SELECT '@DataToProcess - After Validation' as ResultName SELECT * FROM @DataToProcess END -- return the recordset results back to the spreadsheet, if needed. SELECT [_ExcelRow] as [Row] -- this relates to the original row of the spreadsheet the data came from ,SUBSTRING([_MessageToUser],3,1000) as [MessageToUser] -- This is a field that, if it matches a column in the Results Range, will be placed in that column for the specified row FROM @DataToProcess -- if there is an error, raise error and Interject will catch and present to the user. -- Note that this is specifically done after the above resultset is returned, since initiating an error before -- will not allow a result set to be returned to provide feedback on each row IF @ErrorMessageToUser <> '' BEGIN -- by adding 'UserNotice:' as a prefix to the message, Interject will not consider it a unhandled error -- and will present the error to the user in a message box. SET @ErrorMessageToUser = 'UserNotice:' + @ErrorMessageToUser RAISERROR (@ErrorMessageToUser, 18, -- Severity, 1) -- State) RETURN END Testing the Stored Procedure Interject provides a convenient way to get SQL code that will test your SP right from within the Excel report. First select the cell in the Excel report containing the ReportSave function. Then on the Advanced Menu, click on \"View SQL Test For ActiveCell\" on the \"System\" dropdown: Copy the test code to the clipboard: Paste the code into a new query and be sure to add the \"@TestMode = 1\" parameter to print out additional information about the SP process: Make some changes to the data: After execution, you should see the messages showing what was changed: Testing the ReportSave The only thing left to do is test the SP by running the ReportSave function within the Excel report. Next make some changes and run the Report Save: Notice the results!: "},{"title":"Develop: Categories Pull and Save","url":"/wGetStarted/L-Dev-NorthwindPullSave.html","content":" Overview This example will focus on how to create an Excel tool to be able to pull the data out of a Northwind Categories table into an Excel tab as well as to be able to add, edit, or delete categories to this table. Below you will find the list of requirements you will need to fulfill to have a minimal, fully-functioning data sheet using the Interject Add-in. Note: This example uses Microsoft's Northwind Database. You can download this database here or you can use this example as a guide for your own data source. NorthwindCategories SQL Table For the purposes of this example and learning how to work with an integer column, please add the TotalStock int column to the NorthwindCategories table. General Requirements Step 1: A data connection and at least two Data Portals (one for pulling and the other for saving) https://portal.gointerject.com/. Step 2: A simple table in the connected database. Step 3: A simple datasheet that: Should be formatted with column definitions, formatting ranges, formulas, etc. at the top Should have a title Can have a field or fields for entering filters for your pulls Should have table header names for each field pulled from the database, e.g. [CategoryID] [CategoryName] [TotalStock] [Description] Should have a field for getting output results from the save procedure (e.g. [MessageToUser]) Data should be populated using one or more Report() functions Step 4: A stored procedure for pulling data from the table: Should at least have Interject_RequestContext as an input parameter Returns a table column required for testing in data sheet (e.g. name, stock, description) Step 5: A stored procedure for saving data to the table: Parameters Interject_RequestContext should be a parameter to get information from the sheet. The RequestContext Parser helper procedure should unpack context values for you @CategoryName is used if data sheet has a filter for query result @HeaderMessage is used as a way to give confirmation that a delete was successful or generally when changes are pushed successfully to the database Should execute RequestContext parser to obtain data from the sheet calling the procedure Information obtain should be stored in a temporary table variable (@DataToProcess) to help process and validate the information from RequestContext before updating the actual table itself Validation. You need to check every single input in the context by checking each value in the column, e.g. Make sure that new entries have [CategoryID] and [CategoryName] that are unique and have no duplicates and that [CategoryID] and [CategoryName] cannot be empty Existing rows cannot have their [CategoryID] be modified [TotalStock] should be a completely valid INTEGER and cannot be less than 0. [CategoryName], [Description], etc. cannot exceed a specified amount of characters Debugging If there were any issues found during the validation procedure, the execution of the stored procedure should be halted and redirected to code that handles the return of all the errors found in each row back to the sheet (e.g. attach the error message on each row in @DataToProcess which contains any errors for that row and return that table instead) @HeaderMessage should be used to confirm any updates made to the table after validation is passed Specific Requirements Step 1: Adding general comments in unused cells is very helpful at telling the user what can and cannot be done in the sheet without the having them do guesswork. Step 2: Configure jFreezePanes() such that the Interject header rows and the primary key columns are hidden away from the user’s view. Step 3: Use GETUTCDATE() and @UtcOffset (obtained from RequestContext) to return error/debug messages that are relative to the user’s time. Step 4: In the sheet, the last row of RowDefRange (for ReportSave()) and TargetRange (for ReportRange()) should be the same. It should have a line that has “End of list” or something similar. This will be important for when parsing through the request context in the code. Step 5: There should be thorough validation done on each input received by the save stored procedure. Any validation issue found should have the code short-circuit to code that returns all the errors/updates for each row and if errors exist, an error using “UserNotice” should be returned. [CategoryID] Must be unique The user SHOULD NOT be able to modify the ID, but this step is necessary to ensure no pre-existing entries in the database are being overwritten [CategoryName] Must be unique Cannot be empty Cannot exceed a certain amount of characters If there is a filter applied in the sheet and the user tries to add an entry that already exists (but the filter hides the pre-existing item), there should be an error message returned. A unique value for each CategoryName is important as it is used in several joining operations [TotalStock] This value is pulled in as a VARCHAR since there is no guarantee as to what the user enters in the datasheet is valid. But regardless, you should make sure that this value is a valid integer This value cannot be negative, cannot be a decimal/float number, cannot be alphanumeric, empty, etc. [Description] Can be empty Cannot exceed a certain amount of characters Step 6: Important; for delete capabilities in the save procedure to happen, make it so that any Category from the table that is not listed in the context will be deleted from the table. This deletion should happen when a row in @DataToProcess is not matched When a deletion occurs, make sure it is accounted for in the return message back to the user Step 7: Alternatively, you can add another column called [Delete?] which holds a flag that determines whether the matched row should be removed from the table. Step 8: Important: for adding capabilities, it is important that you run several checks on columns that should be unique. Step 9: If a user accidentally tries to add a duplicate Category while in a filtered view, make sure to return an error. Not doing this could result in overwriting preexisting rows. Step 10: When adding/updating/deleting items in the datasheet, make sure that CategoryName is used as RowDefRange when calling the save stored procedure. "},{"title":"Develop: jDropdown","url":"/wGetStarted/L-Dev-jDropdowns.html","content":" Overview If you are looking to build custom jDropdown stored procedures for your reports, then this example will walk you through just that. But first, remember that a jDropdown formula often requires a separate stored procedure from the one used by a data pull or save. You will walk through how to build the Data Connection, Data Portal, and stored procedure for the jDropdown example built on the Customer Aging report. This stored procedure is designed to filter down on the specific options for a parameter. Include all the columns that can be used as filter values in the report. Note: It is required that you have access to build stored procedures in your database to complete this example. Setting up the Data Connection Step 1: Navigate to https://portal.gointerject.com and log in. Set up a data connection by clicking the Data Connections icon. Step 2: On the Data Connections page, click the New Connection button. Step 3: In the Connection Type field, verify that Database is selected. Step 4: The Connection Details page needs to contain the following information for the new connection: Type NorthwindExampleDB_MyName in Connection Name, but include your own name in the suffix. Each connection name must be unique. For the connection string, type Server=myServerAddress;Database=myDataBase;Trusted_Connection=True;. This example is using Windows authentication, so username and password are not required. Make sure the server name and database name match the ones you are using for this walkthrough. Step 5: In the Description field, include details about how the data connection will be used. Step 6: Click the Save button to create the new data connection. The Database Data Connection is now ready to be used in a Data Portal. You should always test a new connection with your security context. Follow the steps in the Data Connections walkthrough to test your connection string. Setting up the Data Portal Step 1: To add a new Data Portal, return to https://portal.gointerject.com and select Data Portals from the sidebar menu. Step 2: Click New Data Portal. Step 3: Type NorthwindCustomersDropdown_MyName for the Data Portal Code. Since this field must be unique, add your name to the suffix. Select the connection that was made in the previous step, NorthwindExampleDB_MyName. Also enter a name for the stored procedure [demo].[Northwind_CustomerDropdown], which will be created later. Step 4: Click Create Data Portal to save the new data portal. Additional options for adding parameters will show after selecting the Create Data Portal button. Step 5: To add your first formula parameter, click Click here to add a Formula Parameter. For this parameter, enter Filter for Name, varchar for Type, and input for Direction to input, as shown below. Creating the Stored Procedure Open up a text editor of your choice. This example will use SSMS to execute the code, but again, you can use whichever you prefer. You will be creating this stored procedure on the database you created the data connection for. Create a stored procedure called [demo].[Northwind_CustomerDropdown] using the following code example. Northwind_CustomerDropdown CREATE PROCEDURE [demo].[Northwind_CustomerDropdown] @Filter varchar(255) = '' AS -- Customer Search SELECT [CustomerID] ,[CompanyName] ,([CustomerID]+' - '+[CompanyName]) AS [DisplayText] FROM [demo].[Northwind_Customers] WHERE (@Filter = '' OR CompanyName LIKE '%' + @Filter + '%') OR (@Filter = '' OR CustomerID LIKE '%' + @Filter + '%') ORDER BY [DisplayText] -- Contact Search SELECT [ContactName] ,[ContactTitle] ,([ContactName]+' - '+[ContactTitle]) AS [DisplayText] FROM [Demo].[Northwind_Customers] WHERE (@Filter = '' OR ContactName LIKE '%' + @Filter + '%') OR (@Filter = '' OR ContactTitle LIKE '%' + @Filter + '%') ORDER BY [DisplayText] -- Customer ID SELECT [CustomerID] ,[CompanyName] ,([CustomerID]+' - '+[CompanyName]) AS [DisplayText] FROM [Demo].[Northwind_Customers] WHERE (@Filter = '' OR ContactName LIKE '%' + @Filter + '%') OR (@Filter = '' OR CustomerID LIKE '%' + @Filter + '%') ORDER BY [DisplayText] GO Stored procedures are natively supported by Interject. There are a few key areas to note in the code example that help illustrate Interject features: Parameters: The parameters included in the stored procedure are the same as those added to the Data Portal in a previous walkthrough. On each request, Interject passes the Formula Parameters values from the spreadsheet configuration to the stored procedure along with System Parameters. Output parameters that can populate values in the spreadsheet are supported, but they are not included in this example. In this case, there is only one formula parameter. Select statements: Returning data to Interject uses a select statement. More than one can be returned at a time to reduce the connections needed to fully populate a complex report. Testing the Stored Procedure It is important to test the stored procedure in the database before testing through the Interject platform. The example code includes a test SQL statement that can be executed in a new query, as shown below. Be sure to change the procedure name to match your own. Example Test Script EXEC [demo].[Northwind_CustomerDropdown] @Filter = 'Market' When executed, you should see the following result sets. Notice there are three different result sets. Each of them returns only values that contained the word Market. To see an example of how to set up a jDropdown within Excel, see Create: Building jDropdowns. "},{"title":"Drill: Customer Aging Report","url":"/wGetStarted/L-Drill-CustomerAging.html","content":" Overview In this example, you will be setting up a simple drill to the customer orders history. It is a great use case for creating your first drill. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 4 Drilling To Data > Lab 4.1 Customer Aging. Unfreezing the Excel Sheet Step 1: You begin with a special version of the Customer Collections Report that has the drill removed. Step 2: Unfreeze the panes. Go to the View tab, find the Freeze Pane option, and select Unfreeze Panes. Step 3: When you scroll up to rows 7 through 9, you will see where this file was set up to have 3 ReportDrill() functions. This is where you will create your first drill formula for this example. Build the Drill Step 1: To begin, select cell C7 and type =ReportDrill(). Then click the _fx _ button to bring up the Function Wizard. Step 2: Now select the ReportCellToRun argument and type in CustomerOrderHistory!C10 . This is the cell location of the Report Formula in the target report that you will be drilling to. In the screenshot below, you can see the specific cell you are drilling to in the CustomerOrderHistory tab. You are going to skip the ReportCodeToRun argument, since that is used only when drilling to a separate workbook from the Report Library. Step 3: Next, we will use the TransferPairs argument to note which cell values in the source worksheet will be transferred to the target worksheet during the drill operation. To do this we use special functions to pair the source cells to the target cells. Type PairGroup(Pair()) in the TransferPairs argument to get it started. You will return to add more to this argument. Step 4: Then you will specify the name for the drill. In this case you will type \"Drill to Customer Order History\". Step 5: Complete the TransferPairs argument. In the Formula Bar, click inside the word Pair() within the text PairGroup(Pair()). See the illustration below. Once this is done, the Function Wizard will automatically change to help with the Pair() function. Type B22:B24 in the From argument. This is the column where the CustomerID is going to be presented in the source report. By noting a range from row 22 to 24 in column B, Interject will expand that range to the data presented in this source report. Step 6: Select the Target input field and navigate to the CustomerOrderHistory tab, where you will choose which cell you want to receive the value. In this case you want C23. Excel should automatically fill in the argument with the text CustomerOrderHistory!C23 . Click OK to finish updating the function, and it will automatically go back to the source worksheet. Step 7: Now that you have created the drill, you can use Pull Data to bring in the customers to the source worksheet. Below is when the data is pulled. Final Results Step 1: To demonstrate the new drill, click on one of the customer rows and select Drill on Data. Click on the button Do Drill and Interject will navigate to the target worksheet, bring in the CustomerID selected by the filter, then run the report. The screenshot below should resemble the result. You completed the drill. You can return to the source worksheet, Customer Aging , and re-freeze the panes, clear the report, and save it. Now it is ready to be published to the users. Finally, clear the reports, refreeze the panes, and upload it to the Report Library. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Drill: Drilling to a Separate Workbook","url":"/wGetStarted/L-Drill-DrillCodes.html","content":" Overview Interject makes it easy to set up the report drill feature discussed in the section Drilling Between Reports. Interject also gives its users the flexibility in drilling data not only to a different sheet within Excel but a separate workbook altogether. Interject achieves this functionality by the use of Data Drill Codes that are set up in the Report Library. Drill Codes are needed when a drill needs to go to a separate workbook, and that workbook is saved in the Report Library. You can add Drill Codes to a report by adding them to the Report Link Details window, as seen below. The Drill Codes must be unique to others that were saved prior. A report can have up to three drill codes, each pointing to different worksheet tabs. More are allowed, but you must contact Interject for assistance. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 4 Drilling To Data > Lab 4.4 Drilling to a Separate Workbook. Opening the Report and Drilling For this walkthrough, you will be using the same report you setup the original drill for in Drill: Customer Aging Report. To get a sense of the original drill again, you will perform a drill to a different sheet within the same report. Step 1: Begin by opening the Report Library and opening the report Interject Customer Collections. Step 2: Enter Market for the Company Name and Pull Data. Step 3: Next select the Bottom-Dollar Markets and click Drill on Data. Select Drill to Aging Detail and then Do Drill. The drill is completed and generates the report in the CustomerAgingDetail sheet. Clear the data and switch back to the CustomerAging sheet. Uploading the Report With a Drill Code In order to drill to a separate workbook, you must first upload the targeted workbook to the Report Library. For instructions on how to upload a report, see Report Library Links. Step 1: Begin by first saving the report locally (be sure to use a different name than the original). Next open the Report Library up and select the My Favorites folder. Step 2: Right click in the Report Links section and click Save Current Workbook and then Create New Link. Step 3: In the Create New Link form, enter the following details: Link Name: TargetReportForDrill Status: Live Data Drill Code: TargetDataDrillCode Target Tab Name: CustomerAgingDetail Report Cell: <Leave blank to run the whole sheet> The Data Drill Code is a unique code that will \"point\" to this workbook in the Report Library. When a ReportDrill function is set up with this code, Interject will open the corresponding workbook in the Library with the same code. The Target Tab tells Interject to open the workbook to this tab. If a cell reference is listed in Report Cell, it will run the Interject function found there. If this field is left blank, it will simply run the entire sheet. Close the file before proceeding to the next section. Adding the Drill Code to the ReportDrill Function In this section you will open up the original report and edit it so that it can drill to the report you just uploaded using the Drill Code. Step 1: Open up the original Interject Customer Collections report again via the Report Library as you did in the beginning. Step 2: You will need to access the configuration section of the report. Begin by unfreezing the panes by selecting PANES: Freeze/Unfreeze Panes from the Quick Tools menu. Step 3: Select the cell that contains the ReportDrill function for the Customer Aging Detail and click the fx button to edit the function. Step 4: For the ReportCodeToRun enter TargetDataDrillCode. Running the Drill All there is left to do is run the drill! Select the Bottom-Dollar Markets and click Drill on Data. Click OK. Select Drill to Aging Detail and then Do Drill. This time notice a separate workbook, the one you uploaded, is opened and the drill performed! "},{"title":"Drill: Financial Report","url":"/wGetStarted/L-Drill-FinancialReport.html","content":" Overview For this drill example you will use the PL Trend report that was previously featured in the Financial Report - Walkthrough. For this example, you will set up a ReportDrill function to drill to a separate workbook. This can be very useful when there is a common report, such as one that shows general ledger detail, that can be used as a drill from several different reports and workbooks. You will be viewing that same example with the JE (Journal Entry) Query drill report. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 4 Drilling To Data > Lab 4.3 Financial Report. Opening the Report For this example you will be using the PL trend report found in the Interject Financials subscriptions. Unfreezing the Report To unfreeze the panels, click on Quick Tools from the Interject tab. Then select PANES: Freeze/Unfreeze Panes and click Run and Close. Set Up the Report If you scroll up, you will find that there are already drills set up in this report. You will delete these drills in order to gain the experience of setting this drill up manually. Clear the drills and delete row 18. Next, type in 7002 for the location in M21. And type 2002-05 for the month in cell M22. Building the Drill Now you will begin to set up the drill. Step 1: In cell G17, type =ReportDrill(). Column G is fairly narrow, but it will simply overlap the cells to the right. Then click the fx button as illustrated below to bring up the Function Wizard. Step 2: In previous drill exercises you have used the ReportCellToRun argument. That is only for drilling within the same workbook. In this example you are drilling to a separate workbook. Type Interject_JEQuery into the ReportCodeToRun argument as seen below. Interject uses drill codes to run drills in a separate workbook. For convenience, this drill code has already been set up in the Report Library report. You will learn how to setup a Drill Code in the next drill exercise. Step 3: Next you will use the TransferPairs argument to note which cell values in the source worksheet will be transferred to the target worksheet during the drill operation. To do this, use special functions to pair the source cells to the target cells. Type PairGroup(Pair()) in the TransferPairs argument to get it started. You will return to add more to this argument. Step 4: In the Formula Bar, click within the word Pair() inside the text PairGroup(Pair()) . See the illustration below. Once this is done, the Function Wizard will automatically change to help with the Pair() function. Type L12:N12 in the From argument. This is the row that will indicate which month the user was on when the drill was activated and it will pass it to the target worksheet. Step 5: Now, type DateBegin in the Target argument to establish the target cell that will receive the month. DateBegin is a Named Range in the target sheet. Named Ranges are used in MS Excel to assign a name to a specific cell, such as G15. You use Named Ranges in your drill in case rows or columns are changed in the target worksheet where the address of the target cell changes. By using Named Ranges, the drill will continue to find the correct cell to place the month into. Step 6: Now, type True in the RequireValue argument because the From value must exist to trigger the drill. There would be no point in drilling to the target report without filtering for a specific month. The True value is not required since, if left blank, True is assumed. Since this drill exercise will have other Pairs() that are not required, it is good practice to specify it explicitly in this case. Note the next argument, ScopeRange, is not used. It is an outdated argument. Step 7: Now that you understand how to define a Pair, you have many more to create. The target report has several filters that make use easier when employed separately and in drilling to the report. You need to add a few more values to pass to the new report and clear the remaining filters that are not used in this drill. This is a key concept for Interject drills. A report can be used by itself for its own purpose, but it can also be used as a drill from other reports. Now let's use the Function Wizard to edit the PairGroup() function by clicking on it in the Formula Bar as seen below. This will make it easier to create more Pairs() that will clear out the other filters in the target report. Step 8: You have two more values to pass, the Location and the Account. Type Pair(M21,\"Segment2\",TRUE) into Pair2, which will pass the Location into the next report, and type Pair(F26:F125,\"Segment1\",TRUE) into Pair3, which will pass the Account or Account Group into the next report. Note: Excel is picky about Quotation marks so please ensure all your formulas have Straight Quotation marks (instead of Smart Quotation marks) in order for the formulas to work. Step 9: You need to make sure the other filters in the target report do not interfere with the drill, so you will set this next group of Pair() functions to bring over blank values. In the Pair() functions you are going to set the From arguments to blank (\"\"), and you will make the RequireValue argument FALSE . Both steps 9 and 10 are adding Pair functions that clear out the unused filters. This is best practice, but steps 9 and 10 can be skipped since it will not impact the limited scope of this exercise. Enter the following pairs as shown below: Pair(\"\",\"DateEnd\",FALSE) into Pair4 Pair(\"\",\"Segment3\",FALSE) into Pair5 Pair(\"\",\"Segment4\",FALSE) into Pair6 Pair(\"\",\"AccountDesc\",FALSE) Into Pair7 Pair(\"\",\"TypeDesc\",FALSE) Into Pair8 Step 10: There are still more filters to blank out for the target report. Continuing typing the following. Pair(\"All\",\"Posting\",FALSE) into Pair9 Pair(\"\",\"VendorCode\",FALSE) into Pair10 Pair(\"\",\"AmountFrom\",FALSE) into Pair11 Pair(\"\",\"AmountTo\",FALSE) into Pair12 Pair(\"\",\"Organization\",FALSE) into Pair13 There are two more pairs to enter. Scroll down and type: Pair(\"\",\"Company\",FALSE) into Pair 14 Pair(\"\",\"FullAccount\",FALSE) into Pair 15. After these, you are through adding the Pair() functions. Step 11: You need to name the drill so it is clear for the users. Click on G17 and select the fx to bring up the Function Wizard. Input Drill To JEQuery - Account into the DrillName and select OK to finish creating the drill. When you click away from TransferPairs, it shows a red #NAME? to the right of the input area. That looks like an error, but it is simply a small bug in Microsoft Excel, which will hopefully be addressed. Step 12: You successfully created a Drill to the Journal Entry Query report from the financial report. Executing the Drill Step 1: Use Pull Data to pull the report. You can leave the panes open for the moment. They will not affect the drill feature. Step 2: Scroll down to the Revenue - Sales row on line 32 and click the plus sign so it expands to show the accounts. There should be several accounts listed as shown below. Step 3: Click the amount $20,900 which is for account 32000 in May 2005. You can then use the keystroke Ctrl + Shift + K or use the Drill on Data menu item to bring up the drill options. Notice that if you close the drill window and try to drill on column O, there will not be any drill options. The work you did above helped set the scope so the drill only works on the appropriate cells. Step 3: The animated GIF below shows the drill completed. The panes are frozen again. The drill selects the amount for account 33000 for March 2002, then does the drill on amount $44,474. The JE Query report provides the detail to support the same amount. "},{"title":"Drill: Inventory Report","url":"/wGetStarted/L-Drill-InventoryReport.html","content":" Overview In this example, you will view drilling between reports using the same Inventory reports created during the Real World Inventory Walkthrough. You will set up a drill from the Inventory by Category tab to the Inventory by Detail tab of the workbook. You will also set up a hyperlink so the drill can be more intuitive to users. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 4 Drilling To Data > Lab 4.2 Inventory Report. Unfreezing the Report Step 1: First, open the Inventory Report Template. This file has been prepared specifically for this exercise. Once opened, it should look like the screenshot below. Step 2: Now unfreeze the panes to access the report formulas. Setting up the Drill Step 1: Type =ReportDrill() into cell C5. Then, click the fx button to bring up the Function Wizard. Step 2: Now type InventoryByDetail!C4 into the ReportCellToRun argument to specify the range you want to navigate to. You will be skipping the ReportCodeToRun argument since that is only used for drilling to other workbooks in the Report Library. Step 3: Next use the TransferPairs argument to note which cell values in the source worksheet will be transferred to the target worksheet during the drill operation. To do this, use special functions to pair the source cells to the target cells. Type PairGroup(Pair()) in the TransferPairs argument to get it started. Step 4: In the Formula Bar, click within the word Pair() inside the text PairGroup(Pair()) while the Function Wizard is open. See the illustration below. Once this is done, the Function Wizard will automatically change to help with the Pair() function. Type B15:B23 in the From argument as shown below. Column B is where the CustomerID will be shown in the source report. By noting a range from row 15 to 23 in column B, Interject will expand that range to the data that is presented in this source report. Step 5: Next, select the Target argument and navigate to the InventoryByDetail tab. You want to place the CustomerID in cell E11 during the drill operation. Excel will fill in the formula automatically based on where you click. Click OK to finish updating the function and it will take you back to the source report. After pressing OK, the report formula should look as it does in the image below. Creating Hyperlinks as Drills Step 1: Now you are going to create hyperlinks for the drill. First, highlight the cells you want to setup the hyperlink, then right click and choose Link. In some versions of Excel it will show as Hyperlink. Note: Each drill will need to be linked individually, not all at once. If they are linked all at once then the drills will not work as it will drill everything at once, rather than one at a time. Step 2: In the Hyperlink pop-up window, you will select Place in This Document. Then select ScreenTip, type Interject Drill, and press OK. Although this technically sets up a hyperlink to cell A1 in the same tab, Interject will override the event so the Interject drill will activate. After you select OK, select on each of the remaining cells one by one and press CTL-Y to apply the last used action (in this case applying the link). Then the cells will be linked to the drill, as shown below. When the panes are refrozen, the report should look like the image below. Step 3: Pull Data to see data for each category you just linked. Here, you have the report pulled and are ready to go. Step 4: Now that you have the data, and can click the hyperlink. As shown in the animated GIF below, click on Totals for Grains/Cereals and Interject will drill to the detail of that category in the target worksheet. Hyperlinks only show the Drill window when there is more than one drill option setup. In this case, you only setup one drill and it goes there automatically. Hyperlinking Drills is a simple way to make Interject reports faster and more user-friendly. Click here for the Financial Report Drill walkthrough. "},{"title":"The Three Ways to Drill","url":"/wGetStarted/L-Drill-TheThreeWays.html","content":" Overview Interject facilitates three different ways to drill. Each method is easy to choose the best one different situations. The Menu Method The Drill on Data menu item is available in every report containing a drill function. For this example, you will drill using the Customer Aging demo. There are four steps to using the menu. First, select the cell to drill on. In this example you will chose theSave-a-lot Markets customer's 90 days balance. Select the Drill on Data menu in the Interject ribbon. Select the drill option in the Data Drill window. In this example, chose Drill to Aging Detail. Complete the drill by clicking Do Drill. This automatically takes you to the desired destination and usually pulls the data as well. The Hyperlink Method The hyperlink drill method is another option. It is one of the simplest ways for a user to drill in Interject and makes it intuitive for the user to know where drills are available. For this example, you will drill using the Inventory Reports Demo seen below. By clicking the hyperlink cell, it will automatically trigger the Interject drill. Since there is only one drill option, the Data Drill window will not appear as in previously shown examples. If multiple drill options are present, the Data Drill window will appear so the user can select which drill option to use. The animated GIF below illustrates how the hyperlink drill works in Interject. It is that simple. To know how to set up a hyperlink drill for one of the reports, click here to see how it was set up in the example above. The Double Click Method The double click method is similar to the hyperlink method in that it reduces the number of button clicks. But there is a configuration step to activate it for a workbook. For this example, you will be using the Customer Aging Summary to do the drill. The animated GIF below illustrates how the double click method works. The user simply double clicks on the cell to drill on and the Data Drill window appears. In this example, there are multiple drill options so the Data Drill window appears to let the user choose which to use. If only one drill option was available, Interject would have went directly to the target. Again, you should see the target report as shown below. To enable a workbook with the double click method, the custom properties of the Excel workbook must include a property Interject_DoubleClick, and it must be set to True. On the file menu: Click Info Click Properties Click Advanced Properties Click the Custom tab Enter Interject_DoubleClick for the Name Enter True for the Value Click Add For more on how to update custom properties, refer to the following link: https://support.office.com/en-us/article/View-or-change-the-properties-for-an-Office-file-21D604C2-481E-4379-8E54-1DD4622C6B75 "},{"title":"Export: Advanced Distribution","url":"/wGetStarted/L-Export-AdvancedDist.html","content":" Overview There are a number of different options available for distributing reports as well as naming workbooks and individual sheets. In this example, you are going to explore some of the more advanced methods. If you are following the Training Labs, this report file is continued from the previous lab: Training Labs > Lab 7 Exporting Data > Lab 7.2 Basic Distribution. Custom Tab Renaming Step 1: You will add [Location] as a prefix and suffix for the Worksheet Tab names. Type [Location]_ in cell G15 and [Location]_ in H16. The underscore _ was added to the text to allow a spacer between the original tab name and the location value. The end result is that the tab names will be modified as they are created so they match the location they represent. Prefixes and suffixes can use the values in Report Filter columns so they do not have to be manually typed. In addition, you can use values that are set up in Global Variable Definitions, which will be covered later. Step 2: You can also type prefixes or suffixes manually, which is shown below. Enter Loc_7120_ in cell G17. When the distribution is executed, the tabs should look like the image below. Step 3: You can also change the tab name itself, not just add a prefix and suffix. To do this, go back to the distribution worksheet and clear the tab names prefix and suffix. Once you clear the Tab Names columns, it should look like the image below. Step 4: Add more practical tab names using a prefix of location that uses a hyphen as a spacer. Type [Location]- in cells G15, G16 and G17. To rename the original tab name, you need to go to the Worksheet Tabs column. At the end of the name in each of the rows 15 through 17, [Rename:PL]. This will tell the distribution process to rename the original tab name to PL. The resulting distribution looks like this: Step 5: If you want to add the month to the tab names, you can use the Add Suffix column. Type -[Month] in cells H15, H16 and H17 as shown below. When you are finished, the distribution should appear like this: Replacing Keywords Dynamically The distribution process allows for global variables that can be used in defining the distribution. Keywords can dynamically alter the names and locations used by the distribution process. This allows for quick report maintenance and also for assigning values easily from one cell change. As you can see in the Global Variable Definitions, you defined [YYYY-MM] with the value 2002-06. You will use that to define the Month filter column so next month you can run reports for June by changing only one cell, E36. The resulting distribution looks the same, but now it requires less maintenance. Export Target Options The distribution process allows a wide range of export options. The screenshots below show the drop-down that lists all current options. These are described in the following table. Output Purpose Excel Saves the Excel file and has the option to rename it. Values Only Removes DataCell formulas from the report, saves the Excel file, and has options to rename it, open it, and email it. PDF Saves the Excel file as a PDF and has the option to open it immediately, give it a custom name, or email to designated recipients. Email Emails the Excel file to designated recipients and has the option to rename it Print Prints the Excel file to a designated printer or the default printer. Open Opens the Excel file. Distributing Multiple Sheets Sometimes you may want include more than one worksheet in each line of the distribution, and it can be easily done by separating additional tab names with a comma. Step 1: To do this, navigate back to the distribution and type BalanceSheet after ProfitAndLoss, as shown below. The resulting distribution looks like this: Specializing Reports Using Multiple Builds Each workbook Build of the distribution process results in a separate workbook. For example, you can create one report for a business director, one for a regional manager, and another for a location manager. The director needs to see all districts, the regional manager needs specific districts, and the location manager needs just one location. This is easily accomplished by creating a different Build with slightly different parameters for each scenario. In the example below, you are creating a simple workbook for the Profit and Loss reports and a separate one for the Balance Sheets. The first workbook looks like this: And the second workbook looks like this: Building Distribution Reports Without Pulling Data In the previous examples of building a distribution report, the data was systematically pulled for each report after the creation of the report. This section covers how to turn off the automatic pulling of data. Step 1: Select Cell D15, D16 and D17 then open the dropdown menu for each and select the Prep option for each cell. Step 2: Input ProfitAndLoss into cells E16 and E17. Step 3: In Cells J15, J16, and J17 insert 7001, 7002, 7120 respectively. Step 4: Open the Export Book form in the Interject Ribbon then select Run Distribution. Now you can see that the reports were built, but no data was pulled automatically for the specified reports. Grouping Segments In the distribution examples above, each location is entered on a separate row. Using the Grouping Segments feature, the distribution process will automatically add new tabs in the new workbook for every item in a group. To use this feature, the groups must be configured first. In the following example, you are using the group Consol which is setup to include locations 7001, 7002, and 7120. Step 1: In the below example you will use the filter: [AddTabsFor]:Consol, under the Location column. Step 2: In order to iterate through each location of the group Consol, you need to change the filter name to the name of the segment. In the demo setup, this was named Segment, but it would normally be named Location. Due to the demo setup, you must change the filter name to Segment2 as shown below. Step 3: Now you will go back to the PL Trend tab and change the Location to Consol. Next select O26 and change the jRangeTag() from Location to Segment2. Use of the Range Tab function was discussed in the Basic Distribution example. Step 4: You can also put Segment2 in the prefix or suffix columns to dynamically create the tab names for more organization. Step 5: All settings are now contained in one line. When this distribution is run, the values for the group Consol are retrieved and used in generating new tabs. Run the distribution to see how it looks. As you can see, with only one distribution row, you created a tab for each Location in the grouping, and each tab was named with the location so that you can quickly see which tab has which information. "},{"title":"Export: Basic Distribution","url":"/wGetStarted/L-Export-BasicDist.html","content":" Overview The distribution process provides extensive control when creating and distributing reports. You can create one or more report workbooks and choose which worksheet tabs to include, create copies by iterating through different filters, and choose export targets like File Location, Email, Print, PDF, etc. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 7 Exporting Data > Lab 7.2 Basic Distribution. Create a Distribution From an Existing Report Step 1: First you are going to open a report. The example for this walkthrough will use the same PL Trend Report seen in the Financial walkthrough example. Step 2: When creating a distribution, you are normally taking a worksheet and making a copy for different cost centers. To accomplish this, you need to mark which filter will change for each copy. Do this by adding a Range Tag formula. Type =jRangeTag() into cell O22 and hit the fx button. It does not matter where you place this formula since it will be removed automatically as the worksheet is used to create the distribution. Step 3: The Function Wizard will open. You want to change the Location filter for each worksheet copy, so type Location in the Tag argument. For the Range argument, select cell M22, the Location filter, as shown below. Step 4: You need to add a Range Tag for the month as well. In cell O27, type another jRangeTag() formula and click the fx button. Step 5: With the Function Wizard window open, enter Month for the Tag argument and M23 into the Range argument. This will allow us to change the month within the distribution setup. Once this is completed, the Range Tag formulas should summarize what was setup as seen in the screenshot below. Step 6: Now it is time to create the Distribution worksheet that generates the distribution. You can create this by using the Export Book menu item in the Interject ribbon. The Export and Distribution window will appear and click Create Distribution Sheet. Interject will create the Distribution worksheet in the existing workbook and will search for existing Range Tag formulas in the workbook. The screenshot below illustrates the typical defaults that will be used when initially created. The Book column should default to 1, noting the first workbook build to be created. More can be added if needed to the same distribution sheet. The worksheet names for those that have Range Tag formulas should be added to the Tab Selection columns by default. A filter is created for each jRangeTag found in the workbook in the Report Filters columns. Note: The Enabled? column contains a drop down list of options that can be applied to the tabs, on an individual basis, which are being created. Blank - When the enabled column is set to blank, Interject interprets this as a Yes value and automatically pulls the data after the report is created. Yes - When this column value is set to Yes then distribution report builder will automatically create the reports And pull the data. No - In the instance that the value is set to No, Interject will not build that report tab. Prep - When set to Prep the report tabs will be built out, however, the data will not be pulled automatically. Step 7: Edit the distribution defaults further. In this example, you want to create three copies of the ProfitAndLoss worksheet, one for each location 7001, 7002, and 7120. And you want to use the month 2002-05. Use the screenshot below as a guide, and type in the values for columns Book, Worksheet Tabs, Location, and Month. Step 8: You are ready to create a new workbook of reports, but first you need a destination for this distribution. There are many options for the Distribution Target (open, save, print, email, etc.). In this example, you will use the default, Open, which creates a new workbook without saving. Each output has it's own purpose and use. Each is detailed below. Output Purpose Excel Saves the Excel file and has the option to rename it. Values Only Removes DataCell formulas from the report, saves the Excel file, and has options to rename it, open it, and email it. PDF Saves the Excel file as a PDF and has the option to open it immediately, give it a custom name, or email to designated recipients. Email Emails the Excel file to designated recipients and has the option to rename it Print Prints the Excel file to a designated printer or the default printer. Open Opens the Excel file. Step 9: To run the distribution, from the Distribution worksheet click the Export Book menu item in the Interject ribbon. Click the Run Distribution button that appears in the next window. As the distribution process is running, it will display its activity and progress as seen below. When the process is complete, the new workbook opens and the the original workbook is unchanged. Looking closer at what you created, the workbook below has 3 worksheets, and each worksheet has its own filter values as configured. You will notice that the worksheet names are simply incrementally numbers. You will cover how to custom name each tab in the next section, Advanced Distribution page. Distributing to a Folder Now you are going to do the same distribution, but this time you will save to a specific file folder. Step 1: To do this, navigate back to the distribution worksheet and change the output to Excel in cell E28. Step 2: Now you can name the file and select its destination. Step 3: Now run the distribution. Step 4: After you run the distribution, navigate to its folder to see that the file has been saved correctly. Distributing With Email Navigate back to the page to distribute the workbook via email. Step 1: First, you need to make sure the email is set up properly. The email distribution requires an SMTP server set up in the Interject Portal Website. The Organizational Profile settings area contains the SMTP information that must be completed beforehand. Assuming the SMTP information is entered, continue demonstrating email distribution. Step 2: In the Distribution Target rows of the Distribution worksheet, click the drop down in the Output column. Choose Email. Step 3: Now you can type in where the email is going, where the email is from, the subject, and the email message. You will need to work with your IT department to work through email configuration matters to avoid the delivered email being flagged as spam in your corporate email server. This can occur if the From email is any different than configured earlier with the SMTP settings. Now run the distribution again and the email will be sent to the destination. You have completed the basic distribution section. Continue learning about distribution in the Export: Advanced Distribution page. "},{"title":"Export: Quick Export and PDF","url":"/wGetStarted/L-Export-QuickExportAndPDF.html","content":" Overview The Quick Export and PDF method is the simplest way of distributing. The purpose of Quick Export is to build a new workbook from the current workbook and remove all the external links and Data Cell formulas so users without Interject can view the report. It's important to note that Tabular Interject reports can be viewed immediately by users without Interject and do not need to be exported to be shared. Although Tabular reports use special report formulas, the formulas remain out of view for users without Interject, and any data pulled into the report are simply values. Outside users can view them without any modification. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 7 Exporting Data > Lab 7.1 Quick Export and PDF. Quick Export Quick Export removes Data Cell formulas and external links from a workbook so users without Interject can view them. Take the report PL Trend Report with Data Cells from the Financial Walkthrough as an example. It is shown below. Step 1: First, use the Pull Data operation to pull the report for Location 7002 and month 2002-05. Note: Ensure that the Calculate Data Cells is checked. Now you have the report to distribute. However, if you send this report with data cells, people without Interject will not be able to view all the Data Cell formulas like in cell K16 below. Without Interject installed that formula will show as #NAME. Step 2: To prevent this issue, you can use Export Book to create a new book and convert the data cell functions into regular values. Once complete, the report will upload into a brand new workbook with fixed values instead of data cell formulas. This allows users without Interject to view the report. Quick PDF Exporting to PDFs from Excel has been available since Excel 2010 (and even with Excel 2007 as explained here). You will select this option and choose a folder in which to save the PDF. After saving, the PDF will open for review. Step 1: Go back to the PL Trend with Data Cells from the previous section. You can again select Export Book, but this time follow up with the Quick PDF button. Step 2: When you export to a PDF you will be required to declare a save location. Step 3: The PDF opens in the default browser. The published file should look like the one below. You have completed the quick exporting section. Continue on to learn about the Basics of Distribution. "},{"title":"Modify: Customer Aging Report","url":"/wGetStarted/L-Modify-CustomerAging.html","content":" Overview Here, you will modify a report to show the total of invoices due from companies. You will filter for companies with the word Market in their name to keep the list short. You will build a Total column to receive the sum of each individual company's unpaid invoices. Once complete you will use these totals to build a Report total, which allows us to see all invoices due. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 2 Modifying Reports > Lab 2.2 Customer Aging. Opening the Report and Pulling Data Step 1: Use the Report Library to find the Customer Aging Summary titled Interject Customer Collections. Once open, it should look like this: Step 2: Type Market in the Company Name field. Now run the Pull Data, which will pull the invoice data for all companies with the word Market in their name. Once it is populated with the data, the report should look like the image below. Creating a Total Column Step 1: In order to add a Totals report, you need a column to accept the data. Here you will add it at the end, after the 90 Days column. It is easier to copy the format used for one of the existing columns, then paste it to the new Total Column. To accomplish this, select the 90 Days column. Then select the Format Painter in the Home Ribbon. Step 2: Once you are prepared to copy the format, select the columns you want to total. Make sure to select the same number of rows used in the rest of the report. Once the format has been copied over add the column name Total. Before: After: Now that the report is formatted for the new data, you need to add formulas for calculating the total values. Step 3: In this instance, you are going to write a SUM Formula to get our totals. A simple example of this formula is shown in the image below. Note: This report is setup to place data starting in row 23, and that same row is considered the Formatting Range. You must put the formula on this row to be copied down with the data. Remember to include the = in our formula, otherwise Excel will simply read this as plain text. I23 tells Excel where the first column value is, and L23 designates the last value. The colon represents all the cells in between. When we have this written out, our Excel sheet shows where we will be summing values. Step 4: Instead of copying this formula to each row once step 3 is completed, pull the entire report again. Notice that when you pull the data, the new formula is applied to all the new rows. Creating Totals on Top of the Report Step 1: For this example, you need more than just the individual totals; you need a Report Total of these invoices. To build this, you have to add more SUM Formulas. You will format the cells above the table, making it clearly visible. To do this, select cell H19 and label it Report Total:. Step 2: Once you select the cell you want for the Report Total, write a formula for the total column. Make sure to select all the way down to the anchor row, which is one row below the existing data. This anchor row will always be the row below the data and is needed for the Report Function to work correctly. Step 3: Once the Total column is done you can copy the formula to the left until you reach Current. Once the paste is complete, we can view the Report Total for each column. Step 4: To remain consistent with other formatting, shade the Report Total row gray. Step 5: When the formatting is done, the report should look like the screenshot below. By clearing and re-pulling, you ensure that the changes worked. You can see in the screenshot below that even though you cleared the report, the formula is still there in cell N23. Step 6: Once the report has been cleared, re-pull the report. The report is complete, you have added a total for each client and a summary total on the top by column. Once complete, upload the report to your Report Library as \"Modified Customer Aging_YourName\". You can learn how to upload files to the Report Library here. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Modify: Financial Report","url":"/wGetStarted/L-Modify-FinancialReport.html","content":" Overview Financial reports can sometimes share the same row or column configurations. Rather than creating a new report, it is often easier to modify an existing one. For example, you might be using a monthly trend report which could easily be modified to accommodate a budget-to-actual comparison report, showing monthly and year-to-date differences. This Walkthrough will illustrate how to make these changes. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 2 Modifying Reports > Lab 2.3 Financial Report. Using Column Definitions Step 1: Open the PL Trend report from the Interject Financials folder of the Report Library. Step 2: Once the report is open, select the Freeze Panes menu in the View tab, and choose Unfreeze Panes. Enter 7002 in the Location filter in cell M22 and month 2002-05 in cell M23. In the current report, values in L4 through N5 will populate based on the month entered. These cells were configured with spreadsheet formulas to automatically change based on the month entered. The jColumnDef() formulas in cells L2 to N2 are important to understand. They exist in the Column Definition row 2, so Interject understands what financial values to present for that column. Notice that jColumnDef() draws its parameters from the cells that it has been designated to take values from. In this case those cells are right underneath the formula. Here, jColumnDef() is only referencing a Source (Actual or Budget), a month period, and a year. However, it is designed to handle currency and other reporting dimensions as well. Step 3: Expand the trend 3 more months as illustrated in the following animated GIF. Select column N and drag its anchor 3 columns to the right. Note that the Column definitions carry through the new columns you made just by dragging the previous one. This way, you add more columns to to the report without manually typing formulas. Step 4: With the new columns added, use the Pull Data menu item. You can see that even with the expanded sheet, the data populates in the desired areas just as it should. Preparation Cleanup Now that you understand Column definitions a bit better, modify the report to create a budget to actual comparison report. Before doing this, cleanup the report to prepare it for the modifications you will make. Step 1: Now, use the Clear button to remove the data on the report. Step 2: Next, you will select the columns you do not need and right click to delete them. In this case delete Columns O through Q. Step 3: Clean up the Column Definition area so the changes are easier to make. First, delete the For Drill row to simplify the changes as illustrated below. Delete the column definition area for the third column since column N will contain a formula for difference and thus will not need a column definition. Do this by selecting and deleting cells I12, L12, M12, and N2, N3, N4 and N5. Setting up Budget to Actual Comparison Report Now that you have cleared those cells, begin by modifying the report to create a Monthly Comparison Report. Step 1: To begin, change the Source of column M to Budget so it can be compared to Actuals. Enter Budget in M3. Step 2: Next, you will need to define the Period. Type =RIGHT($M$23, 2) into the function field for cells L4 and M4. This way, if a user changes the month in the report, it will change in the Column Definition as well. Add the $ symbol in the formula so that it will lock in place if the formula is copied later. Step 3: Now, define the Year. Type =LEFT($M$23, 4) as the function for L5 and M5, so if a user changes the year in the report, it will change in that Column Definition as well. Step 4: Now, rename the column labels in rows 25 to 27 so they will more accurately describe what they represent. First clear the range L25:N27. After the old content is deleted, add the new descriptions for the column labels. Type Actual in cell L27, Budget in M27 and Difference in N27. Type Month to Date in M26. Step 5: Now, set up the difference formula for column N. First, expand the grouped row in the Formatting Range section in row 14. Type =L14-M14 into cell N14. This will populate the difference Column with the difference between column L and M. After that, select the 1 icon to close all the groups. See the red arrow in the screenshot below. This report was specifically built to be pulled with the groups closed, so it should be collapsed before the report is pulled again. Step 6: Now that you have all of the columns set up for the Budget to Actual Comparison Report, you can pull the data. Just click Pull Data in the ribbon menu. The new month-to-date difference report columns should populate as expected. Refreeze the pane on cell L28 and the report will look like the image below. Creating a Year to Date Budget to Actual Comparison Report Step 1: Now change your Budget to Actual Comparison Report to show the monthly difference as well as the year to date difference. You can do this by first selecting columns L through N, then copying and pasting them in Column Q. This will give you a broader view of the data. Once completed, you can view not only the month you are asking for but also the year. Step 2: Now delete the unnecessary data. Select cells Q21:S26. Right-Click on the area and select Clear Contents. Now copy a blank cell and past it over what you do not need. Change the name of the table to a more accurate name, like Year To Date. Step 3: Now, change the Period for the Year To Date so it will show the actual Year to Date. You can do this by typing =\"YTD\" & RIGHT($M$23, 2) into the function dialogue for cells Q4 and R4. Step 4: With this done, re-pull the data. After the pull, refreeze your panes. The new Year to Date Budget to Actual Comparison Report will look like this. Finally, clear the report, refreeze the panes, and upload it to the Report Library. You can learn how to upload files to the Report Library here. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Modify: Inventory Report","url":"/wGetStarted/L-Modify-InventoryReport.html","content":" Overview In this example you will be modifying a fixed report. Specifically, you will be adding a missing row as well as an extra column. If you are following the Training Labs, this report file can be found in the Report Library at Training Labs > Lab 2 Modifying Reports > Lab 2.3 Inventory Report. Setting up the Report Step 1: First, go to the Report Library and select the Interject Inventory Demo report. It should look like this when opened. In order to add a missing row to this report, it is necessary to delete a row first in order to simulate the need for modification. Step 2: Right click row 18, Dairy Products, and choose delete. With the row deleted, the report should now be structured as shown. You can now begin modifying the report for this lesson. Adding a Row to the Report Step 1: First, use Pull Data menu item so you can see how this report has been configured and to show that a row is missing from the main section. Here you can see that the category Dairy Products is below the main body of the report. This is considered a Leftovers section and will present rows that were not included in the fixed report area above between rows 15 and 22. Add Dairy Products back to the main body of the report. Step 2: To add another category, unfreeze the panes. Open the View Ribbon in Excel and select the Freeze Panes drop-down. Then choose Unfreeze Panes. By unfreezing the report, the formulas and parameters that were hidden before can now be viewed. If this is the first time seeing these, go to Basics of Report Formula's to learn more. You can see this by opening these sections that Dairy Products is being pulled in the Leftovers section configured in cell B25. Since you want Dairy Products with the other categories in the main report, you will need to add it. Step 3: To move Dairy Products into the main section, insert a row. Right click a row anywhere between 15 and 23 and copy it. By copying a row, it will ensure that the new row inserted keeps the same formatting as the other rows. Step 4: Now, right click again anywhere in the same range and insert the copied row. This will temporarily create two Grains/Cereals sections and you will edit the new one. Step 5: Once you have the new row inserted, you will need to change the category name in the new row to Dairy Products in column B. This is called the Row Definition and is how Interject knows what data to place in that row. In this example, the column E formula references column B, but this does not have to be the case. You can control what the user sees in column E. Below, you changed the definition for row 18 to Dairy Products and are ready to pull data again so that the row has correct data. Step 6: Because you copied an existing row, the data for Row 18 is still duplicated from Grains/Cereals, Pull the Report to refresh the data and check your work. Data should update for row 18, and Dairy Products should disappear from leftovers area. Adding a New Definition Column As it is, the report does not describe what each of the categories contains, so add a description column to the report so you know exactly what is in each category. Step 1: First, add the column to the report. Call it Description. Be sure to make it wide enough to contain the longer description text as shown below. Step 2: Now add the Column Definition value in the top part of the report so that Interject knows to bring in data to that column. Step 3: Pull the data to make sure everything works as expected. This will refresh the data and pull in the new description data, placing it in the specified column. Preparing the Report to Share Before saving back changes to the Report Library, clear the data so the next user does not see data that may not be relevant to their cost center. Step 1: Here clear the report of all of the data. Now that the data is cleared, use the jFreezePanes function to re-freeze the panes on the report so that only the main report area is visible. This report has the jFreezePanes formula in cell G4. jFreezePanes is not configured for all the example reports, but it is easy to setup when needed. Step 2: To use the jFreezePanes, click the Quick Tools button in the Interject Ribbon and select Freeze/UnFreeze Panes. This will automatically freeze the panes to the pre-configured position. And that is all there is to it. You have now modified the Inventory Report with an additional column and row. Save your new report to the report library as \"Modified Inventory_YourName\". You can learn how to upload files to the Report Library here. Do not upload this file to the Report Library if you are following the Training Labs. You may save the file locally, however, if you want to keep a local copy. "},{"title":"Manual Setup for the Lab Guide","url":"/wLabs/LabSetup.html","content":" Overview The Lab Guide provides a convenient way for users to become familiar with Interject. The Guide has several individual walkthroughs on how to create reports, modify reports, drill to data, and export reports. For those who want greater control and flexibility in making modifications to the Lab Guide, this page details how to setup the environment manually. Interject Data Report Flow The reports in the Lab Guide contain Interject report formulas, each referencing a Data Portal setup on the Interject Portal Website. These Data Portals in turn reference a Data Connection and a Stored Procedure that point to a data source where the data will be pulled from. When the data source is a database, the entire flow can be conceptualized by the following diagram: Manual Setup There are a number of steps necessary for manual setup: Step 1: Download the database and install locally Step 2: Set up the Data Connections on the Interject Portal site Step 3: Set up the Data Portals on the Interject Portal site Step 4: Set up the FinCube Portals Step 5: Download the lab files Step 6: Change the Data Portal names in the files to match the ones manually set up The following walks through the steps to set up a Lab environment locally. Step 1: Setting up the Database The first step in manually setting up a Lab environment is to establish a database on a local system where the Lab Guide will be used. Interject's choice of database is SQL Server as the Lab Guide relies on Microsoft's Northwind Database. The following is a minimalist script to recreate the database using SQL Server 2014 or greater: labs_db_script_sql_server_2014.sql This script will have all the necessary tables, functions, procedures, schemas, and roles. You will need to first create the database of your choosing and then run this script inside that database. You may use SSMS or another editor of your choice. Step 2: Setting up the Data Connection Navigate to the Interject Portal site and log in. For a guide about how to use the Interject Portal site, see here. Set up a Data Connection that points to the database you set up. The following example uses a database called \"Interject_Lab_DB\": Name: Local_Lab_DataSource Description: This is the Data Connection to a local database set up for the Lab Guide Connection Type: Database Connection String: Data Source=(local);Initial Catalog=Interject_Lab_DB;Integrated Security=SSPI; For detailed instructions on how to set up a Data Connection, see Portal: Database Connection. Step 3: Setting up the Data Portals Now that you have a database and set up a Data Connection to it, you need to start adding Data Portals. For instructions on how to set up Data Portals, see Data Portals. Following is a list of the Data Portals and their Stored Procedures used in the Labs. Note: The Data Type and Direction are automatically set when selecting a System Parameter. NorthwindCreditSaveStored Procedure: [demo].[Northwind_Credit_Save] Parameter Parameter Type Data Type Direction Interject_RequestContext System Parameter Interject_ReturnError System Parameter NorthwindCustomerAccountDetailStored Procedure: [demo].[Northwind_CustomerAccountDetail_Pull] Parameter Parameter Type Data Type Direction CompanyName Formula Parameter nvarchar input ContactName Formula Parameter varchar input CustomerID Formula Parameter varchar input UnappliedOnly Formula Parameter varchar input BeginDate Formula Parameter varchar input EndDate Formula Parameter varchar input Interject_ReturnError System Parameter Interject_RequestContext System Parameter NorthwindCustomerInvoicesStored Procedure: [demo].[Northwind_Invoices_Pull] Parameter Parameter Type Data Type Direction CompanyName Formula Parameter nvarchar input ContactName Formula Parameter varchar input CustomerID Formula Parameter varchar input ShowExpectedDate Formula Parameter varchar input IncludePaid Formula Parameter varchar input Interject_RequestContext System Parameter NorthwindCustomerOrderStored Procedure: [demo].[Northwind_CustomerOrder_Pull] Parameter Parameter Type Data Type Direction OrderID Formula Parameter int input CustomerID Formula Parameter nvarchar output ContactName Formula Parameter nvarchar output CompanyName Formula Parameter nvarchar output ShipAddress Formula Parameter nvarchar output ShipCity Formula Parameter nvarchar output ShipPostalCode Formula Parameter nvarchar output ShipCountry Formula Parameter nvarchar output Phone Formula Parameter nvarchar output Fax Formula Parameter nvarchar output OrderDate Formula Parameter date output RequiredDate Formula Parameter date output ShippedDate Formula Parameter date output ShipVia Formula Parameter nvarchar output Freight Formula Parameter money output Interject_RequestContext System Parameter Interject_ReturnError System Parameter NorthwindCustomerOrdersStored Procedure: [demo].[Northwind_CustomerOrders_Pull] Parameter Parameter Type Data Type Direction CompanyName Formula Parameter nvarchar input ContactName Formula Parameter varchar input CustomerID Formula Parameter varchar input Interject_NTLogin System Parameter Interject_LocalTimeZoneOffset System Parameter NorthwindCustomersStored Procedure: [demo].[Northwind_Customers_Pull] Parameter Parameter Type Data Type Direction CompanyName Formula Parameter nvarchar input ContactName Formula Parameter varchar input CustomerID Formula Parameter varchar input Interject_NTLogin System Parameter Interject_LocalTimeZoneOffset System Parameter NorthwindFixedStored Procedure: [demo].[Northwind_Customers_FixedPull] Parameter Parameter Type Data Type Direction Interject_NTLogin System Parameter Interject_ReturnError System Parameter NorthwindInvoiceSaveStored Procedure: [demo].[Northwind_Invoices_Save] Parameter Parameter Type Data Type Direction Interject_ReturnError System Parameter Interject_RequestContext System Parameter NorthwindSalesPullStored Procedure: [demo].[Northwind_Customers_RangeDetailPull] Parameter Parameter Type Data Type Direction UnitsInStockMin Formula Parameter varchar input Category Formula Parameter varchar input Interject_NTLogin System Parameter Interject_ReturnError System Parameter Step 4: Setting up FinCube FinCube is a special Data Portal that is used for financial reporting. This Portal is called \"Demo_Interject_FinCube\" in the Lab files and is used in 6 labs: Lab 1.3 Financial Report Lab 2.4 Financial Report Lab 4.3 Financial Report Lab 5.5 Using the Retain Feature Lab 7.2 Basic Distribution Lab 7.3 Advanced Distribution Due to the complexities of this Data Portal, it is advised to use the API connection for this Data Portal. The following steps through how to set up this Portal. Setting up the FinCube Data Connection The FinCube Portal can use an API connection. You can use the following settings to set up the Data Connection: Name: <Your own custom Name> Description: <Your own custom Description> Connection Type: Web Api Api Root Url: https://data-api.gointerject.com/api Api Connection String Name: FinancialDemo-Database Setting up the FinCube Data Portal You can use the following settings for the FinCube Data Portal: Name: <Your own custom Name> Description: <Your own custom Description> Connection: <Use the name of the Data Connection you set up in the last section> Command Type: Stored Procedure Name Stored Procedure/Command: Client.[FinCube] Api Relative Url: InterjectDefaultRequest Setting up the FinCube Data Cells Data Portals Data Cells are a special type of cell that can directly pull data into the cell using the Data Cell Functions. Data Cells are used in Lab 7.1 Quick Export and PDF. In order for the Data Cells to work, there must be some Data Portals set up. All these Data Portals will use the FinCube Data Connection set up previously. The FinCube Data Portals must be set up for your particular Client profile. Therefore you will need your ClientID. This can be found by clicking About Interject on the Interject ribbon: Following are the Data Portals that must be set up. Note: There are no parameters in the FinCube Portals. Data Portal Description Connection Command Type Stored Procedure/Command Api Relative Url UpdateCellDataStatus_<ClientID>* For Data Cells Update <FinCube Data Connection> Stored Procedure Name [Client].[RequestStatus] InterjectDefaultRequest UpdateCellData_<ClientID> For Data Cells <FinCube Data Connection> Stored Procedure Name [Client].[Request] InterjectDefaultRequest ImportScheduler_<ClientID> For Scheduler <FinCube Data Connection> Stored Procedure Name [Client].[ImportScheduler] InterjectDefaultRequest SegmentData_<ClientID> For Data Cells <FinCube Data Connection> Stored Procedure Name [Client].[Segment} InterjectDefaultRequest * Use your ClientID here Step 5: The Report Files The following zip file contains all the necessary files for the Lab Guide: LabFiles.zip Note: Some labs do not have a lab file as they either start with a blank Excel file or are continued from a previous lab. The following labs do not have a file: 3.1, 3.2, 3.3, 3.6, and 7.3. Step 6: Renaming the Data Portals Once you have created the Data Portals with your own custom names, you will have to change the name of the Data Portals in the Report formulas found in the Lab files. To help with this, the following is a list of all the labs along with their associated file and every Data Portal used in those files: LabDataPortals.xlsx "},{"title":"Logging In/Out: Enterprise User","url":"/wAbout/Logging-In-Enterprise.html","content":" Overview Logging in is simple and fast! Interject will remember your login for 30 days. You can also add multiple logins and switch accounts easily. Once a federated identity is configured for an Interject client, users can provide an accompanying enterprise login code and login to Interject with their federated identity. This page describes how to use the login from the Interject Excel Addin. Note: This page uses Interject version 2.5.0.19 for the content and screenshots. Initial Enterprise Login Step 1: Click the Login button on the Interject Ribbon to bring up the Login Manager. Step 2: Click Sign into Interject. Step 3: Enter your enterprise login code and click Look Up Code. Step 4: Click your Identity Provider in the list. Step 5: Enter your federated Credentials and click Continue. You can verify you are logged in by the Login Manager Window. Note: Some login pages may have a \"Remember Me\" or a \"Save Login\" checkbox to save time the next time the user comes to the login page. These features are not guaranteed to work while logging in using the Interject federated login approach. The browser enabling these federated login pages is Webview2 and not the user's standard browser and is not accessible from within the Excel Addin. New Login Step 1: To add a new login, first click the Login button on the Interject Ribbon. Step 2: Click the New Login button and proceed to enter your credentials the same as in initial enterprise login. Logging Out Logging out means Interject will delete the login tokens and not automatically log you in the next time you return. To log out, you can click the ellipses on the account you wish to log out and click Log Out. You may alternatively click the Logout button on the Interject ribbon. Log Back In To log back in after you have been logged out, simply click the ellipses on the account you wish to log in and click Log In. Switch Accounts To switch between accounts, simply click the link of the account you wish to switch to. Forgetting Login Credentials Forgetting credentials means the login token is deleted from the cache and the profile removed from the Login Manger. To log out and forget your credentials, click the ellipses on the account you wish to log out and forget and click Log Out & Forget. Clearing Login Cookies The Login cookies store the federated credentials so that the enterprise user can log back in without having to reenter their federated credentials. To clear these cookies, select Diagnostics from the Interject ribbon, click on Clear External Login Cookies and then select Execute Selected Action. On the next login, you will have to reenter your federated credentials. "},{"title":"Logging In to Website Portal","url":"/wPortal/Logging-In-to-Website-Portal.html","content":" Overview The Interject Portal is a websites that allows you to access all the data portals and data connections. Once logged in you can create, customize and remove them as needed. Step 1: Navigate to https://portal.gointerject.com/login.html. Step 2: Input credentials. Step 3: The window should look like this: From here you are able to set up a Data Connection or Portal. "},{"title":"Logging In/Out: Individual User","url":"/wAbout/Logging-In.html","content":" Overview Logging in is simple and fast! Interject will remember your login for 30 days. You can also add multiple logins and switch accounts easily. Note: This page uses Interject version 2.5.0.19 for the content and screenshots. Initial Interject Login Step 1: Click the Login button on the Interject Ribbon to bring up the Login Manager. Step 2: Click Sign into Interject. Step 3: Enter your credentials in the Interject Account form and click Login. Step 4: If you click on Login again the Login Manager window appears where you can view the current logins. New Login Step 1: To add a new login, first click the Login button on the Interject Ribbon. Step 2: Click the New Login button and proceed to enter your credentials the same as in Initial Interject Login. Logging Out Logging out means Interject will delete the login tokens and not automatically log you in the next time you return. To log out, you can click the ellipses on the account you wish to log out and click Log Out. You may alternatively click the Logout button on the Interject ribbon. Log Back In To log back in after you have been logged out, simply click the ellipses on the account you wish to log in and click Log In. Switch Accounts To switch between accounts, simply click the link of the account you wish to switch to. Forgetting Login Credentials Forgetting credentials means the login token is deleted from the cache and the profile manager removed from the Login Manger. You will have to reenter your credentials the next time you wish to log in. To log out and forget your credentials, click the ellipses on the account you wish to log out and forget and click Log Out & Forget. "},{"title":"Multi-Factor Authentication (MFA)","url":"/wPortal/MFA.html","content":" Overview Multi-factor authentication (MFA), also known as two-factor authentication (2FA), is a security process that requires users to provide two or more authentication factors to verify their identity before gaining access to a system or resources. MFA is a critical security mechanism that has emerged to counter the cyber threats in today's digital age. Where personal and organizational information is constantly under siege from malicious actors, MFA stands as a robust defense, requiring users to provide two or more authentication factors before granting access to sensitive systems, accounts, or data. Interject supports MFA via email confirmation or an Authenticator App and it can be set up for any user within your organization. Note: Interject MFA only works for Interject credentials. Users that use a federated login are managed by their Identity Provider (see here for more info). Enable MFA for a User Step 1: To begin, login in to the Portal site. On the top right of the site, select your company. Step 2: On the left navigation panel, select Staff. Step 3: An Organization Staff window opens up showing all current users within the company. Select a user's MFA to edit their settings. Step 4: Click MFA Enabled an authentication type. Click Save. The current type of MFA authentication for the user is displayed. Login With the Authenticator App When the Authenticator App is chosen for MFA, the next time the user logs in, they will receive a prompt to check their Authenticator app for a code. The Authenticator App on your device will display a code. Enter this code to log in. If you do not have an Authenticator app installed and registered with your email, you will receive a QR code that you can scan to set up the app. Scan the code, install the app, and then enter the verification code to verify the app with Interject. Login With an Email Confirmation When Email Confirmation is chosen, the user will be prompted to check their email for a code. The email will display the code needed to log in. Note: The email code expires in 5 minutes. "},{"title":"Macro Security","url":"/wIndex/MacroSecurity.html","content":" Overview Macro security involves mitigating the opening and uploading of Excel files that contain macros to ensure no malicious code affects any system. These macro files have the file extension of .xlsm, as opposed to a macro free file extension of .xlsx. These macro files can potentially contain malicious code that when opened via the Report Library, can execute harmful actions. New versions of the Interject Add-In (versions 2.4.x and above) will contain configurations that will mitigate this risk. The overall goal of macro security is to ensure a macro file is not opened in the Interject Report Library without it matching the exact file that was uploaded. There are security attack vectors where a previously downloaded file can be replaced or if a file is a direct file path, the file could be later replaced. If the Interject platform database becomes compromised there are additional attack vectors to be considered. Since the Report Library trusts all macro files inherently and sidesteps macro warnings, we must be sure the file is valid before opening to ensure Interject protects the user. With this functionality, Interject can also be a better security vehicle to allow macro files while disabling them in the network. Uploading A Macro File Interject macro security involves enabling/disabling macro file transactions to/from the Report Library. If enabled, when the file is uploaded, a checksum is created on the file. Next, the client's signing key from the Interject Cloud Platform is used on the checksum to create a signed hash. This hash is a unique identifier that is stored in the Interject Cloud Platform for the uploaded file. Opening A Macro File When a user attempts to open a file from the Report Library, the file is downloaded to the cache so a signed hash can be created. The two signed hashes are then compared. If they do not match, the file is deleted and the file open is denied. If they do match, the file is opened. This feature prevents unauthorized altercation of uploaded files from being opened. If the hashes do not match then an admin user can download the file for inspection. The file then can be reviewed and re-uploaded to create a new signed hash. Security Settings There are key settings that can be used to configure macro security. They can only be set up in the Interject Platform API which are cached locally in an encrypted file. Local settings in the IDSSettings.xml or App.config file are not used since they are not encrypted and could be used to override macro security settings by bad actors. Currently, only Interject can setup and change these settings. The macro security related settings are: Setting Description Value ExcelMacrosEnabled Enables upload/open of macro files. If this setting is missing AND the MacroFileSigningKey or FileSigningAPI settings have been set, then those can be used to enable a valid upload/open uploading of macro files. True/False AllowMacroFilesFromDate Allows users to open files that have been uploaded before this date. This setting makes it possible for users to be able to continue to utilize their existing reports after macro security has been introduced. Typically this setting date is set to the date when macro security is to be implemented. Date MacroFileSigningKey A key that is used to digital sign the macro files. Long string of characters FileSigningAPI A link to an API that will digital sign the macro files. URL Link FileSigningAPI_V2 Currently not used. URL Link AdditionalFileExtensionsAllowed Allows a company to upload/open unauthorized file types List of File Extensions (e.g.\".ppt, .pptx\") FileExtensionsNotAllowed Prohibits a company to upload/open authorized file types List of File Extensions (e.g. \".doc, .docx\") Checking Settings The security settings can be set up for each client/company. To confirm the settings, navigate to Interject Diagnostics > Public > Apply Special Features: File Extensions The following displays which file types are allowed to upload/open from the Report Library (if the company has rights): File Ext. Description Excel xls Excel file (97-2003) Excel xlsx Excel file Excel xlsm Excel file (macro enabled) Excel xlt Excel template file (97-2003) Excel xltx Excel template file Excel xltm Excel template file (macro enabled) Excel xlsb Excel binary file Text txt Text file Word doc Word document (97-2003) Word docx Word document Adobe pdf Portable Document Format file Image png Portable Network Graphic file Image jpg Joint Photographic Experts Group file "},{"title":"Managing Settings Cache","url":"/wGetStarted/Managing-Settings-Cache.html","content":" Overview Interject optimizes speed by caching company settings, such as Data Portals, Connections, and Report Library templates. This information is received on login and is stored in memory for as long as the Excel session is open. This is an important topic for new deployments where these settings may need to change often. If there are any changes to these company settings, the Interject Excel add-in will check for changes at various actions. Opening the Report Library or the Report Builder automatically checks for setting changes. Other actions like Pull, Save, or Drill check only every two hours, since these actions occur quite often and could create excess communication. Forcing Cached Settings to Refresh There may be situations where deploying new Interject tools may be in a critical time when company settings require rapid updates. For example, a newly deployed report may need a change, as well as a new Data Portal parameter, to support a new filter that was requested by users. The stored procedure that is assigned to the Data Portal would be changed immediately in the database. The Data Portal will be updated with a new parameter, and a new version of the report is added to the Report Library. However, since users may not receive new cached settings for up to 2 hours, the users would continue to use the old report and outdated Data Portal information. Since the stored procedure change is immediate, the old report would error since it is not passing the new stored procedure’s new parameter value. To remedy this situation, there are a couple options. Users could open the Report Library that checks to refresh the cached settings instead of waiting on the 2 hour cycle that automatically happens on every Interject pull. This is not ideal. The best solution is to change the refresh cache settings interval before the deployment. In the Interject Website Portal there is a setting that allows the 2 hour settings cache check-in to be temporarily made as frequent as every 5 minutes. After 2 days, the setting will revert back to 2 hours. Using this setting during critical deployments can help settings changes propagate much quicker and avoid confusion with users. Making the Middle Tier Forgiving Another technique that can make Data Portal changes easier to manage is to update the middle-tier, a stored procedure, or the website API, so that no error results if the new parameter is missing. You can go further and provide a message to the user saying they are using an older version of the report and ask them to open the new version from the Report Library. "},{"title":"Modifying an Existing Report","url":"/wGetStarted/Modifying-an-Existing-Report.html","content":" Overview Many times in creating a report you don't have to start from scratch. Often it is faster to start with an existing report and make the modifications you need. On this page, you will read through three scenarios in which modifying a report might be needed. Go directly to any walk-through by clicking one of the links below. Customer Aging Report In this example, you will use the same report used in the Customer Aging Summary Report Walk-through, except here you will be adding a total for the invoices due from each company along with a grand total of all the invoices due in this report. Inventory Report In this example you will be customizing the inventory report used in the Inventory Real-World case. You will be deleting and adding back a category row and adding a new column. Financial Report In this example you will use the same file presented in the Financial Report Walk-through , although now you are going to show further details on how the modification is done. "},{"title":"Pair()","url":"/wIndex/Pair.html","content":" Function Summary The Pair function transfers values from one cell to another. It is typically used in conjunction with the PairGroup function. Values are transferred upon a designated Interject event (e.g. a drill or as defined in the function it is embedded in). It is best practice to use the PairGroup function even when only entering one Pair. For an example of this function, see Lab Drill: Customer Aging. Function Arguments FromA string or a single cell indicating the value to be transferred. If a range is entered, it will designate a column of possible cells, one of which will be transferred. The cell to be transferred is determine by the row of the active cell when this function is triggered. For example, if the range starts with column H and the active cell is in row 34, the cell H34 will be transferred. Type String/Range Constraints Max 255 char If Blank Will not transfer values TargetA range indicating where the value in From will be transferred to. Type Range Constraints If Blank Will Error RequireValueTrue: ReportDrill cannot be ran if the value in the From argument is blank.False: ReportDrill can be ran if the value in the From argument is blank. Type Boolean Constraints If Blank True ScopeRangeDeprecated: This function for the current version of Interject performs the same no matter what value is entered in this argument. Type Range Constraints If Blank N/A Excel Formula Bar Example =Pair(B22:B24,CustomerOrderHistory!C23) Function Composition Argument Name Example Mapping Explanation Function Name =Pair() The name of this function. From B22:B24 This function will transfer one cell value in B22:B24 to the Target. The particular cell it will transfer is determined by which cell is selected when the function is triggered. If the active cell is in row 22, then the value in B22 will be transferred. Target CustomerOrderHistory!C23 The value in From will be transferred to cell C23 of the sheet \"CustomerOrderHistory\". RequireValue Blank to indicate to not transfer blank cells. ScopeRange Deprecated Usable In These Functions PairGroup ReportDefaults ReportDrill "},{"title":"PairGroup()","url":"/wIndex/PairGroup.html","content":" Function Summary The PairGroup function will active all Pair() functions defined within. It is best practice to use the PairGroup function even when only entering one Pair. For an example of this function, see Lab Drill: Customer Aging. Function Arguments PairThe Pair function transfers values from one cell to another upon a designated action or event (e.g. a drill or as defined in the function it is embedded in). Multiple Pairs can be added separated by a comma. Type Pair() Constraints Max 34 Pairs If Blank No Pair function will be activated Excel Formula Bar Example =PairGroup(Pair(\"2002-05\",M22),Pair(M21,\"Segment2\"),Pair(F26:F125,\"Segment1\")) Function Composition Argument Name Example Mapping Explanation Function Name =PairGroup() The name of this function. Pair1 Pair(\"2002-05\",M22) Will transfer the value \"2002-05\" into cell M22 upon action or event. Pair2 Pair(M21,\"Segment2\") Will transfer the value in cell M21 to the cell labeled as \"Segment2\" upon action or event. Pair3 Pair(F26:F125,\"Segment1\") Will transfer a single cell value from F26:F125 into the cell labeled as \"Segment1\" upon action or event. Usable In These Functions ReportDefaults ReportDrill "},{"title":"Param()","url":"/wIndex/Param.html","content":" Function Summary The Param function transfers values as parameters to the DataPortal. The values must match the order of the parameters in the data source (The order can be verified using the Validation Report ). For an example of this function, see Lab Drill: Customer Aging. Function Arguments Value1A string or single cell indicating the value to be transferred as a parameter to the DataPortal. Multiple values can be entered separated by a comma. Type String/Single Cell Constraints Max 255 char or must be a single cell If Blank Will not transfer value Val2 - Val40A string or single cell indicating the value to be transferred as a parameter to the DataPortal. Multiple values can be entered separated by a comma. Type String/Single Cell Constraints Max 255 char or must be a single cell If Blank Will not transfer value Excel Formula Bar Example =ReportRange(\"NorthwindCustomers\",B14:H15,B2:H2,B4:H4,Param(C7,C8,C9),FALSE,FALSE,,FALSE,FALSE) Function Composition Argument Name Example Mapping Explanation Function Name Param() The name of this function. Value1 C7 The value in C7 will be passed as a parameter to the DataPortal Val2 C8 The value in C8 will be passed as a parameter to the DataPortal Val3 C9 The value in C9 will be passed as a parameter to the DataPortal Usable In These Functions ReportFixed ReportLookup ReportRange ReportSave ReportVariable jDropdown "},{"title":"Quick Tools","url":"/wIndex/Quick-Tools-Landing.html","content":" Overview The Quick Tools window provides a convenient set of macro tools suggested by our users. These tools are efficient ways to complete the most common actions in Interject. Note: The Quick Tools are actions and cannot be undone with the Excel Undo feature (Ctrl-Z). Be sure to save your work beforehand. Quick Tools Type Tool Description Pane Freeze/Unfreeze Panes Unfreezes or freezes the current sheet panes using jFreezePanes() settings Pane Freeze all Tabs Unfreezes or freezes all sheet panes using jFreezePanes() settings Format Center Across Columns Centers across columns without merging cells for the selected cells Format Remove Wrap Removes the word wrap formatting for the selected cells Format Inverse Sign Reverses the sign of any numeric amount for the selected cells Format To Lower Case Converts text to 'lower case' for the selected cells Format To Proper Case Converts text to 'Proper Case' for the selected cells Format To Upper Case Converts text to 'UPPER CASE' for the selected cells Format Trim Values Trims spaces from start and end of text for the selected cells Formula Remove External References Removes all external references in the workbook with their values Edit Blanks to Zeros Replaces any blank cells with zeroes for the selected cells Edit Zeroes to Blanks Replaces any zero values with blanks for the selected cells Edit Remove Sheet Objects Removes any shapes, pictures or other objects from the current sheet Names Remove Names with Ref Errors from Book Removes all named ranges with invalid references (Ref!) in the workbook]() Names Remove All Names from Sheet Removes all user named ranges that are scoped to the current sheet Names Remove All Names from Book Removes all user named ranges in the workbook Names Create Range Name for Sheet Creates a named ranged scoped to the sheet for the selected range Names Create Range Names for Sheet for 2 Column Selection For every value in the first column, creates named ranges in the second column (scoped to the sheet). Create names InterjectConfig_NamedRangePrefix and InterjectConfig_NamedRangeSuffix to modify name created. Hyperlink Reset Hyperlink Targets for Selection Fixes hyperlink targets to point to current sheet for selected cells Hyperlink Create/Edit Interject Hyperlink Opens a window to create/edit special Interject Hyperlinks. Add name range InterjectStyle_Hyperlink on formatted cell to preserve style of hyperlink. Other Unique List from Selection Create a unique list of values from selected cells places in a new tab Other Unhide All Sheets Unhides all hidden sheets in the workbook "},{"title":"Quick Tools - Edit Tools","url":"/wIndex/QuickTools-Edit.html","content":" Overview The Edit Tools within Quick Tools deal with the editing of numeric values and objects. Blanks to Zeros Inserts a zero for the current cell or all selected cells if they are blank. Before: After: Zeros to Blanks Clears out the current or cell or all selected cells that contain only a zero. Before: After: Remove Sheet Objects Removes objects (shapes, pictures, etc.) from the current sheet. Sometimes when importing data from another source, objects such as pictures or diagrams are inserted. It becomes hard to find and delete all of these manually. This Quick Tool provides an easy way to remove these objects. Before: After: "},{"title":"Quick Tools - Format Tools","url":"/wIndex/QuickTools-Format.html","content":" Overview The Format Tools within Quick Tools deal with the formatting of text and cells. Center Across Columns Centers across columns without merging cells for the selected cells. Excel provides a way to center a title across columns by merging the cells: Notice the Title \"Customers\" is centered and merged from columns G to K. Merging is cumbersome as it is hard to reference and resize. The \"Center Across Columns\" quick tool will center the title in-between columns G to K but will not merge the columns. Before: After: Remove Wrap Removes the word wrap formatting for the selected cells. Excel will wrap the text by default when pasting from other sources. The \"Remove Wrap\" quick tool makes it convenient to remove the wrap of the selected cells. Before: After: Inverse Sign Reverses the sign of any numeric amount for the selected cells. Before: After: To Lower Case, To Proper Case, To Upper Case Converts text to 'lower case', 'Proper Case', or 'UPPER CASE' for the selected cells. To Lower Case: To Proper Case: To Upper Case: Trim Values Trims spaces from start and end of text for the selected cells. Before: After: "},{"title":"Quick Tools - Formula Tools","url":"/wIndex/QuickTools-Formula.html","content":" Overview The Formula Tools within Quick Tools deal with formulas. Remove External References Removes all references in the Workbook to external files/objects and converts the formula in the cells to a text/numeric value. Note: When there are references in the Workbook to external files, the \"Edit Links\" button will be visible on the Data tab: Before: Note the cell C3 refers to a cell in the external file \"D:\\Users\\jimd\\Documents\\Sales\\Projections.xlsx\". After: "},{"title":"Quick Tools - Hyperlink Tools","url":"/wIndex/QuickTools-Hyperlink.html","content":" Overview The Hyperlink Tools within Quick Tools deal with Interject Hyperlinks. Reset Hyperlink Targets for Selection Sets the scope for hyperlinks to the sheet they are contained in for all hyperlinks in the current cell or all selected cells. When you paste a hyperlink into another sheet, Excel retains the scope for that hyperlink so it is not set to the sheet you are pasting it into. To demonstrate this, follow these steps: Step 1: First select a hyperlink in the current sheet: Step 2: Next paste it to another sheet: Step 3: Right click the cell and select \"Edit Link\": Notice the scope of this Hyperlink is still set to the original sheet \"Customer Aging\": Step 4: Click on \"Reset Hyperlink Targets for Selection\" in Quick Tools and \"Run and Close\": Notice the scope has been set correctly to the current sheet \"Example\": Create/Edit Interject Hyperlink Opens a window to create or edit an Interject Hyperlink. To demonstrate this, you will setup an Interject hyperlink that opens the Report Library. Step 1: First select an empty cell and enter a name for the hyperlink: Step 2: Click on Quick Tools \"Create/Edit Interject Hyperlink\" and then \"Run and Close\": You can select the type of Hyperlink you want to add. In this case select \"Interject Report Library\" from the dropdown: Step 3: Next you need to enter a reference for the hyperlink. You can either select a \"Target Cell Name\" or a \"Cell Address\". The \"Target Cell Name\" option will display a dropdown list of all the range names in the sheet. In this case, use the \"Cell Address\" option and enter the cell reference of your hyperlink name and \"Set Hyperlink\": The Hyperlink is created!: Create/Edit Interject Hyperlink : Preserving Styles You can set up a predetermined styling for the Hyperlinks by using a defined name. When a cell has the defined name of \"InterjectConfig_HyperlinkStyle\", Interject will use the styling of that cell to apply to a hyperlink that is created. Step 1: Select a cell that matches the formatting you wish the Hyperlinks to have and define the cell with the name \"InterjectConfig_HyperlinkStyle\": Step 2: Now create another hyperlink using the method in the previous section: Notice the new hyperlink has the same style as the cell with the defined name \"InterjectConfig_HyperlinkStyle\": "},{"title":"Quick Tools - Names Tools","url":"/wIndex/QuickTools-Names.html","content":" Overview The Names Tools within Quick Tools deal with defined names. Working with names is sometimes cumbersome within Excel. The Quick Tools makes the process easier and more convenient. Excel Name Manager For reference: To view all the names within the Workbook, click on \"Name Manager\" on the Formulas tab: Each name has a scope, which can refer to a single sheet or the entire Workbook. The default scope when Excel creates a name is the Workbook. However, when a name is scoped to a single sheet, you can have multiple names with the same name, each referring to a single sheet. Notice there are 3 names that are scoped to the sheet \"ReportVariable\" and 3 similar names scoped to \"ReportRange\": You can define a name that is scoped to the entire Workbook by selecting the range and entering the name in the Name Box: To create a name scoped to a single sheet the Excel way, you have to use the Name manager. Select the range and click \"New\" from the Name Manger: Next, give the range a name and defined the scope: Remove Names with Ref Errors from Book Removes all named ranges in the Workbook with invalid references (Ref!). Invalid references happen when cells refer to another cell that has been deleted. In such a case, Excel will display \"Ref!\" instead of the valid reference to indicate it is an invalid reference. Before: Note: This name refers to a cell that is currently invalid: After: Remove All Names from Sheet Removes all user named ranges that are scoped to the current sheet. Before: Note: There are 3 names that are scoped to the current sheet \"ReportRange\": After: Remove All Names from Book Removes all user named ranges in the entire Workbook. Note: This will still retain certain Excel predefined names such as Print_Titles & Print_Area. Before: After: Create Range Name for Sheet Creates a named range (Sheet scoped) for current cell or selected range. Before: First select the range you want to define: Create a name for the range: After: Notice the new name is defined to the sheet \"ReportRange\": Create Range Names for Sheet for 2 Column Selection Creates a named range or multiple names (Sheet scoped) for right side column cells, the names of which are supplied in the left side column cells (selection must be 2 columns and max 30 rows). Before: First select the 2 column range you want to create names for: Next open up the Interject Quick Tools and select the tool and click OK: After: Notice 3 names were created correspond to the entries in the left column and they are all scoped to the sheet: Appending A Prefix and/or Suffix To A Name Interject can automatically have a prefix and/or suffix appended to a defined name when you create it using Quick Tools. For example, you may want to append the prefix \"input_\" to your filter names. You must first set up a few defined names for this to work. Step 1: First select an empty spot within the report to store your prefix and suffix: Step 2: Next, select the prefix name and give it the defined name \"InterjectConfig_NamedRangePrefix\": Step 3: Give the suffix name the defined name \"InterjectConfig_NamedRangeSuffix\": Step 4: Now select the 2 columns you want to create names for: Step 5: Next open up the Interject Quick Tools and select the tool and click OK: Notice the defined names have the prefix and suffix you just set up: "},{"title":"Quick Tools - Other Tools","url":"/wIndex/QuickTools-Other.html","content":" Overview The Other Tools within Quick Tools are a collection of miscellaneous tools. Unique List from Selection Makes a text list of all selected cell items and drops them into a new tab in sorted ascending order. Before: Select the list: After: Note the list is inserted into a new sheet called \"UniqueList\": Unhide All Sheets Unhides all hidden sheets in the Workbook. Before: After: "},{"title":"Quick Tools - Panes Tools","url":"/wIndex/QuickTools-Panes.html","content":" Overview The Panes Tools within the Quick Tools deal with the window panes in Excel. Freeze/Unfreeze Panes Freezes/Unfreezes the window panes setup with a jFreezePanes() function. For an example of how to setup the jFreezePanes function, see Setting Up jFreezePanes. Freeze all Tabs Freezes window panes in all tabs setup with a jFreezePanes() function. "},{"title":"Memory Logging","url":"/wTroubleshoot/RAM-Monitoring.html","content":" Overview Memory Logging is a toggled tool in an Excel report. When it is turned on, the memory use of the current workbook is recorded. To send the Memory Logs to Interject, see Send Report To Interject. To turn on Memory Logging: Step 1: Click Diagnostics on the Interject Ribbon: Step 2: Select Toggle Memory Logging and click Execute Selected Action: "},{"title":"Real World Use Cases","url":"/wAbout/Real-World-Use-Cases.html","content":" Overview Since its availability in 2012, Interject has solved a wide variety of problems for small and enterprise-sized companies. Below are excerpts of use cases that can provide more detailed views of what Interject can do. Each use case is supported by personal references, which can be provided on request. High-Speed General Ledger Access Most accounting departments use the general ledger trial balance and journal entry listing reports. Accounts payable detail ledgers are also common. A large national organization, which often takes several minutes to access these frequently used data, rely on Interject to achieve access times of approximately 20 seconds. With typical report generations exceeding 15,000 every month, Interject helped them recover 7,920 productive hours per year. Estimating a low end labor cost of $30 per hour, that's approximately $240,000 in saved wages. What reports does your organization access all the time, and how much time are you spending to access them? Consolidated Financials With Accountability Useful, consolidated financial reporting is no longer an advanced feature of Enterprise Resource Planning, but a basic aspect of software. The next must-have feature is now providing collaboration and explanations around monthly and quarterly variance analysis. Interject has provided consolidated financial reporting within MS Excel that not only report on data and variances, but are interactive as well. Interject reports can accept the stories behind the variances so they can reach the executives that steer the company's performance. The largest client for this use case has over 250 locations across the USA with revenue exceeding 2.5B per year. Interject is used for monthly actuals variance analysis, monthly projections to prior projection analysis and for annual budget reviews. Financial Reporting Tools for Microsoft Excel Interject provides a suite of tools to report financial and operational data right inside MS Excel. It is secure, fast, and lets end users operate Excel as they normally would to further refine and augment reports. Data can be reported in a specific lists or columns (Data Lists), or in a special \"query-anything-and-put-anywhere\" approach (Data Cells) that can be as effective as a pivot table with less formatting restrictions. The largest client uses Interject reporting exclusively to support all SEC 10K and 10Q reporting. All of their locations leverage the Interject report engine, which totals approximately 1,200,000 report queries per year with limited hardware required. Collecting Fixed Asset Data Without Sending Spreadsheets Keeping track of fixed assets throughout a large enterprise can involve many emailed spreadsheets and consolidating the responses. This can take hours of detailed work. Interject reports are currently used to both distribute fixed asset data to managers and receive information on the status of the assets. Inputs from managers may note if an asset is retired or scrapped, could contain suggestions for correcting fixed asset data, and also may indicate when an annual fixed asset review is completed. This use case is an excellent example of how much can be done when a report within Excel allows for user inputs. With Interject , managers are only allowed to see assets for their own locations which keeps it all very simple. Adding Visibility and Collaboration to the Financial Close The financial close that occurs each month for every organization is normally a whirlwind of tight deadlines packed in the first 7 days of the next month. For large organizations, the close process is highly organized, since it involves hundreds of tasks and people. What is typically missing in today's financial solutions are means to collaborate on the status of tasks and to share visibility of progress. It is also important that certain tasks, such as reconciliations or journal entries, are tracked in real-time with the ability for supervisors to sign off on certain steps. Reconciliations can also can become outdated as entries hit the books later in the close and should be rechecked. Interject has provided these 'Close Management' features for the last two years with an approach that is light and nimble for an organization to use. The Close Management features have grown recently to handle full Journal Entry controls and integration into an outside ERP. This greatly reduces journal entry errors, rework, and time spent handling journal entries throughout a large enterprise. Balance Sheet Reconciliation Management Visibility to balance sheet reconciliations can be a challenge, since most reconciliations are created and maintained in spreadsheet files. Interject has provided a way to retain reconciliations in spreadsheets, but they are fully tracked where the files are saved in the network. Interject may be considered the best of both worlds for some organizations that want to keep reconciliations in spreadsheets while having enterprise features and controls around them. These features can include the visibility to see which reconciliations are completed, which are signed off by appropriate personnel, which have direct access to the files wherever they are saved on the network, and which can verify that reconciliations are still valid compared to the current general ledger. Preparing for future audits has never been easier and more controlled. Financial Planning: Budgeting and Forecasting Since the beginning, Interject has provided annual budgeting and monthly forecasting features through a web integrated Excel interface. It has been used by a large, public, solid waste company for all annual budgeting, monthly forecasting, budget version tracking for the board of directors, and planning collaboration across locations. Over 250 locations utilize the solution every month, which feeds into consolidated, interactive financial reports that help upper management influence the organization's performance. The depth of the budgeting and projection system demonstrates the long budget and forecasting management experience Interject team possesses, as well as their passion to ensure users work efficiently. Raising the Bar for Journal Entries Although many ERP systems provide a means to manage and create new journal entries, most journal entries start in a spreadsheet file. These journal entry files are then imported into the ERP system using the procedures prescribed by the ERP software. There are four typical challenges in this area: 1) pushing the JE into the ERP can take minutes instead of seconds; 2) JE's are not adequately validated to ensure errors do not get into the G/L, and this creates rework; 3) the source of the JE data and approvals are not easy to track; and 4) there are limited options to preview the journal entry's impact on financials before having to upload them into the ERP. Interject provides a Journal Entry Control process that can be integrated into an ERP to shave significant time off of monthly close processes, provide better visibility for management, and provide traceability for audits. It is currently used in an organization that has over 300,000 journal entries per year and is considered one of the most powerful solutions that has been provided by the corporate office. Adding Change Visibility to Operational Data It is commonly accepted that billing systems, like those in medical and dental offices, will change over time as payments are applied and transactions are adjusted. Changes and deletions to previous month's records, as well as updates to patient and insurance carriers, are not easily tracked in a monthly close where prior period changes are not captured in current reports. This creates complications. Interject supplied a solution for a regional dental company by providing a reporting database that serves as a control door for all prior period changes, including those related to categorization of revenue from carrier and patient record changes. It provides a solid foundation for improved financial trending, for performance metric analysis, and for provider compensation calculations. Interject has industry experience in both medical and dental reporting, especially in areas of accounting and provider compensation. Secure Delivery of Payroll Check Registers Distributing payroll registers can sometimes be cumbersome for large enterprises with many locations. In many cases, corporate personnel will access the entire register and split it up into smaller reports to send to each location manager. Although this can be inefficient, the real risk is emailing the wrong confidential payroll register to the wrong manager. Interject was able to cleanly resolve both issues with a large Ceridian payroll implementation. Now, they download and import a single master register to a highly secure database. This occurs along with the security setup tables from the payroll software. Using the security data, Interject provides a single place where all managers can pull only their payroll registers on demand, and this is done directly from their spreadsheet reports. Several drill down reports give several views of the register quickly. Now, hundreds of hours are saved each week, risk is significantly mitigated, and the end users have more data then they imagined, all with a keystroke. Collaborate on Cloud Data Cloud based ERPs are growing in popularity and will continue to do so in the next 10 years. Web-based reporting, however, still presents challenges that reduce the efficiency and flexibility users require. Interject provides interactive reporting within MS Excel on a Force.com platform-based ERP called Financial Force. Collections staff can quickly make notes on invoices and customer accounts within their analysis reports, and the whole team can view this information. Furthermore, complete financial Board of Directors packets can be crafted in Excel and updated for the next month with just a few clicks. The options are limitless with Interject technology. Now, both on-premise data and cloud data are under your control. "},{"title":"Real-World Walkthroughs","url":"/wAbout/Real-World-Walkthroughs.html","content":" Overview From simple PL charts for accountants to trend reports for CEO's and CFO's, there are a variety of processes you may encounter. In this section, you will look at three Real-World scenarios that explain how to use Interject. Keep in mind, these are simple examples of tasks that may be more complicated in different cases. Customer Aging This use case is a basic Customer Aging demo for tracking multiple customer invoices. For the walkthrough, you will open a basic aging summary. You will then drill into the details tab, take notes on specific unpaid invoices, and save them back to the database. This Customer Aging report will also provide the data needed to drill further into each order and customer. Inventory Reports This use case is a basic example for tracking product quantities in and out of our inventory. For this walkthrough, you will open a basic summary of our product categories and total quantities. You will then drill into the Inventory Detail tab to view the specific products within that category. There is also a secondary inventory option which allows us to view all of the categories and the products within them in a single sheet. Financial Reports This use case is for controllers or accountants who work with financial data and spreadsheets. In this walkthrough, you will open a Profit and Loss (PL) Trend report and drill into the supporting detail from the general ledger detail. The Journal Entry (JE) Query report will provide our account level detail and will allow us to drill further into each journal entry. "},{"title":"Reviewing Report Formulas","url":"/wIndex/Report-Formula-Reviews.html","content":" Overview Reviewing the Interject report formulas for accuracy is a vital step in eliminating report errors. Sometimes when setting up a report formula, it can be difficult to enter everything correctly as there can be nested formulas each with their own set of parameters. Many times there are a number of parentheses, commas, and quotation marks that must be entered correctly. This page shows two tools that help with these formulas: Excel's Function Wizard and Interject's Cell Formula Review. Getting Started This page will use the the Customer Collections report previously used in the Real World Walkthrough. In order to access the report formulas, you need to first unfreeze the panes. From the Quick Tools, select PANES: Freeze/UnFreeze Panes and click Run and Close. The Function Wizard Excel's Function Wizard makes it easy to enter formulas inside the report and enter or modify parameters. First select the formula you want to edit and press the fx button to bring up the Function Wizard. The Function Wizard window displays the currently selected formula and all its parameters. It also conveniently displays descriptions for the formula and all the parameters. In addition, the result of the formula is displayed (if there are errors in the formula, it will show the error). For more about Excel's Function Wizard and entering formulas, see Microsoft's documentation. Cell Formula Review The Function Wizard is good for entering and modifying formulas but it does not show detailed information concerning the Interject parameters. For this you can use Interject's Cell Formula Review. (This is found on the Interject advanced menu). First select the cell containing the formula you want to review. Then click Validation Report and then select Cell Formula Review. This Formula Review window appears showing a convenient display of the formula and its parameters and values. This window has four different options to further customize the display: Show Formula References Show Param Names Indent Data Cell Functions Indent All Others The Show Formula References will display the references used in the parameters. Show Param Names displays the names of the parameters. The Indent Data Cell Functions will include indentation before each entry. Finally, the Indent All Others will provide newlines for each entry. "},{"title":"Report Library Basics","url":"/wAbout/Report-Library-Basics.html","content":" Overview The Report Library is a way for your team to share reports from a central location going beyond just a Sharepoint or a Shared Network Folder. The reports are uploaded to the library and can be accessed from any computer using Excel via Interject. The reports can also be versioned, so reverting to a previous report is simple. Opening The Report Library Once Interject is installed, an Interject Ribbon will be added to Excel. Step 1: To start, open the Interject ribbon menu. Step 2: The Report Library is located on the far left of the ribbon. Click the icon or use the keystroke Ctrl+Shift+L on the keyboard. Step 3: The Report Library consists of folders and sub-folders, just like a typical folder hierarchy (max three levels deep for simplicity). Resizing the Report Library By clicking on the Resize button in the top right corner, you can resize the Report Library. Available preset sizes are Small, Medium, and Large or you may scale it to a custom value. For more info about resizing forms, see Resizing Interject Windows. The Report Library Each section of the Report Library is detailed below. Before opening a report from the library, look through the Folders and Report Links, and check the Link Version of the desired report. There are 3 main sections of the Report Library: Folders Section, Report Link Section, and the Link Version Section. Folders Section The Folders section of the Report Library contains a hierarchy of folders (max three folders deep for simplicity). You can expand or collapse any folder. Report Link Section The reports of the selected folder will be displayed here in the Report Link section. Link Version Section This section contains details of the selected report. There are 4 areas within this section: View Details (Brings up the Link Details window where you can view additional information about this report) View Documentation (Opens the documentation for this report. If grayed out then documentation has not been set up) Link Name & Description Versions (Displays the Version note and lists all the versions) Status There are 4 statuses of a link version, each with their own distinctive color: Green : Currently Live Gray : Superseded, this is an older version of a previous live report Yellow : In Testing Red : In Development Opening a Report To open a report: Select the folder Select the report Select the version Click Open Link The report link is opened: Navigating the Report Library Navigating the Report Library efficiently is important when there are numerous reports. Interject makes this easy by providing 3 ways to navigate the Library and find the report you are looking for. Using the Search Feature You can search the Report Library for reports by clicking on the Search button: The Search Report Links window shows all the reports in order: As you begin typing in the search field, the most relevant hits will appear on top: Clicking on Goto will highlight that report in the Report Library: You may also download a .CSV file, which lists the ID, Report Path, Report Name, and Description of all reports: Using the keyboard Step 1: Use the up and down arrow keys to navigate the folders. Use the right and left keys to move in and out of sub-folders. Step 2: To go into the Report Link section hit Tab. Step 3: To get back to the Folder section hit Shift Tab. Step 4: Hitting enter on a report link will open the report and close the Report Library. Using the mouse Step 1: Click on a folder to see the Report Link(s) in the folder Step 2: Double-click on a folder to open a sub-folder Step 3: Double-clicking on a link opens the report and keeps the Report Library open, while single-clicking the Open Link button will open the selected report and close Report Library For how to add or change files in the Report Library, please check out Lab Create: Updating the Report Library . Related Links Logging In Updating Interject Interject Ribbon Menu Items Real-World Walkthroughs Inventory Reports "},{"title":"ReportCalc()","url":"/wIndex/ReportCalc.html","content":" Function Summary The ReportCalc function executes a calculation of formulas in a worksheet or workbook when triggered upon a designated event. Note: The latest version of the Interject Add-In will automatically perform a recalculation on the workbook whenever the pull, save, or drill window is displayed. For an example of this function, see Lab Create: Hiding Rows & Columns. Function Arguments OnPullSaveOrBothA string that defines what type of action(s) the event in OnClearRunOrBoth refer to: Pull action, Save action, or Both actions. Type String Constraints \"pull\", \"save\", \"both\" If Blank Function Error OnClearRunOrBothA string indicating which event(s) will trigger this function: Clear event, Run event, or Both events. Type String Constraints \"clear\", \"run\", \"both\" If Blank Function Error SheetOrWorkBookA string indicating to perform the calculation on a designated sheet or the entire workbook. Type String Constraints \"sheet\", \"workbook\" If Blank Function Error SheetNameThe name of the sheet that the calculation will be performed on if SheetOrWorkBook = \"sheet\". Type String Constraints Max 255 char If Blank Will run calculations on current sheet DisableTrue: This function will be disabled.False: This function will be enabled. Type Boolean Constraints If Blank False Excel Formula Bar Example =ReportCalc(\"Both\",\"Both\",\"Sheet\") Function Composition Argument Name Example Mapping Explanation Function Name =ReportCalc() The name of this function. OnPullSaveOrBoth \"Both\" A pull or save action are designated as the run event. OnClearRunOrBoth \"Both\" A clear event or run event (defined in OnPullSaveOrBoth) will trigger this function being ran. SheetOrWorkbook \"Sheet\" A calculation of the sheet will be performed. SheetName Blank to indicate to perform the calculation on the current sheet. Disable Blank to indicate to enable this function. Trigger Combination List The execution of this function is determined by a combination of an Interject action and an Interject event. An action is a pull or save action whereas an event is a clear or run event. The values in the OnPullSaveOrBoth and OnClearRunOrBoth arguments will determine what actions/events trigger the function's execution. Trigger Combo OnPullSaveOrBoth OnClearRunOrBoth Event Function Executes On 1 Pull Clear Pull-Clear 2 Save Clear Save-Clear 3 Both Clear Pull-Clear, Save-Clear 4 Pull Run Pull-Run 5 Save Run Save-Run 6 Both Run Pull-Run, Save-Run 7 Pull Both Pull-Run, Pull-Clear 8 Save Both Save-Run, Save-Clear 9 Both Both Pull-Run, Pull-Clear, Save-Run, Save-Clear "},{"title":"ReportDefaults()","url":"/wIndex/ReportDefaults.html","content":" Function Summary The ReportDefaults function will copy a value from a range to another range when triggered upon a designated event. This function can be used to restore default values to a report after a desired action. For example, the values in the parameters section can be cleared after a clear event or set to a particular value. It can also be used to set initial parameters before a report is ran. For an example of this function, see Lab Create: Customer Aging Detail. Function Arguments OnPullSaveOrBothA string that defines what type of action(s) the event in OnClearRunOrBoth refer to: Pull action, Save action, or Both actions. Type String Constraints \"pull\", \"save\", \"both\" If Blank Function Error OnClearRunOrBothA string indicating which event(s) will trigger this function: Clear event, Run event, or Both events. Type String Constraints \"clear\", \"run\", \"both\" If Blank Function Error TransferPairsA single Pair or PairGroup that contains a list of Pairs. The Pair function transfers values from one cell to another. Type Pair()/PairGroup() Constraints Max 34 Pairs If Blank Does not transfer any values Excel Formula Bar Example =ReportDefaults(\"Save\",\"Clear\",PairGroup(Pair(\"\",C12,FALSE))) Function Composition Argument Name Example Mapping Explanation Function Name =ReportDefaults() The name of this function. OnPullSaveOrBoth \"Pull\" A pull action is designated as the run event. OnClearRunOrBoth \"Clear\" A clear event or run event (defined in OnPullSaveOrBoth) will trigger this function being ran. TransferPairs PairGroup(Pair(\"\",C12,FALSE)) Will copy a blank value to C12. Trigger Combination List The execution of this function is determined by a combination of an Interject action and an Interject event. An action is a pull or save action whereas an event is a clear or run event. The values in the OnPullSaveOrBoth and OnClearRunOrBoth arguments will determine what actions/events trigger the function's execution. Trigger Combo OnPullSaveOrBoth OnClearRunOrBoth Event Function Executes On 1 Pull Clear Pull-Clear 2 Save Clear Save-Clear 3 Both Clear Pull-Clear, Save-Clear 4 Pull Run Pull-Run 5 Save Run Save-Run 6 Both Run Pull-Run, Save-Run 7 Pull Both Pull-Run, Pull-Clear 8 Save Both Save-Run, Save-Clear 9 Both Both Pull-Run, Pull-Clear, Save-Run, Save-Clear Embeddable Helper Functions PairGroup Pair "},{"title":"ReportDrill()","url":"/wIndex/ReportDrill.html","content":" Function Summary The ReportDrill function provides a convenient way to run another targeted function while at the same time, transferring contextual data for filtering to that function. It is widely used as a way to connect and pass information between workbooks and worksheets. Drilling takes a defined input and passes it in as a parameter to another workbook or worksheet, similar to hyperlinks on a web page. Depending on the types of input behind the hyperlink, more detailed and specific information can be viewed. The ReportDrill function can be structured in ways that make drilling data very powerful. In order to set up a drill that targets a function in another workbook, it is necessary to set up a drill code in theReport Library. For an example of this function, see Lab Drill: Customer Aging. Function Arguments ReportCellToRunA cell address in a worksheet within your report that contains an InterjectData Pull Function. The Data Pull Functions of the sheet of this range will be ran upon a Drill action. (This parameter will be ignored if ReportCodeToRun is not blank) Type Range Constraints If Blank Uses cell reference in ReportCodeToRun ReportCodeToRunThe name of the drill code that has been set up in theReport Librarythat allows you to drill between workbooks. Type String Constraints Max 255 char If Blank Uses cell reference in ReportCellToRun TransferPairsA Pair or a PairGroup that contains a list of Pairs. The Pair function transfers values from one cell to another. This is typically used to filter the data you are drilling. This function will transfer the value in the Pair range (determined by the active cell you are drilling) to the target cell. Type Pair()/PairGroup() Constraints Max 34 Pairs If Blank Does not transfer anything DrillNameThe name of this drill as will be displayed in the list of data drills. Type String Constraints Max 255 char If Blank Uses the ReportCellToRun/ReportCodeToRun as the name Excel Formula Bar Example =ReportDrill(CustomerOrderHistory!C10,,PairGroup(Pair(B22:B24, CustomerOrderHistory!C23)),\"Drill to Customer Orders History\") Function Composition Argument Name Example Mapping Explanation Function Name =ReportDrill() The name of this function. ReportCellToRun CustomerOrderHistory!C10 The Data Pull Functions within sheet \"CustomerOrderHistory\" will be ran upon a Drill action. ReportCodeToRun \"\" Left blank because targeted function is found in ReportCellToRun argument. TransferPairs PairGroup(Pair(B22:B24, CustomerOrderHistory!C23)) When this drill is ran, will copy the value in B22:B24 (whatever row the active cell is on when the drill is ran) to the CustomerOrderHistory worksheet cell C23. DrillName \"Drill to Customer Orders History\" The drill name will appear as \"Drill to Customer Orders History\" inside the Data Drill window. Embeddable Helper Functions PairGroup Pair "},{"title":"ReportFixed()","url":"/wIndex/ReportFixed.html","content":" Function Summary The ReportFixed function pulls data from a data source and inserts it into a spreadsheet. It is similar to the ReportRange function but with the addition of receiving row names as input in addition to column names. Only data that is mapped to both these row and column names from the data source will be inserted. Consequently, the range where data is inserted is defined by the boundaries of the RowDefRange and the ColDefRange. Data returned by this function can be filtered, formatted, and customized for a specific desired report. For an example of this function, see Create Inventory Fixed Lab. Function Arguments DataPortalThe name of the Interject DataPortal that will be used as the data source for this function. Type String/jDataPortal() Constraints Max 255 char If Blank Function Error RowDefRangeA single column range whose values that map to the RowDefName field of the data source. Each value in this range will be matched to the same value in the RowDefName of the data source. Only these values will be populated with data after a pull action.If the data source does not have a column \"RowDefName\", this function will look for a column name defined in the column in the ColDefRange and the row defined here in RowDefRange. For example, if row 2 is defined in ColDefRange and column B is defined in RowDefRange, this function will look at the value in B2 to map the data to.If there are records in the data source that are excluded in this range, the data from those columns will be included in a [leftover] section after a pull action. Type Range Constraints Must be a single column If Blank Function Error ColDefRangeA single row range designating the names of the columns of the data source. Only data from these columns will be inserted. Best practice is to use a range instead of whole rows. Type Range Constraints Max 500 columns. Must be a single row. If Blank Will Error ParametersThe cells designating the parameters for the DataPortal. The values in these cells will filter the data that is inserted from the data source. Type Param() Constraints The values must match the order of the parameters in the data source (The order can be verified using the Validation Report) If Blank Data is not filtered Excel Formula Bar Example =ReportFixed(\"NorthwindFixed\",B14:B27,2:2) Function Composition Argument Name Example Mapping Explanation Function Name =ReportFixed() The name of this function. DataPortal \"NorthwindFixed\" This function will use the \"NorthwindCustomers\" DataPortal for the data source. RowDefRange B14:B27 The names found in B14:B27 will be used to map to the column names found in row 2 (ColDefRange). Only data that intersects these names will be inserted on these rows. ColDefRange 2:2 The names found in row 2 will be used to map to the row names found in row B14:B27 (RowDefRange). Only data that intersects these names will be inserted on these columns. Parameters N/A The data returned from the data source will not be filtered. Embeddable Helper Functions jDataPortal Param "},{"title":"ReportGrouping()","url":"/wIndex/ReportGrouping.html","content":" Function Summary The ReportGrouping function will collapse or expand groups within the sheet when triggered upon a designated event. This function is helpful in grouping or ungrouping sections in a ReportVariable after it is generated. For an example of this function, see Lab Create: Inventory Variable Report. Function Arguments OnPullSaveOrBothA string that defines what type of action(s) the event in OnClearRunOrBoth refer to: Pull action, Save action, or Both actions. Type String Constraints \"pull\", \"save\", \"both\" If Blank Function Error OnClearRunOrBothA string indicating which event(s) will trigger this function: Clear event, Run event, or Both events. Type String Constraints \"clear\", \"run\", \"both\" If Blank Function Error RowOrColumnGroupA string indicating if row groupings will be acted upon or column groupings. Type String Constraints \"row\", \"column\" If Blank Function Error GroupLevelA string indicating to expand or collapse all groupings or an integer from 1 to 8 indicating what level the groups will be set to. Type String Constraints \"expand\", \"collapse\", or 1 through 8 If Blank Function Error DisabledTrue: This function will be disabled.False: This function will be enabled. Type Boolean Constraints If Blank False Excel Formula Bar Example =ReportGrouping(\"Both\",\"Run\",\"Column\",\"Collapse\",FALSE) Function Composition Argument Name Example Mapping Explanation Function Name =ReportGrouping() The name of this function. OnPullSaveOrBoth \"Both\" A pull or save action are designated as the run event. OnClearRunOrBoth \"Run\" A run event (defined in OnPullSaveOrBoth) will trigger this function being ran. RowOrColumnGroup \"Column\" Only column groupings will be acted upon when this function is triggered. GroupLevel \"Collapse\" The column groupings will collapse upon being triggered. Disabled FALSE This function will run. Trigger Combination List The execution of this function is determined by a combination of an Interject action and an Interject event. An action is a pull or save action whereas an event is a clear or run event. The values in the OnPullSaveOrBoth and OnClearRunOrBoth arguments will determine what actions/events trigger the function's execution. Trigger Combo OnPullSaveOrBoth OnClearRunOrBoth Event Function Executes On 1 Pull Clear Pull-Clear 2 Save Clear Save-Clear 3 Both Clear Pull-Clear, Save-Clear 4 Pull Run Pull-Run 5 Save Run Save-Run 6 Both Run Pull-Run, Save-Run 7 Pull Both Pull-Run, Pull-Clear 8 Save Both Save-Run, Save-Clear 9 Both Both Pull-Run, Pull-Clear, Save-Run, Save-Clear "},{"title":"ReportHideRowOrColumn()","url":"/wIndex/ReportHideRowOrColumn.html","content":" Function Summary The ReportHideRowOrColumn function will hide a designated row or column when triggered upon a designated event. If a cell within the defined range = \"hide\", the function will hide that row or column when triggered. If the defined range is a single row, the function will hide the column. If this range is a single column, the function will hide the row. Typically this function is used to hide data that is impertinent to the current purpose of the report and/or filters being used. For example, a user can set up a report to hide invoices with zero balances or to show only accounts with a delinquent status, etc. (Note: the rows/columns are not actually hidden in the sense that Excel hides them. They are hidden from view by setting their width/height to 0. A user can simply expand the hidden rows by expanding the width.) For an example of this function, see Lab Create: Hiding Rows & Columns. Function Arguments OnPullSaveOrBothA string that defines what type of action(s) the event in OnClearRunOrBoth refer to: Pull action, Save action, or Both actions. Type String Constraints \"pull\", \"save\", \"both\" If Blank Function Error OnClearRunOrBothA string indicating which event(s) will trigger this function: Clear event, Run event, or Both events. Type String Constraints \"clear\", \"run\", \"both\" If Blank Function Error RowOrColumnGroupA single row or column where the function will look for the value of \"hide\". If a cell in this range = \"hide\", the function will hide that row or column. If this range is a single row, the function will hide the column. If this range is a single column, the function will hide the row. Type Range Constraints Must be a single row or single column If Blank Function Error DisabledTrue: This function will be disabled.False: This function will be enabled. Type Boolean Constraints If Blank False Excel Formula Bar Example =ReportHideRowOrColumn(\"Pull\",\"Both\",C47:C48,FALSE) Function Composition Argument Name Example Mapping Explanation Function Name =ReportGrouping() The name of this function. OnPullSaveOrBoth \"Both\" A pull or save action are designated as the run event. OnClearRunOrBoth \"Run\" A run event (defined in OnPullSaveOrBoth) will trigger this function being ran. RowOrColumnGroup C47:C48 A cell value of \"hide\" in the range C47:48 will hide that row when triggered. Disabled FALSE This function will run. Trigger Combination List The execution of this function is determined by a combination of an Interject action and an Interject event. An action is a pull or save action whereas an event is a clear or run event. The values in the OnPullSaveOrBoth and OnClearRunOrBoth arguments will determine what actions/events trigger the function's execution. Trigger Combo OnPullSaveOrBoth OnClearRunOrBoth Event Function Executes On 1 Pull Clear Pull-Clear 2 Save Clear Save-Clear 3 Both Clear Pull-Clear, Save-Clear 4 Pull Run Pull-Run 5 Save Run Save-Run 6 Both Run Pull-Run, Save-Run 7 Pull Both Pull-Run, Pull-Clear 8 Save Both Save-Run, Save-Clear 9 Both Both Pull-Run, Pull-Clear, Save-Run, Save-Clear "},{"title":"Report Library Links","url":"/wAbout/ReportLibraryLinks.html","content":" Overview The Report Library provides an easy interface where new reports can be uploaded, existing reports can be updated, and details and documentation about the report can be added. Reports are called links in the Library. These links can be a link to a file you have saved locally or one uploaded to the Report Library. Creating a New Link (File Open) Step 1: To create a new link, begin by opening the Excel file you wish to upload and open the Report Library. Step 2: Select the folder you wish to upload the file to and right click in the Report Links section. Step 3: Hover the cursor over Save Current Workbook and select Create New Link. Step 4: The Report Link Details Form appears where you can enter details about the report: Enter a name for the report Enter an optional description Set the status of the report to live (see here for more info on statuses) Click save to save the report The new report now appears in the Library: Note: If the file is not saved locally you will be prompted to save the file first before you can upload the file to the Report Library: Creating a New Link (File Not Open) Step 1: To save a file that is not currently open, begin by right clicking on the Report Links Section and select Create New Link: Step 2: The Link Details Window appears where you can enter details about the report: Enter a name for the report Enter an optional description Set the status of the report to live Step 3: For the Link Path, click Browse: Browse to the file you wish to upload and click Open: Step 4: Finally click Save: Creating a New Version to an Existing Link The Report Library provides an interface where reports can be versioned. Each successive upload will automatically increment the version number: Step 1: To upload a new version to an existing link, begin by opening the Excel file you wish to upload and open the Report Library. Step 2: Next, right click on the name of the link you want to update, hover the cursor over Save Current Workbook and select Create New Link. Step 3: You may optionally choose to enter a name for this version and add notes detailing the changes: Step 4: Finally click Save. You will be prompted to set the previous version to \"Superseded\". Click Yes: Notice the new report is added and automatically incremented the version number: Updating a Report Link Step 1: Begin by opening the Report Library and right click on the report you wish to edit. Hover the cursor over Selected Link and you can view the sub menu: Step 2: Click the Edit option: Step 3: The Link Details Window appears where you can change the details. Update the description and click Save: Notice the details of the version have been updated: The Report Link Details Form The Report Link Details form displays information about the selected report. This form is specific to the selected report link version. Link Name: The name of the report link Sort: The sorting order of the report link (see here for more info) Link Description: A description for the report Link Folder: The folder in which the report resides Status: The current status of the report (see here for more info) Version Name: The name of the version for this report Version Note: A note explaining the version of this report Link Type: The type of this link (see here for more info) Link Path: The path to the source for this report link Documentation Type: The type of documentation for this report link (see here for more info) Documentation Path: The path to the source for this report's documentation Drill Codes: Drill codes enable drilling to this report link (see here for more info) Types of Links The reports in the Report Library are called links because the link to a source. As such there are different types of links for a report: Local/Network File: The report source is a file that resides on the user's local or network system Folder Link: A link to a local or network folder (e.g. D:\\Users\\test\\Documents) Website Link: The report source is a website link (i.e. http or https address) Report Library File: The report source is a file that resides inside the Report Library itself Note: Files that reside in the cloud (e.g. OneDrive, SharePoint, etc.) cannot be saved as a local file or a Report Library file (see here for more info). Link Documentation You have the option to include documentation for the selected report link. This could be a local file, a link to a specific folder, or a website link: "},{"title":"Report Library Organization","url":"/wAbout/ReportLibraryOrganization.html","content":" Overview The Report Library is designed to be a central hub for all your report sharing and organizational needs. It contains its own folder hierarchy (3 levels deep for simplicity) for basic organization. You can sort reports within a folder and also the nested folders themselves. Standard operations such as editing, moving, and deleting are available as well. Sorting Reports Links Report links in a Report Library folder appear in the Report Links section: The order is determined by the report's Sort property: The Sort property is a numerical value that will sort the report in relation to the other report's Sort property. In other words, the reports will be sorted based on their Sort value (ascending). If two reports have identical values, they will be sorted in order of their Link ID: You can view and edit the report's Sort value and its details by right clicking on the report, click Selected Link, and then Edit From the Link Details window, you can change the sort value and then click Save: Sorting Folders Sorting folders is done in a similar manner. Simply right click on the folder, click Edit Folder and then adjust the Folder Sort value and press Enter: Folder Organization Adding a folder is easy. Right click on the folder you want to add a subfolder, click Add Subfolder. Enter a name for the folder and press Enter. From the folder menu, you can also Edit a folder or Delete a folder. "},{"title":"ReportLookup()","url":"/wIndex/ReportLookup.html","content":" Function Summary The ReportLookup function pulls a single piece of data from a data source and inserts it into a single cell within a spreadsheet. Function Arguments DataPortalThe name of the Interject DataPortal that will be used as the data source for this function. The helper functionjDataPortal()can be used to further define which row to use from the DataPortal. Type String/jDataPortal() Constraints Max 255 char If Blank Function Error TargetDataRangeA single cell where the data will be inserted. If the DataPortal returns a list of data, this function will return the value from the first row. Type Cell Range Constraints Single cell If Blank No data inserted ColDefRangeColumn definition range: A single cell indicating the name of the column of the data source. Only data from this column will be inserted. Type Cell Range Constraints Single cell If Blank Returns the first column from the data source ParametersThe cells designating the matching parameters for the DataPortal. The values in these cells will filter the data that is inserted from the data source. Type Param() Constraints The values must match the order of the parameters in the data source (The order can be verified using the [ Validation Report ](/wTroubleshoot/Reports.html#validation-report-for-pullsave-events) ) If Blank Data is not filtered Excel Formula Bar Example =ReportLookup(jDataPortal(\"NorthwindCustomers\",1,\"[CustomerID] Like '%SAVE%'\"),C14,H1) Function Composition Argument Name Example Mapping Explanation Function Name =ReportLookup() The name of this function. DataPortal \"jDataPortal(\"NorthwindCustomers\",1,\"[CustomerID] Like ‘%SAVE%’)\" Uses the helper function jDataPortal() designating the \"NorthwindCustomers\" DataPortal. Filters the records to include only those whose CustomerID contains the string \"save\". TargetDataRange C14 Data will be inserted to cell C14. ColDefRange H1 The column name in H1 will be the data field that is returned from the data source. Parameters N/A The data returned from the data source will not be filtered. Embeddable Helper Functions jDataPortal Param "},{"title":"ReportMacro()","url":"/wIndex/ReportMacro.html","content":" Function Summary The ReportMacro function executes a designated VBA macro when triggered upon a designated event. For an example of this function, see Lab Create: Using Report Macro Function Arguments OnPullSaveOrBothA string that defines what type of action(s) the event in OnClearRunOrBoth refer to: Pull action, Save action, or Both actions. Type String Constraints \"pull\", \"save\", \"both\" If Blank Function Error OnClearRunOrBothA string indicating which event(s) will trigger this function: Clear event, Run event, or Both events. Type String Constraints \"clear\", \"run\", \"both\" If Blank Function Error MacroNameToRunThe name of the macro this function will run. Type String Constraints Macro in VBA cannot contain parameters If Blank Will Error Excel Formula Bar Example =ReportMacro(\"Pull\",\"Both\",\"MyCustomFunction\") Function Composition Argument Name Example Mapping Explanation Function Name =ReportMacro() The name of this function. OnPullSaveOrBoth \"Pull\" A pull action is designated as the run event. OnClearRunOrBoth \"Both\" A clear event or run event (defined in OnPullSaveOrBoth) will trigger this macro being ran. MacroNameToRun \"MyCustomFunction\" The macro \"MyCustomFunction\" will be ran. Trigger Combination List The execution of this function is determined by a combination of an Interject action and an Interject event. An action is a pull or save action whereas an event is a clear or run event. The values in the OnPullSaveOrBoth and OnClearRunOrBoth arguments will determine what actions/events trigger the function's execution. Trigger Combo OnPullSaveOrBoth OnClearRunOrBoth Event Function Executes On 1 Pull Clear Pull-Clear 2 Save Clear Save-Clear 3 Both Clear Pull-Clear, Save-Clear 4 Pull Run Pull-Run 5 Save Run Save-Run 6 Both Run Pull-Run, Save-Run 7 Pull Both Pull-Run, Pull-Clear 8 Save Both Save-Run, Save-Clear 9 Both Both Pull-Run, Pull-Clear, Save-Run, Save-Clear "},{"title":"ReportMerge()","url":"/wIndex/ReportMerge.html","content":"Function Summary Allows the user to merge multiple Excel reports into one based on jMergePoints . For examples and discussion, view the tutorial. Function Arguments Parameter Name Description Default Optional FileName The name of the workbook to connect. Either a full path name to the file, or a Report Library Sheet Link Code NO MergeID A unique ID to identify the jMerge (required to clear tabs) YES RemoveTabsOnClear Indicates whether or not to delete merged tabs upon clearing data FALSE (TRUE requires a MergeID Value) YES PullOnOpen Run a pull on the worksheet after opening FALSE YES MergePoints Provide a range reference to a list of jMergePoint functions. If none is provided, then all jMergePoint functions within the book will be considered YES Disabled Function will not execute on pull if set to true FALSE YES Excel Formula Bar Example Function Composition "},{"title":"ReportRange()","url":"/wIndex/ReportRange.html","content":" Function Summary The ReportRange function pulls data from a data source and inserts it into a single range within a spreadsheet. Receives a list of columns for input that will be pulled from the data source. Only data that is mapped to these column names will be inserted. Data returned by this function can be filtered, formatted, and customized for a specific desired data set. For an example of this function, see Lab Create: Customer Aging . Function Arguments DataPortalThe name of the Interject DataPortal that will be used as the data source for this function. Type String/jDataPortal() Constraints Max 255 char If Blank Function Error TargetDataRangeThe multi-row range where the data will be inserted. Data is inserted starting at the first row. The last row defined here will be the bottom row below the data. Type Range Constraints Min 2 rows. Must match the width of the range defined in ColDefRange If Blank No data inserted ColDefRangeColumn definition range: A range designating the names of the columns of the data source. Only data from these columns will be inserted. Range can span multiple rows. Best practice is to use a range instead of whole rows. Type Range Constraints Max 500 columns. Must match the width of the range defined in TargetDataRange If Blank Uses all columns from the data source FormatRangeThe range designating the formatting style (e.g. font, color) for the inserted data. Data will be formatted using this range as a template. Formulas can also be included, which will be used for the inserted data. Type Range Constraints Must match the range dimensions defined in ColDefRange If Blank Uses the formatting in the first row defined in TargetDataRange ParametersThe cells designating the parameters for the DataPortal. The values in these cells will filter the data that is inserted from the data source. Type Param() Constraints The values must match the order of the parameters in the data source (The order can be verified using the [ Validation Report ](/wTroubleshoot/Reports.html#validation-report-for-pullsave-events) ) If Blank Data is not filtered UseEntireRowTrue: New rows will be added for the inserted data. Rows in TargetDataRange (besides bottom row) will be deleted first.False: Data will be inserted into the range defined in TargetDataRange. Cells outside this range will be unaffected. Type Boolean Constraints If Blank False PutFieldNamesAtTopTrue: Will insert the column names on a row above the inserted data if ColDefRange is blank.False: Will not insert column names. Type Boolean Constraints If Blank False RetainRowColumnsThe list of column names that will be used as a key for retaining information within the inserted data range. This can be a comma delimited string or a cell reference of a single column name defined in ColDefRange. All data in the column(s) matching the names in this argument will be retained after a a Pull-Run or Pull-Clear event. Consequently, such rows are also retained and not deleted. However, all data in columns that are not defined in this argument are blanked out after a clear action or overridden after a pull action.This feature makes forecasting calculations to remain in the report instead of being cleared. For an example of this feature, see Using the Retain Feature . Type String/jCombine()/jCombine_If() Constraints Max 255 char If Blank All data within the TargetDataRange is cleared on a clear action InsertNewRowsWithinTrue: If RetainRowsColumns is used, will insert new data in the TargetDataRange on a pull action by alphabetical order of the first key listed in RetainRowColumns. False: Will insert new data below the already present data in the TargetDataRange on a pull action if valid columns are defined in RetainRowColumns. Type Boolean Constraints If Blank False UseTopSpacerRowTrue: Inserts data starting on the second row defined in TargetDataRange. (Retains top row on a Pull-Run or Pull-Clear event.)False: Inserts data starting on the first row defined in TargetDataRange. Type Boolean Constraints If Blank False Excel Formula Bar Example =ReportRange(\"NorthwindCustomers\",B14:H15,B2:H2,B4:H4,Param(C7,C8,C9),FALSE,FALSE,,FALSE,FALSE) Function Composition Argument Name Example Mapping Explanation Function Name =ReportRange() The name of this function. DataPortal \"NorthwindCustomers\" This function will use the \"NorthwindCustomers\" DataPortal for the data source. TargetDataRange B14:H15 Data will be inserted starting at row 14 and only extend from column B to column H. ColDefRange B2:H2 The column names specified in B2:H2 will determine which data fields are returned from the data source. FormatRange B4:H4 The formatting used in this range will be used as a template for the inserted data. Parameters Param(C7,C8,C9) Cells C7, C8, and C9 will correspond to the parameters in the data source to filter the inserted data. UseEntireRow FALSE Interject will insert a range into the sheet and will not insert full rows. PutFieldNamesAtTop FALSE The inserted data will not contain a row of the column names above the data. RetainRowColumns \"\" Left blank to indicate not to retain any data in the TargetDataRange (B14:H15). InsertNewRowsWithin FALSE This value is automatically set to false since RetainRowColumns is blank. UseTopSpacerRow FALSE Data will be inserted on the first row (14) defined in TargetDataRange. Embeddable Helper Functions jDataPortal Param jCombine jCombineIF "},{"title":"ReportRun()","url":"/wIndex/ReportRun.html","content":" Function Summary The ReportRun function will run a designated report function(s) within a Workbook when triggered upon a designated event. This is typically used to synchronize the running of functions in other sheets within the Workbook. For an example of this function, see Working with Pivot Tables. Function Arguments ReportCellToRunA cell address in a worksheet within your report that contains an InterjectDataorFormattingfunction. Type Range Constraints If Blank Will not run a report RunEntireWorksheetTrue: Will run all the report functions located in the sheet specified in ReportCellToRun.False: Will only run the report function designated in ReportCellToRun. Type Boolean Constraints If Blank True OnActionA string indicating which event(s) will trigger this function (see table below for events). Type String Constraints \"pull\", \"save\", \"pullandsave\", \"pullclear\", \"saveclear\", \"pullandsaveclear\" If Blank \"pull\" Excel Formula Bar Example =ReportRun(ReportRunTargetForPivot!C4,TRUE,\"PullClear\") Function Composition Argument Name Example Mapping Explanation Function Name =ReportRun() The name of this function. ReportCellToRun ReportRunTargetForPivot!C4 The function located in sheet \"ReportRunTargetForPivot\" at cell C4 will be ran when this function is triggered. RunEntireWorksheet TRUE All data report functions located in sheet \"ReportRunTargetForPivot\" will be ran when this function is triggered. OnAction PullClear This function will be triggered on a Pull-Clear event only. Trigger Combination List The execution of this function is determined by an Interject event. Trigger OnAction Event Function Executes On 1 Pull Pull-Run 2 Save Save-Run 3 PullAndSave Pull-Run, Save-Run 4 PullClear Pull-Clear 5 SaveClear Save-Clear 6 PullAndSaveClear Pull-Clear, Save-Clear "},{"title":"ReportSave()","url":"/wIndex/ReportSave.html","content":" Function Summary The ReportSave function will use a designated DataPortal to save data in a worksheet to a data source. Typically this is done by setting up a DataPortal to run a procedure to take the designated data in the worksheet and save it to a data source. This function makes it convenient to upload local changes to the data source without having to edit it directly. For an example of this function, see Lab Dev: Customer Aging Detail . Function Arguments DataPortalThe name of the Interject DataPortal that will be used when this function is ran. Type String/jDataPortal() Constraints Max 255 char If Blank Function Error RowDefRangeA single column range that contains the unique row IDs that will be used to save the rows in this range via the data source. A corresponding column name for the unique ID must be included in this column in the row defined in ColDefRange. Type Range Constraints Must be a single column If Blank Function Error ColDefRangeColumn definition range: The range designating the names of the columns that will be saved via the data source. Type Range Constraints If Blank Will save all columns ResultsRangeThe range designating the names of the columns that will be returned via the data source. Typically this is information sent back from the DataPortal to be displayed after a save. Type Range Constraints If Blank No return data is displayed ParametersThe cells designating the matching parameters for the DataPortal. The values in these cells will filter the data that is saved via the data source. Type Param() Constraints The values must match the order of the parameters in the data source (The order can be verified using the [ Validation Report ](/wTroubleshoot/Reports.html#validation-report-for-pullsave-events) ) If Blank Data is not filtered AutoSaveFileTrue: Will save the workbook after a save action. (Saves at current save location without prompt. If file is not saved already, will save in the last used folder.)False: Will not save the workbook after a save action. Type Boolean Constraints If Blank False CaptureAllRowsTrue: Will override the value in RowDefRange and designate all rows to be saved via the data source.False: Will use the value in RowDefRange to determine which rows are saved. Type Boolean Constraints If Blank False Excel Formula Bar Example =ReportSave(\"NorthwindInvoiceSave\",B42:B58,12:12,14:14) Function Composition Argument Name Example Mapping Explanation Function Name =ReportSave() The name of this function. DataPortal \"NorthwindInvoiceSave\" This function will use the \"NorthwindInvoiceSave\" DataPortal for the data source. RowDefRange B42:B58 The unique row IDs are designated to be in column B and the rows 42:58 will be saved. Col Def Range 12:12 Row 12 is designated to contain the column names that will be saved via the data source. ResultRange 14:14 Row 14 is designated to contain the column names that will be displayed when returning from the save. Parameters N/A Data will not be filtered for this save. Embeddable Helper Functions jDataPortal Param "},{"title":"ReportVariable()","url":"/wIndex/ReportVariable.html","content":" Function Summary The ReportVariable function pulls data from a data source and inserts it into a spreadsheet. It is similar to the ReportFixed function because it takes row names as input in addition to column names. Only data that is mapped to both these row and column names from the data source will be inserted. Consequently, the range where data is inserted is defined by the boundaries of the RowDefRange and the ColDefRange. Data returned by this function can be filtered, formatted, and customized for a specific desired report. This function differs from the ReportFixed function in that it will group the data based on the values defined in the RowDefRange argument. The grouping feature allows the data to be collapsed and expanded by category. Note: Entries for each group must contain an empty row above in order to populated with data correctly. For an example of this function, see Lab Create: Inventory Variable. Function Arguments DataPortalThe name of the Interject DataPortal that will be used as the data source for this function. Type String/jDataPortal() Constraints Max 255 char If Blank Function Error RowDefRangeA single column range that contains the values that map to the RowDefName field of the data source. Each value in this range will be matched to the same value in the RowDefName of the data source. Only these values will be populated with data after a pull action.If the data source does not have a column \"RowDefName\", this function will look for a column name defined in the column in the ColDefRange and the row defined here in RowDefRange. For example, if row 2 is defined in ColDefRange and column B is defined in RowDefRange, this function will look at the value in B2 to map the data to.If there are records in the data source that are excluded in this range, the data from those columns will be included in a [leftover] section after a pull action. Type Range Constraints A single column range (not whole) If Blank Function Error ColDefRangeColumn definition range: A single row designating the names of the columns of the data source. Only data from these columns will be inserted. Range cannot span multiple rows. Best practice is to use a range instead of whole rows. Type Range Constraints Max 500 columns. Must be a single row. If Blank Will Error FormatRangeThe range designating the formatting style (e.g. font, color) for the inserted data. Inserted data will be formated using this range as a template. Formulas can also be included, which will be used for the inserted data. Type Range Constraints Must match the range dimensions defined in ColDefRange If Blank Uses the formatting in the first row defined in RowDefRange ParametersThe cells designating the parameters for the DataPortal. The values in these cells will filter the data that is inserted from the data source. Type Param() Constraints The values must match the order of the parameters in the data source (The order can be verified using the Validation Report) If Blank Data is not filtered RetainRowColumnsThe list of column names that will be used as a key for retaining information within the inserted data range. This can be a comma delimited string or a cell reference of a single column name defined in ColDefRange. All data in the column(s) matching the names in this argument will be retained after a clear or pull action. Consequently, such rows are also retained and not deleted. However, all data in columns that are not defined in this argument are blanked out after a clear action or overridden after a pull action.This feature makes forecasting calculations to remain in the report instead of being cleared. For an example of this feature, see Using the Retain Feature . Type String/jCombine()/jCombine_If() Constraints Max 255 char If Blank All data within the TargetDataRange is cleared on a clear action InsertNewRowsWithinTrue: If RetainRowsColumns is used, will insert new data in the TargetDataRange on a pull action by alphabetical order of the first key listed in RetainRowColumns. False: Will insert new data below the already present data in the TargetDataRange on a pull action if valid columns are defined in RetainRowColumns. Type Boolean Constraints If Blank False UseTopSpacerRowTrue: Inserts data starting on the second row defined in TargetDataRange. (Retains top row on a pull or clear action.)False: Inserts data starting on the first row defined in TargetDataRange. Type Boolean Constraints If Blank False Excel Formula Bar Example =ReportVariable(\"NorthwindVariable\",B18:B54,2:2,4:4,Param(I14,I15),,FALSE,FALSE) Function Composition Argument Name Example Mapping Explanation Function Name =ReportVariable() The name of this function. DataPortal \"NorthwindVariable\" This function will use the \"NorthwindVariable\" DataPortal for the data source. RowDefRange B18:B54 The names found in B18:B54 will be used to map to the column names found in row 2 (ColDefRange). Only data that intersects these names will be inserted on these rows. Data will be grouped by the names found in this range. ColDefRange 2:2 The names found in row 2 will be used to map to the row names found in row B14:B27 (RowDefRange). Only data that intersects these names will be inserted on these columns. Format Range 4:4 The formatting used in row 4 will be used as a template for the inserted data. Parameters Param(I14,I15) Cells I14 and I15 will correspond to the parameters in the data source to filter the inserted data. RetainRowColumns \"\" Left blank to indicate not to retain any data in the TargetDataRange (B14:H15). InsertNewRowsWithin FALSE This value is automatically set to false since RetainRowColumns is blank. UseTopSpacerRow FALSE Data will be inserted on the first row (18) defined in RowDataRange. Embeddable Helper Functions jDataPortal Param jCombine jCombineIF "},{"title":"User Support","url":"/wTroubleshoot/Reporting-A-Problem.html","content":" Overview User Support can be accessed inside Excel and provide an interface to report a problem to Interject or display Interject's contact information. The User Support can be accessed via the User Support button on the Interject ribbon: Sending Logs Some problems may occasionally require more extensive logging to identify and solve. Turning on Verbose Logging will send more details when reporting a problem. You may also send Memory Logs by turning this feature on. Send Report to Interject As long as verbose logging is turned on, Report a Problem can send user data and execution diagnostics to the Interject support team. To use Report a Problem: Step 1: Click User Support Help from the Interject Ribbon. Step 2: Click the Report a Problem tab in the Interject - Support popup window. Step 3: Fill out the form with an Email and optional Name, Phone, and Description then Click Send Report.. Contact Interject Support Step 1: Click User Support Help from the Interject Ribbon. Step 2: Click the Contact Interject tab in the Interject - Support popup window. Step 3: Contact Interject support via phone or email. "},{"title":"Interject Report Layout and Design Standards","url":"/wDesign/Reporting-Design-Standards.html","content":"Coming soon… "},{"title":"Report Errors","url":"/wTroubleshoot/Reports.html","content":" Overview Report errors occur for many reasons, some of which relate to how the server handles data and moves it to the report. Other reasons may include the report's direct configuration within Excel. Interject provides various tools and features to help quickly and accurately diagnose report errors. Click one of the topics below to read more. Investigating Report Errors Two tools useful in investigating report errors are the Progress Bar Window and the Client Activity Dashboard. The Interject Progress Bar Window appears when processing data. When an error occurs, it will display information related to the error. The Client Activity Dashboard is an Excel file setup to generate information regarding activity, Data Portal usage, user details, version reports, and error logs. Validation Report for Interject Events The Validation Report is a tool to help report writers see how specific report formulas behave by interpreting the report formula inputs. When developing report templates, there are often many Interject report formulas in a single template. The Validation Report can help analyze the the order of execution for the report formulas. This ensures that Interject events occur in the intended order. The Validation Report also shows report writers how to check if a formula is included in the Interject execution plan. Finally, the Validation Report tool displays to writers which parameters are being included in every report formula on the report template. Testing Data Connections Before setting up a Data Connection to a Database, you can verify that the connection can be established within Excel by accessing the Check Connection window. View SQL Test for ActiveCell The View SQL Test for ActiveCell tool can be used to track down issues with the SQL stored procedures being called by an Interject report function. Only ReportRange(), ReportVariable(), ReportFixed(), and ReportSave() report functions are supported by View SQL Test for ActiveCell. "},{"title":"Request Context Parse","url":"/wIndex/Request-Context-Parse.html","content":" Overview The RequestContext_Parse stored procedure is used as a callable helper procedure when utilizing the Interject_RequestContext system parameter. It converts the XML nodes that are brought in by the system parameter into variable values. These variable values correspond to all the other system parameters that Interject offers. Procedure Variables When a Data Portal is setup with the System Parameter \"Interject_RequestContext\", Interject will send context information which can be accessed and parsed to local variables in the the Stored Procedure or command: Variable Data Type Description ExcelVersion nvarchar(100) The version of Excel being used IdsVersion nvarchar(100) The version of Interject being used FileName nvarchar(1000) The name of the file FilePath nvarchar(1000) The path of the file TabName nvarchar(1000) The name of the Excel tab of the report formula CellRange nvarchar(100) The cell reference of the report formula SourceFunction nvarchar(100) The type of report formula UtcOffset decimal(6,4) The number of hours UTC needs to offset to get to the current local time ColDefItems nvarchar(max) A list of Column Definition items ResultDefItems nvarchar(max) A list of Result Definition items RowDefItems nvarchar(max) A list of Row Definition items RowDefItems2 nvarchar(max) A list of Row Definition items that include a unique RowDefName MachineLoginName nvarchar(100) The login name of the user MachineName nvarchar(100) The name of the machine being used FullName nvarchar(100) The full name of the user UserId nvarchar(100) The User ID of the user ClientId nvarchar(100) The Client ID of the user LoginName nvarchar(100) The login name or email of the user LoginAuthTypeID int <Not used> LoginDateUTC datetime The UTC date and time of the user's login UserRoles nvarchar(max) A list of roles of the user UserContextEncrypted nvarchar(4000) <Not used> XMLDataToSave nvarchar(max) The data from the report to be processed/saved The RequestContext_Parse Code Get The Stored Procedure SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RequestContext_Parse]') AND type in (N'P', N'PC')) BEGIN EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[RequestContext_Parse] AS' END GO /************************************************************************* * Interject DATA SYSTEMS, INC CONFIDENTIAL * * © 2016 Interject Data Systems, Inc. * All Rights Reserved. * * NOTICE: All information contained herein is, and remains the property of Interject Data Systems, Incorporated. * The intellectual and technical concepts contained herein are proprietary to Interject Data Systems, Incorporated * and may be covered by U.S. and Foreign Patents, patents in process, and are protected by trade secret or copyright law. * Dissemination of this information or reproduction of this material is strictly forbidden unless prior written permission is obtained * from Interject Data Systems, Incorporated. */ /* TEST CODE declare @Interject_RequestContext nvarchar(max) ,@ExcelVersion nvarchar(100) ,@IdsVersion nvarchar(100) ,@FileName nvarchar(1000) ,@FilePath nvarchar(1000) ,@TabName nvarchar(1000) ,@CellRange nvarchar(100) ,@SourceFunction nvarchar(100) ,@UtcOffset decimal(6,4) ,@ColDefItemsDelimited nvarchar(max) ,@ResultDefItemsDelimited nvarchar(max) ,@RowDefItemsDelimited nvarchar(max) ,@MachineLoginName nvarchar(100) ,@MachineName nvarchar(100) ,@Interject_UserID nvarchar(100) ,@Interject_ClientID nvarchar(100) ,@Interject_LoginName nvarchar(100) ,@Interject_LoginAuthTypeID int ,@Interject_LoginDateUTC datetime ,@Interject_UserRolesDelimited nvarchar(max) ,@UserContextEncrypted nvarchar(4000) ,@XMLDataToSave nvarchar(max) set @Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>14.0</ExcelVersion> <IdsVersion>2.2.5.13</IdsVersion> <FileName>Interject_TestFile (version 1).xlsb</FileName> <FilePath>C:\\Users\\jeffh-high\\AppData\\Roaming\\Microsoft\\Excel</FilePath> <TabName>DB_ReportRangeShort</TabName> <CellRange>C6</CellRange> <SourceFunction>Range</SourceFunction> <UtcOffset>7</UtcOffset> <ColDefItems></ColDefItems> <ResultDefItems> <Value>customerid</Value> <Value>companyname</Value> </ResultDefItems> <RowDefItems> <Value Row=\"1\">customerid</Value> <Value Row=\"2\">companyname</Value> </RowDefItems> <UserContext> <MachineLoginName>myusername</MachineLoginName> <MachineName> </MachineName> <UserId>jxR2bDnk4jg</UserId> <ClientId>CKKCYyCtT</ClientId> <LoginName>my@email.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>06/16/2014 11:04:08</LoginDateUtc> <UserRoles> <Role>ClientAdmin</Role> </UserRoles> </UserContext> <UserContextEncrypted>KAJeycwLWiy0t4Xe4GxPiI0sskc=</UserContextEncrypted> <XMLDataToSave> <c Column=\"Row\" OrigValue=\"Row\" /> <c Column=\"Start\" OrigValue=\"Start\" /> <c Column=\"CodeInputs\" OrigValue=\"CodeInputs\" /> <c Column=\"Description\" OrigValue=\"Description\" /> <c Column=\"End\" OrigValue=\"End\" /> <c Column=\"Duration\" OrigValue=\"Duration\" /> <c Column=\"Client\" OrigValue=\"Client\" /> <c Column=\"Code1\" OrigValue=\"Code1\" /> <c Column=\"Code2\" OrigValue=\"Code2\" /> <c Column=\"Code3\" OrigValue=\"Code3\" /> <c Column=\"Code4\" OrigValue=\"Code4\" /> <c Column=\"ChargeCategory\" OrigValue=\"ChargeCategory\" /> <r> <Row>18</Row> <Start>0.291666666666667</Start> <CodeInputs>.ids.dev..</CodeInputs> <Description>upgrade timelook</Description> <End /> <Duration>15.4</Duration> <Client>ids</Client> <Code1>dev</Code1> <Code2 /> <Code3 /> <Code4 /> <ChargeCategory>NB</ChargeCategory> </r> </XMLDataToSave> </RequestContext> ' exec [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@ExcelVersion = @ExcelVersion output ,@IdsVersion = @IdsVersion output ,@FileName = @FileName output ,@FilePath = @FilePath output ,@TabName = @TabName output ,@CellRange = @CellRange output ,@SourceFunction = @SourceFunction output ,@UtcOffset = @UtcOffset output ,@ColDefItemsDelimited = @ColDefItemsDelimited output ,@ResultDefItemsDelimited = @ResultDefItemsDelimited output ,@RowDefItemsDelimited = @RowDefItemsDelimited output ,@MachineLoginName = @MachineLoginName output ,@MachineName = @MachineName output ,@Interject_UserID = @Interject_UserID output ,@Interject_ClientID = @Interject_ClientID output ,@Interject_LoginName = @Interject_LoginName output ,@Interject_LoginAuthTypeID = @Interject_LoginAuthTypeID output ,@Interject_LoginDateUTC = @Interject_LoginDateUTC output ,@Interject_UserRolesDelimited = @Interject_UserRolesDelimited output ,@UserContextEncrypted = @UserContextEncrypted output ,@XMLDataToSave = @XMLDataToSave output Select @ExcelVersion as '@ExcelVersion' ,@IdsVersion as '@IdsVersion' ,@FileName as '@FileName' ,@FilePath as '@FilePath ' ,@TabName as '@TabName' ,@CellRange as '@CellRange' ,@SourceFunction as '@SourceFunction' ,@UtcOffset as '@UtcOffset' ,@ColDefItemsDelimited as '@ColDefItemsDelimited' ,@ResultDefItemsDelimited as '@ResultDefItemsDelimited' ,@RowDefItemsDelimited as '@RowDefItemsDelimited' ,@MachineLoginName as '@MachineLoginName' ,@MachineName as '@MachineName' ,@Interject_UserID as '@Interject_UserID' ,@Interject_ClientID as '@Interject_ClientID' ,@Interject_LoginName as '@Interject_LoginName' ,@Interject_LoginAuthTypeID as '@Interject_LoginAuthTypeID' ,@Interject_LoginDateUTC as '@Interject_LoginDateUTC' ,@Interject_UserRolesDelimited as '@Interject_UserRolesDelimited' ,@UserContextEncrypted as '@UserContextEncrypted' ,@XMLDataToSave as '@XMLDataToSave' -- since all paramters are optional, you can also just ask for the values you need like below exec [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@Interject_LoginName = @Interject_LoginName output ,@Interject_UserID = @Interject_UserID output Select @Interject_UserID as '@Interject_UserID' ,@Interject_LoginName as '@Interject_LoginName' */ ALTER proc [dbo].[RequestContext_Parse] @Interject_RequestContext nvarchar(max) ,@ExcelVersion nvarchar(100) = '' output ,@IdsVersion nvarchar(100) = '' output ,@FileName nvarchar(1000) = '' output ,@FilePath nvarchar(1000) = '' output ,@TabName nvarchar(1000) = '' output ,@CellRange nvarchar(100) = '' output ,@SourceFunction nvarchar(100) = '' output ,@UtcOffset decimal(6,4) = 0 output ,@ColDefItemsDelimited xml = '' output ,@ResultDefItemsDelimited xml = '' output ,@RowDefItemsDelimited xml = '' output ,@MachineLoginName nvarchar(100) = '' output ,@MachineName nvarchar(100) = '' output ,@Interject_UserID nvarchar(100) = '' output ,@Interject_ClientID nvarchar(100) = '' output ,@Interject_LoginName nvarchar(100) = '' output ,@Interject_LoginAuthTypeID int = 0 output ,@Interject_LoginDateUTC datetime = null output ,@Interject_UserRolesDelimited nvarchar(max) = '' output ,@UserContextEncrypted nvarchar(4000) = '' output ,@Interject_XMLDataToSave xml = null output as /* This SP is a helper to pull all data from the RequestContext that is passed from Interject. Below are examples to pull all the data or just a couple values that you need (which is much less typing) */ set nocount on declare @Interject_RequestContextXML as xml set @Interject_RequestContextXML = @Interject_RequestContext select @ExcelVersion = T.c.value('./ExcelVersion[1]', 'nvarchar(100)') ,@IdsVersion = T.c.value('./IdsVersion[1]', 'nvarchar(100)') ,@FileName = T.c.value('./FileName[1]', 'nvarchar(1000)') ,@FilePath = T.c.value('./FilePath[1]', 'nvarchar(1000)') ,@TabName = T.c.value('./TabName[1]', 'nvarchar(1000)') ,@CellRange = T.c.value('./CellRange[1]', 'nvarchar(100)') ,@SourceFunction = T.c.value('./SourceFunction[1]', 'nvarchar(100)') ,@UtcOffset = T.c.value('./UtcOffset[1]', 'decimal(6,4)') --,@ColDefItemsDelimited = T.c.value('./ColDefItems[1]', 'nvarchar(max)') --,@ResultDefItemsDelimited = T.c.value('./ResultDefItems[1]', 'nvarchar(max)') --,@RowDefItemsDelimited = T.c.value('./RowDefItems[1]', 'nvarchar(max)') ,@MachineLoginName = T.c.value('./UserContext[1]/MachineLoginName[1]', 'nvarchar(100)') ,@MachineName = T.c.value('./UserContext[1]/MachineName[1]', 'nvarchar(100)') ,@Interject_UserID = T.c.value('./UserContext[1]/UserId[1]', 'nvarchar(100)') ,@Interject_ClientID = T.c.value('./UserContext[1]/ClientId[1]', 'nvarchar(100)') ,@Interject_LoginName = T.c.value('./UserContext[1]/LoginName[1]', 'nvarchar(100)') ,@Interject_LoginAuthTypeID = T.c.value('./UserContext[1]/LoginAuthTypeId[1]', 'int') ,@Interject_LoginDateUTC = T.c.value('./UserContext[1]/LoginDateUtc[1]', 'datetime') --,@Interject_UserRolesDelimited = T.c.value('./UserContext[1]/UserRolesDelimited[1]', 'nvarchar(max)') ,@UserContextEncrypted = T.c.value('./UserContextEncrypted[1]', 'nvarchar(100)') ,@XMLDataToSave = T.c.value('./XMLDataToSave[1]', 'nvarchar(max)') from @Interject_RequestContextXML.nodes('/RequestContext') T(c) --set @XMLDataToSave = cast(@Interject_RequestContextXML.query('/RequestContext/XMLDataToSave') as nvarchar(max)) set @XMLDataToSave = CONVERT(nvarchar(max),@Interject_RequestContextXML.query('/RequestContext/XMLDataToSave')) -- UserRolesDelimited Select @Interject_UserRolesDelimited = STUFF ( ( SELECT ',' + T.c.value('.', 'nvarchar(100)') from @Interject_RequestContextXML.nodes('RequestContext/UserContext[1]/UserRoles[1]/Role') T(c) ORDER BY T.c.value('.', 'nvarchar(100)') FOR XML PATH ('') ) ,1 ,1 ,'' ) -- ColDefItemsDelimited Select @ColDefItemsDelimited = STUFF ( ( SELECT ',' + T.c.value('.', 'nvarchar(500)') from @Interject_RequestContextXML.nodes('RequestContext/ColDefItems/Value') T(c) ORDER BY T.c.value('.', 'nvarchar(500)') FOR XML PATH ('') ) ,1 ,1 ,'' ) -- ResultDefItemsDelimited Select @ResultDefItemsDelimited = STUFF ( ( SELECT ',' + T.c.value('.', 'nvarchar(500)') from @Interject_RequestContextXML.nodes('RequestContext/ResultDefItems/Value') T(c) ORDER BY T.c.value('.', 'nvarchar(500)') FOR XML PATH ('') ) ,1 ,1 ,'' ) -- RowDefItemsDelimited Select @RowDefItemsDelimited = STUFF ( ( SELECT ',' + isnull(T.c.value('.', 'nvarchar(500)'),'') + isnull('|' + T.c.value('./@Row', 'nvarchar(500)'),'') from @Interject_RequestContextXML.nodes('RequestContext/RowDefItems/Value') T(c) ORDER BY T.c.value('.', 'nvarchar(500)') FOR XML PATH ('') ) ,1 ,1 ,'' ) GO Testing the Procedure This stored procedure is auxiliary in nature and is intended to be used to split out each system parameter encapsulated by the RequestContext System parameter provided by an Interject data portal. The following is the standalone test code for the stored procedure: Get The Test Code declare @Interject_RequestContext nvarchar(max) ,@ExcelVersion nvarchar(100) ,@IdsVersion nvarchar(100) ,@FileName nvarchar(1000) ,@FilePath nvarchar(1000) ,@TabName nvarchar(1000) ,@CellRange nvarchar(100) ,@SourceFunction nvarchar(100) ,@UtcOffset decimal(6,4) ,@ColDefItemsDelimited nvarchar(max) ,@ResultDefItemsDelimited nvarchar(max) ,@RowDefItemsDelimited nvarchar(max) ,@MachineLoginName nvarchar(100) ,@MachineName nvarchar(100) ,@Interject_UserID nvarchar(100) ,@Interject_ClientID nvarchar(100) ,@Interject_LoginName nvarchar(100) ,@Interject_LoginAuthTypeID int ,@Interject_LoginDateUTC datetime ,@Interject_UserRolesDelimited nvarchar(max) ,@UserContextEncrypted nvarchar(4000) ,@XMLDataToSave nvarchar(max) set @Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>14.0</ExcelVersion> <IdsVersion>2.2.5.13</IdsVersion> <FileName>Interject_TestFile (version 1).xlsb</FileName> <FilePath>C:\\Users\\jeffh-high\\AppData\\Roaming\\Microsoft\\Excel</FilePath> <TabName>DB_ReportRangeShort</TabName> <CellRange>C6</CellRange> <SourceFunction>Range</SourceFunction> <UtcOffset>7</UtcOffset> <ColDefItems></ColDefItems> <ResultDefItems> <Value>customerid</Value> <Value>companyname</Value> </ResultDefItems> <RowDefItems> <Value Row=\"1\">customerid</Value> <Value Row=\"2\">companyname</Value> </RowDefItems> <UserContext> <MachineLoginName>myusername</MachineLoginName> <MachineName> </MachineName> <UserId>jxR2bDnk4jg</UserId> <ClientId>CKKCYyCtT</ClientId> <LoginName>my@email.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>06/16/2014 11:04:08</LoginDateUtc> <UserRoles> <Role>ClientAdmin</Role> </UserRoles> </UserContext> <UserContextEncrypted>KAJeycwLWiy0t4Xe4GxPiI0sskc=</UserContextEncrypted> <XMLDataToSave> <c Column=\"Row\" OrigValue=\"Row\" /> <c Column=\"Start\" OrigValue=\"Start\" /> <c Column=\"CodeInputs\" OrigValue=\"CodeInputs\" /> <c Column=\"Description\" OrigValue=\"Description\" /> <c Column=\"End\" OrigValue=\"End\" /> <c Column=\"Duration\" OrigValue=\"Duration\" /> <c Column=\"Client\" OrigValue=\"Client\" /> <c Column=\"Code1\" OrigValue=\"Code1\" /> <c Column=\"Code2\" OrigValue=\"Code2\" /> <c Column=\"Code3\" OrigValue=\"Code3\" /> <c Column=\"Code4\" OrigValue=\"Code4\" /> <c Column=\"ChargeCategory\" OrigValue=\"ChargeCategory\" /> <r> <Row>18</Row> <Start>0.291666666666667</Start> <CodeInputs>.ids.dev..</CodeInputs> <Description>upgrade timelook</Description> <End /> <Duration>15.4</Duration> <Client>ids</Client> <Code1>dev</Code1> <Code2 /> <Code3 /> <Code4 /> <ChargeCategory>NB</ChargeCategory> </r> </XMLDataToSave> </RequestContext> ' exec [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@ExcelVersion = @ExcelVersion output ,@IdsVersion = @IdsVersion output ,@FileName = @FileName output ,@FilePath = @FilePath output ,@TabName = @TabName output ,@CellRange = @CellRange output ,@SourceFunction = @SourceFunction output ,@UtcOffset = @UtcOffset output ,@ColDefItemsDelimited = @ColDefItemsDelimited output ,@ResultDefItemsDelimited = @ResultDefItemsDelimited output ,@RowDefItemsDelimited = @RowDefItemsDelimited output ,@MachineLoginName = @MachineLoginName output ,@MachineName = @MachineName output ,@Interject_UserID = @Interject_UserID output ,@Interject_ClientID = @Interject_ClientID output ,@Interject_LoginName = @Interject_LoginName output ,@Interject_LoginAuthTypeID = @Interject_LoginAuthTypeID output ,@Interject_LoginDateUTC = @Interject_LoginDateUTC output ,@Interject_UserRolesDelimited = @Interject_UserRolesDelimited output ,@UserContextEncrypted = @UserContextEncrypted output ,@XMLDataToSave = @XMLDataToSave output Select @ExcelVersion as '@ExcelVersion' ,@IdsVersion as '@IdsVersion' ,@FileName as '@FileName' ,@FilePath as '@FilePath ' ,@TabName as '@TabName' ,@CellRange as '@CellRange' ,@SourceFunction as '@SourceFunction' ,@UtcOffset as '@UtcOffset' ,@ColDefItemsDelimited as '@ColDefItemsDelimited' ,@ResultDefItemsDelimited as '@ResultDefItemsDelimited' ,@RowDefItemsDelimited as '@RowDefItemsDelimited' ,@MachineLoginName as '@MachineLoginName' ,@MachineName as '@MachineName' ,@Interject_UserID as '@Interject_UserID' ,@Interject_ClientID as '@Interject_ClientID' ,@Interject_LoginName as '@Interject_LoginName' ,@Interject_LoginAuthTypeID as '@Interject_LoginAuthTypeID' ,@Interject_LoginDateUTC as '@Interject_LoginDateUTC' ,@Interject_UserRolesDelimited as '@Interject_UserRolesDelimited' ,@UserContextEncrypted as '@UserContextEncrypted' ,@XMLDataToSave as '@XMLDataToSave' -- since all paramters are optional, you can also just ask for the values you need like below exec [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@Interject_LoginName = @Interject_LoginName output ,@Interject_UserID = @Interject_UserID output Select @Interject_UserID as '@Interject_UserID' ,@Interject_LoginName as '@Interject_LoginName' An Example Using the Procedure Additionally, the following code is a sample stored procedure that calls the request context parse helper stored procedure. It is an example for how to individually select the different variables returned by the request context parse stored procedure. Sample Stored Procedure SET ANSI_NULLS ON GO SET QUOTED_IDENTIFIER ON GO IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Sample_Request_Context_Call]') AND type in (N'P', N'PC')) BEGIN EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[Sample_Request_Context_Call] AS' END /* -------------------------------- --TEST CODE -------------------------------- DECLARE @Interject_RequestContext NVARCHAR(MAX) set @Interject_RequestContext = '<?xml version=\"1.0\" encoding=\"utf-16\" standalone=\"yes\"?> <RequestContext> <ExcelVersion>14.0</ExcelVersion> <IdsVersion>2.2.5.13</IdsVersion> <FileName>Interject_TestFile (version 1).xlsb</FileName> <FilePath>C:\\Users\\jeffh-high\\AppData\\Roaming\\Microsoft\\Excel</FilePath> <TabName>DB_ReportRangeShort</TabName> <CellRange>C6</CellRange> <SourceFunction>Range</SourceFunction> <UtcOffset>7</UtcOffset> <ColDefItems></ColDefItems> <ResultDefItems> <Value>customerid</Value> <Value>companyname</Value> </ResultDefItems> <RowDefItems> <Value Row=\"1\">customerid</Value> <Value Row=\"2\">companyname</Value> </RowDefItems> <UserContext> <MachineLoginName>myusername</MachineLoginName> <MachineName> </MachineName> <UserId>jxR2bDnk4jg</UserId> <ClientId>CKKCYyCtT</ClientId> <LoginName>my@email.com</LoginName> <LoginAuthTypeId>10</LoginAuthTypeId> <LoginDateUtc>06/16/2014 11:04:08</LoginDateUtc> <UserRoles> <Role>ClientAdmin</Role> </UserRoles> </UserContext> <UserContextEncrypted>KAJeycwLWiy0t4Xe4GxPiI0sskc=</UserContextEncrypted> <XMLDataToSave> <c Column=\"Row\" OrigValue=\"Row\" /> <c Column=\"Start\" OrigValue=\"Start\" /> <c Column=\"CodeInputs\" OrigValue=\"CodeInputs\" /> <c Column=\"Description\" OrigValue=\"Description\" /> <c Column=\"End\" OrigValue=\"End\" /> <c Column=\"Duration\" OrigValue=\"Duration\" /> <c Column=\"Client\" OrigValue=\"Client\" /> <c Column=\"Code1\" OrigValue=\"Code1\" /> <c Column=\"Code2\" OrigValue=\"Code2\" /> <c Column=\"Code3\" OrigValue=\"Code3\" /> <c Column=\"Code4\" OrigValue=\"Code4\" /> <c Column=\"ChargeCategory\" OrigValue=\"ChargeCategory\" /> <r> <Row>18</Row> <Start>0.291666666666667</Start> <CodeInputs>.ids.dev..</CodeInputs> <Description>upgrade timelook</Description> <End /> <Duration>15.4</Duration> <Client>ids</Client> <Code1>dev</Code1> <Code2 /> <Code3 /> <Code4 /> <ChargeCategory>NB</ChargeCategory> </r> </XMLDataToSave> </RequestContext> ' exec [dbo].[Sample_Request_Context_Call] @Interject_RequestContext = @Interject_RequestContext */ ALTER PROCEDURE [dbo].[Sample_Request_Context_Call] @Interject_RequestContext nvarchar(MAX) AS BEGIN SET NOCOUNT ON; DECLARE @Interject_NTLogin NVARCHAR(100) ,@UtcOffset DECIMAL(6,4) ,@NowUTC AS DATETIME = GETUTCDATE() ,@ErrorMessageToUser VARCHAR(1000) = '' EXEC [dbo].[RequestContext_Parse] @Interject_RequestContext = @Interject_RequestContext ,@UtcOffset = @UtcOffset OUTPUT ,@MachineLoginName = @Interject_NTLogin OUTPUT SELECT @UtcOffset AS '@UtcOffset' ,@Interject_NTLogin AS '@Interject_NTLogin' ,@NowUTC AS '@NowUTC' ,DATEADD(HOUR,@UtcOffset,@NowUTC) AS '@NowLocal' END GO "},{"title":"Resizing Interject Windows","url":"/wAbout/Resizing-Form-Windows.html","content":" Overview At some screen resolutions, Interject's form window pop-ups can be small and sometimes difficult to read. Fortunately, there is a convenient way to resize the windows and make them easier to read. You have the option to apply resizing to all sizable windows or just the individual window you currently have open. Resizing Windows The button to resize windows can be found in the same location in every window and looks like this. It will open a menu of default sizes that you can choose from when you click on it. You can also choose a custom sizing within a range of 75%-200% magnification. Resize the Current Window First, we'll resize just the window that opens when you click on the PULL Data button in the Interject ribbon. The process is the same for all other Interject windows that can be resized. Step 1: Open Excel to a blank workbook. Step 2: Select PULL Data, and the following window will open. Step 3: Click the resize button, and a new menu will open. There are 3 predefined sizes for Interject windows. Small, which is the default 100% view size Medium, which is 125% view size Large, which is 150% view size Step 4: Select the M button to choose the medium size. Your window will now enlarge, as shown below. You also have the ability to choose a custom view size within a range of 75% - 200%. Step 5: For example, enter 115 into the size field to set your window size to 115%. Your window will now be between the small size and the medium size, as shown below. Resize All Windows In addition to sizing individual windows, Interject allows you to use the current window view size to set all the other Interject window sizes. This will allows you to apply the size you like to all pop-up windows. Step 1: Open Excel to a blank workbook. Step 2: Select PULL Data, and the following window will open. Step 3: Click the resize button, and a new menu will open. Step 5: First click the Apply to all check box. Step 4: Then select the M button to choose the medium size. Step 6: To see your changes, select the SAVE Data button. You will notice that your window opened with the medium size, as shown below. "},{"title":"Security Best Practices","url":"/wGetStarted/Security-Best-Practices.html","content":" Overview Managing security is a key component of the Interject platform, and there are several areas to understand. Security involves both the row level security that can exist in reports and apps and how the middle tier objects are secured. Security also includes which spreadsheet report template can be seen by which users. The paragraphs below discuss each of these areas, best practices in building, and methods to test user access. Database Connections and Windows Authentication When setting up Data Connections to connect to a database it is best to use connection strings that use windows authentication instead of a username and password. Although Interject encrypts the connection string value when saved, it is better practice to use a custom website API when a username and password must be used for a database connection. Row Level Security for Reports and Apps The Interject platform connects the spreadsheet interface to a middle-tier and makes the request under the user context of the session. In this way, a stored procedure can leverage Windows authentication to identify the user. In SQL Server the function to retrieve the username is sysname(). Other database engines that support windows authentication will have other methods. Windows authentication can also be used for website API that connects to Interject over SSL using standard coding practices. Using a stored procedure and windows authentication, built in row level security features of a database, such as SQL Server, can be used. In addition to leveraging windows authentication to identify the user, Interject can pass user identity information along with each request to the middle tier. This is useful if windows authentication is not available. If a data portal is configured with the following system parameters, select user context will be provided to each request to the data portal. System Parameters Related to User Identity: Parameter Description @Interject_NTLogin Windows authentication user name (Domain excluded) @Interject_LoginName Interject user name logged in @Interject_UserID Interject user id @Interject_ClientID The client id that is current in the Interject Addin. Note that Company and Client may be used interchangeably @Interject_RequestContext Is XML that includes a UserContext node When the above system parameters are used, it is important for the middle tier object to be configured to receive it. Stored procedures must have the additional parameters added or Interject will show an error to the user when pulling the report. Using an API as a middle tier will not likely create an error when additional parameters are added. Since you control the code for an API, you would need to add additional code in the API before the additional parameters would be utilized. It is critical to note that it is best practice to configure stored procedures with execute rights for the network group of users that will be using the report. This is so the data tables can be hidden to the users, and their only access is through the stored procedures used in data portals. This configuration, however, provides opportunity for knowledgeable IT users to execute the procedure with different parameters including user context. For this reason, it is best practice to verify the user context when using windows authentication for stored procedures. An additional user token is provided by Interject when the Data Portal connects to a website API. The token can be used by the website API to verify the identity of the user against the Interject Authorization API. The use of this token will be described further in the Using an API with Interject example that is currently under construction. In addition to the UserContext node above, there is a node in the data portal parameter @Interject_RequestContext. The XML node <UserContextEncrypted></UserContextEncrypted> can be leveraged to trust the user context provided by the data portal parameters. This feature is not enabled, but when available will provide will allow use of client encryption keys and common encryption practices to parse the content. When considering all the above regarding row level security, you have the ability to specifically identify the user for every data transaction going through the Interject Platform. This identity that can be leveraged in your middle tier code, stored procedure or website API, to be aware of the user’s row level security. Template Security The spreadsheet files themselves act as reports or application templates. These files are normally uploaded to the Interject Report Library where they are versioned and unable to be changed without the proper Interject security roles. The Report Library was built to contain empty templates where users pull their data after opening the file template. Due to this design, the allowed file size that can be uploaded to the Report Library is 30 MB in size. When reports or apps are opened from the Report Library, they are locally cached and opened in read only mode. The user will in most cases use the template and when done will close the file without saving. The user may choose to save a copy of the file, such as for auditing purposes or to add personalized changes. It is by design to allow this, even though the user takes the risk of having an outdated version. To assist in management of older versions, Interject does log activity, including the file path and name, so the locations of these copies are known. The Report Library is built to provide a development cycle status to the report to help with vetting and documenting the approval of new reports. The statuses include: Superseded, In Development, In Test, and Live. See Report Library Basics for additional information on using the Report Library. The ability to see templates in each status is controlled through Interject user roles. Standard users only see templates that are set to Live. It is best practice to consider the spreadsheet template insecure, since it can easily be shared with other users without proper credentials. Building each report or application with row level security is key to keeping security around your data. The Report Library has folders where templates are placed, and there is currently only one folder (called Corporate ) that has visibility rights for users that have been given the Corporate role. Although it is best practice for every report to have row level security, we recognized it may be advantageous to keep some reports out of view from users when they have no use for them. It is on the road map to provide additional visibility controls to all Report Library folders. Testing User Access As with all developed applications and row level reports, the testing plan should be built in based on the requirements. In many cases an end-user will want to verify the row level security code is properly implemented. A best practice method to handle this situation is to add a Data Portal parameter such as @UserTestMode. In the middle tier code, the existence of a value provided can trigger the following code steps: Step 1: Using windows authentication or verifying the user token in an API, check to be sure the user can test another user’s security context. This may be hard coded in the middle tier code, can use a lookup list in a database, or even better, verify the correct group in active directory. Step 2: Next, verify the value provided in @UserTestMode represents a valid user. Step 3: If the user is allowed to test another user’s security context, change switch the identity so the row level security code is using the identity from @UserTestMode. This operation may be logged for later audit purposes. Step 4: In some cases in production, enabling this test mode can be helpful to a support team but the ability to save data changes (if provided in the app) should be prohibited. It is recognized the above will not work if row level security is using the database engine row level security features based on windows authentication. In this case other test methods must be implemented. "},{"title":"SegmentInfo - Segment Search","url":"/wIndex/SegmentInfo---Segment-Search.html","content":" Overview Segments is a Data Portal which allows you to filter for every segment within your chart of accounts and allows you to use your groupings within your filter choices. For example, if you are looking for accounts in Revenue , simply search for Revenue. If there is a segment that represents your business unit (such as Location or District) and security is enabled, it can be used to create dynamic reports that list the business units you or your team have rights to. To search segment groups, there is a related Data Portal GroupInfo that provides all the groups an individual segment code may be a part of. Segments Parameters Parameter Name Description Default Optional SegmentNum The segment number to be searched. This can be from 1 to 8. 1 is typically account, but it depends on your implementation. FALSE SegmentCode Use a filter to search for the segment. Groups may be used as well as advanced filters such as Revenue,!38000,52. Leave blank to search all segments within your security rights. TRUE SegmentName Filter on the name of the segment. This filter assumes a contains search. As a result, searching on cash will return Restricted Cash, Petty Cash, and so on. Available Columns Column Name Description SegmentCode The segment code such as 52120 for Account or 2000 with a business unit. SegmentName The name for the segment, such as Wages and Salaries. IsCredit If the segment relates to Accounts, this field notes whether the account is a credit account, which is stored as a credit by default. Inactive Specifies if the segment is considered inactive "},{"title":"Setting Up the jDataPortal","url":"/wDeveloper/SetupjDataPortal.html","content":" Overview The jDataPortal is a powerful Interject function that not only allows users to not only establish and customize the connection to an Interject Data Portal, but also override certain parameters of the Portal to customize reporting needs. Setup jDataPortal In this section, you will open a report and change the Data Portal to a jDataPortal. Begin by opening up the Customer Collections report. In order to access the Interject configuration area, unfreeze the panes via the Quick Tools menu. Select the report function. In the formula bar, change the DataPortal parameter from \"Northwind Customers\" to: jDataPortal(\"Northwind Customers\") Enter \"Market\" for the Company Name filter and Pull the data. Result Sets The DataResultNumber is the second parameter for the jDataPortal. This parameter specifies the particular data set you want returned. For instance, if the stored procedure for the data portal returns 4 queries, entering 2 for this parameter will return the 2nd query to your report. You can also enter negative numbers to specify the query in relation to the last query. For example, -1 will return the last query listed in your stored procedure. To illustrate, the following chart shows an example for a stored procedure returning 4 data sets: QueryPosition PostiveReference NegativeReference Query 1 1 -4 Query 2 2 -3 Query 3 3 -2 Query 4 4 -1 Order By The OrderBy parameter accepts comma separated values of column names that will be used to sort the data result set. In this section you will add a value for this parameter to order the results. First select the jDataPortal function by putting the cursor inside the name and click the fx button to bring up Excel's Function Wizard. In the OrderBy field, enter: \"[CustomerName] DESC\" Now Pull the data again and notice the results are in descending order by Company Name. The OrderBy parameter accepts multiple column names (e.g. \"CompanyName, ContactTitle\"). Some key points: This parameter is not case sensitive Brackets may or may not surround column names Result sets are sorted in the order of the columns listed Sorts in ascending order (ASC) unless descending order (DESC) is specified For more information, see Microsoft's DataView.Sort. Filter The Filter parameter accepts valid expressions that will be applied to the results. Bring up the Function Wizard again and for the Filter parameter, enter: \"[ContactTitle] LIKE '%Manager%'\" Pull the data again and notice the results are filtered to only included entries whose Contact Title includes \"Manager\". The Filter parameter excepts multiple expressions. Some key points: This parameter is not case sensitive Brackets may or may not surround column names Multiple expressions can be added using the keywords 'AND' or 'OR' Terms can be compared using '<', '>', '<=', '>=', '<>' or '=' For more information, see Microsoft's DataView.RowFilter. For more information about syntax and keywords, see Expressions. Overriding a Connection With the ConnectionOverride parameter, a jDataPortal function can use a different Interject Data Connection when accessing the Data Portal. Making the same Data Portal for different connections is redundant. This parameter makes it possible to host one Data Portal with many different possible connections and thus accommodate your unique reporting needs. To use, simply enter the name of the connection from the Portal site that you want to use: Overriding a Command Similar to the ConnectionOverride, the CommandOverride can override the command (stored procedure) stored in the Data Portal. Again, you only need one Data Portal to access different stored procedures and thus cut down on the required maintenance of having to manage many different portals. Command overrides can only be performed by a ClientAdmin role. "},{"title":"Installing - Shared Computer","url":"/wAbout/SharedComputer.html","content":" Overview: Shared Computer installation installs a multi-user instance of Interject on one computer, such as a shared server. Since Interject's Addin Manager is used to manage independent settings for multiple users, this installation is dependant on the Add-in Manager. In order to run Per-Computer installation, you must have administrative-elevated rights. Installing Interject on Multi-User Systems Step 1: Log in to the Interject website portal. If you do not have an account go here. Step 2: Once logged in, go to the download page.. Step 3: Select View other installers». Step 4: Click the Zip File for IT Admins Multiple-Users option. This installer is only available on Windows Server machines. Admin privileges are also required for this install. Step 5: When the download is complete, extract the zip file. Step 6: Determine your Destination Folder. Step 7: Confirm your Destination Folder. Step 8: Navigate back to your Extracted Zip Folder and run the InterjectSetup_Production_40Standard[version].exe file As Administrator. Step 9: Step 9: Select \"Next\" when the Interject Excel Add-In Setup Wizard launches. Step 10: Read and accept the End-User License Agreement and select Next. Step 11: Two options will be available when installing on Windows Server. Install as 'per-user' (current user) Install as 'per-machine' (everybody) To install for everybody on the server, make sure the Everybody button is selected then click Next. Note: Other Install features are available. For instructions on advanced installs, click on the readme located in the ZIP file or refer to the text file in the dropdown below. ReadMe File --------------- Advanced Installation by the Command Line -------------- The installer can be run silently from the command line by targeting the InterjectSetup_Production_40_Standard_[version].exe file. This will install as 'per-machine': -Run the Command Prompt as administrator. -Update the path so it targets the .exe file. C:\\[Path_To_Exe]\\InterjectSetup_Production_40_Standard_[version].exe /i // /qn ALLUSERS=1 key: /i = install -or- /x = uninstall /qn = quiet mode // = Used by Advanced Installers .exe file to automatically replace with <path_to_msi>. ALLUSERS = installs as 'per-machine' when set to 1. set to 0 to install as 'per-user' to uninstall use a similar command with /x: (point to the .exe file of the current installation) C:\\[Path_To_Exe]\\InterjectSetup_Production_40_Standard_[version].exe /x // /qn ALLUSERS=1 --------------- Installation Logs -------------------------- Advanced Installer is the technology used to create the installer. To see the install log (generated by the Advanced Installer InterjectSetup_Production_40_Standard_[version].exe), run the install command with an additional parameter /L* from the command line: (update the path to the exe and also where to save the install log) C:\\[Path_To_Exe]\\InterjectSetup_Production_40_Standard_[version].exe /i // /qn /L* \"C:\\[Path_To_Exe]\\install.log\" <!--should the second \"path_to_exe\" bracket be \"path_to_save\" or something like that?--> Add-In-Express is the technology used to register the application as an Excel Addin To see the Add-In-Express install log, go to this file: (update the path for the current user) C:\\Users\\[UserName]\\AppData\\Local\\Interject\\App\\adxregistrator.log or here (for per-machine install): C:\\Program Files (x86)\\Interject\\adxregistrator.log Step 12: Select the desired install location by clicking Browse…. By default a folder will be made inside the Programs(x86) folder. Hit Next once the location is selected. Step 13: Click Install to begin the install process. Step 14: Click Finish once the setup wizard tells you the installation is complete. <h2>Continue Here for Login Information</h2> If you run into any issues, email us at help@gointerject.com. "},{"title":"Simple Data Pull","url":"/wGetStarted/Simple-Data-Pull.html","content":" Overview To clearly illustrate the end-to-end workflow of developing a report, you can begin with several simple data pull examples showing different report configurations. You will be reusing Interject reports used in previous sections, because these should be familiar to you if you read this documentation from the beginning. By the end of these sections, you will understand the process of creating spreadsheet friendly reports that can drill to other reports. Understanding the Business Use Case To understand the business use case for the reports and drills used in this section, please review, Real-World Walkthroughs - Customer Aging. It shows a user story for the Customer Aging Report and why users would want to drill to underlying reports like Customer Orders and Aging Detail. Go directly to the following examples to begin each objective. It is ideal to complete the following examples in order. Customer Aging Customer Aging, you will learn how to create a simple data pull using the Customer Aging Report. To review the business use case for this report, see the Real World Walkthroughs - Customer Aging. This section begins with the steps for creating the Interject data connection and data portals, followed by the steps on how to create the stored procedure. Finally, you will be directed to another page that shows how to use the data portal to create the spreadsheet report from scratch. Customer Orders Customer Orders, you show you how to create a second report, Customer Orders, that will be drilled to from the Customer Aging Report. You should have already seen the Customer Orders report while reviewing the business use case in Create: Customer Orders. Continue to build the Interject configuration and database objects to support the report. "},{"title":"Simple Data Save","url":"/wGetStarted/Simple-Data-Save.html","content":" Overview An important part of the Interject platform is the ability to collect data from spreadsheet reports in order to add or modify that data centrally. It can turn normal reports into interactive applications that users can easily adopt to speed up workflow. This section will walk through creating a simple data save. It is recommended you complete the previous sections before continuing. Understanding the Business Use Case To understand the use of these reports and how the user should edit or add notes, as well as specific invoices and payment dates, review Real World Walkthroughs - Customer Aging, which covers the sheet Customer Credits Customer Aging Save This example details a full review of how the Interject save feature works. Using the Customer Credits example, it will show how to design three user input fields into an existing report. The Interject platform will assist in creating a stored procedure that can be used in SQL Server to help facilitate the process. Northwind Pull and Save The example focuses on how to create an Excel tool to be able to pull the data out of a Northwind Categories table into an Excel tab as well as to be able to add, edit, or delete categories to this table. "},{"title":"Installing - Single User","url":"/wAbout/SingleUser.html","content":" Overview: Interject aims to make the installation process as simple and painless as possible. This installation is intended for single user computers. Note: If you are installing on a Windows Server machine, click here for installing on a shared computer. Installing Interject Step 1: Navigate to https://portal.gointerject.com Step 2: If you have an existing account, log in to the portal website with the same credentials used for the Interject Excel Add-in. If you do not have an account, go here. Step 3: Once logged in, go to the download page. Step 4: Click the Installer button to begin. Step 6: Once the download is complete, run the install file. This will look different in every browser. We've given examples of the most common browsers below. Google Chrome : Mozilla Firefox : Microsoft Edge : Microsoft Internet Explorer: Step 7: Running the file will launch the Interject Excel Add-In Setup Wizard, which will guide you through the Install Process. Select Next. Step 8: Read and accept the End-User License Agreement, then select Next. Step 9: Choose the Destination Folder for your installation, then select Next. Step 10: Click Install. Step 11: Once the installation is finished, the installer will tell you if it is complete. Continue Here For Login Information If you run into any issues, email us at help@gointerject.com. "},{"title":"Staff Page: Add, Edit, or Delete Users","url":"/wPortal/StaffPage.html","content":" Overview The Interject Portal site allows you to add, edit, or delete users from your organization via the Staff Page. Here you can also activate or deactivate a user. Viewing the Staff Page and all the functionally with it is only accomplished with the ClientAdmin role. The Staff Page The staff page includes a list of all users that have access to Interject within your company. To get there, first navigate to your company in the top right corner of the Portal site. On the left navigation pane, click Staff. You should see a list of staff under your company. You can view various information pertaining to the users here in list format. You can also set up multi factor authentication from here. For more information, see MFA. External Admins You will also see a list of External Admins. These are Interject staff members who have been set up for your company to help manage your data. To add an External Admin, enter their email address and click Add External Admin. View, Edit, Activate/Deactivate, Delete User From the Staff page, you can do the following by hovering the cursor over the user: Profile: View/Edit a user Mark as Active/Inactive: Enable or disable a user's access to Interject 🗑: Delete a user Add User To add a user, click the Add User button. The User Profile page appears. Note: If your browser is set up to auto fill user names and passwords, it may do so here. Be sure to clear these out when setting up the new user. Adding Details Click More Options to view more optional fields you can add. The first four fields (First Name, Last Name, Email Address, and Phone Number) are required, but the rest are optional. Add the information for the new user. Note: The User Name is what the user will log in to Interject with. If it is blank, it will automatically get set to the user's email address. Otherwise you can enter a specific user name. Password You have the option of setting an initial password for the user. (Be sure to fill in both the New Password and Confirm Password fields). If you leave these fields blank, you will need to send them a welcome email to reset their password. For more information, see Changing & Resetting User Passwords. Create User When you are ready to save the user, click Create. Your changes are saved. Welcome Email After creating the new user, you can send them a welcome email with the option of resetting their password. Roles All new users by default are assigned to the Standard Role. The Standard Role has basic Interject permissions, which include being able to view and open live reports from the Report Library. You will see an option to add other specific roles for the user. For more information about the different roles, see Interject Roles. "},{"title":"Interject TLS for HTTPS","url":"/wAbout/TLS.html","content":" For Interject v2.3.34.0 and earlier, the default is TLS 1.1. This can be changed to TLS 1.2 by using the following method: Reconfigure TLS via Settings In the Interject ribbon menu click 'Advanced Menu' if the Online Admin section is not displayed. Click 'System' and in the dropdown select 'Configure Install' Enter the following code in the form field: TLS1.2 Click 'Continue' Restart Excel (make sure all instances are closed) TLS 1.2 should now work Use Interject v2.4.0.0+ (TLS 1.2 is the default for all version here forward) "},{"title":"Tabular vs Data Cells","url":"/wAbout/Tabular-vs-Data-Cells.html","content":" Overview Interject supplies two very different ways to pull data into spreadsheets: Tabular and Data Cells. These two approaches help cover the variety of today's industry needs. In most of the user documentation, the instruction is focused on Tabular because they run much faster, can access real-time data, and utilize server resources more efficiently. As a result, they are used more frequently in large organizations. Although Data Cells have limitations (detailed below), they are more flexible for ad hoc reports and are easier to get started with. Tabular Tabular reporting is closely associated with standard reporting tools. Simply choose fields for each column, setup the level of detail, specify the rows to receive data, and the results populate the spreadsheet. Results can be broken into subtotaled sections, which are common to financial statements. Understanding how rows and columns intersect to place data is important and requires some training. The result is an extremely fast report that can be published or distributed and easily read by users who desire reports in spreadsheets without any additional work. They are also instantly shareable to users who don't have Interject installed. Data Cells Data Cells are focused on a single formula that can be placed anywhere in the spreadsheet and can ask for any financial number for a summary thereof. For example, you can set up a Data Cell to retrieve Net Income for YTD July 2017 for the Western Division excluding the NW districts and excluding inter-company accounts. Once this single formula approach is understood, there is no limit to creating needed combinations. Typically, this is an easier method to start writing custom reports. However, they must be exported to share with non-Interject users. Given their greater flexibility, report run times are higher than Tabular reports, and more server resources are required. Fortunately, users can continue to work with spreadsheets while Data Cell reports finish calculating. What is Common Between Data Lists and Data Cells Tabular reporting and Data Cells were designed to work together for the most flexibility. These are some of their common traits: Both will pull data using the same \"Pull Data\" menu action. There is nothing new to learn when changing from one method to the other. Data Cells can be used with Tabular methods to create custom columns that aren't easily available from the data source. Both can be shared with users that do not have Interject installed, however Data Cell reports must be exported with the \"Export Book\" menu item before they can be shared. "},{"title":"Testing Data Connections","url":"/wTroubleshoot/Testing-Data-Connections.html","content":" Overview Before setting up a Data Connection to a Database, you can verify that the connection can be established within Excel by accessing the Check Connection window. Step 1: With Excel open, go to the Interject Ribbon menu and click Advanced Menu (Skip this step if Advanced menu is already showing): Step 2: Click System drop-down, and select Check Connection: Step 3: In the text-box, paste the database connection string you will be using to configure the Data Connection: When the connection functions properly, a message will be displayed, such as the one below: If there are errors, you will see a description of the error: "},{"title":"The Interject Website Portal","url":"/wPortal/The-INTERJECT-Website-Portal.html","content":" Overview The Interject website portal is a central place to manage Interject client settings and user profiles. The most common use is to manage users, data portals, and data connections. Data portals and connections support the Interject reporting and save back functions. This section will review all areas of the website portal. Go directly to any topic by clicking one of the links below. The database connection can support MS SQL Server OLEDB as well as ODBC. ODBC allows connection to any other relational database. Currently, Interject only supports direct connections with databases that support stored procedures. This includes Oracle, MySQL, MariaDB and many others. For all other data sources, a custom website API can be created to connect the data to Interject. This is very similar to how a website application accesses its data layer. Using an API you can connect to PostgreSQL and noSQL databases like MongoDB. You can also use an API to connect to other cloud data APIs such as provided by SalesForce, Intacct, Netsuite, Quicken and many other cloud software services. Logging In to the Interject Website Portal This section details how to log in to the Interject website portal to get access to Interject features. Data Connections A Connection is used with Data Portals so Interject can connect to certain stored procedures within a database or to a custom website API. A single connection can be used by many Data Portals. Data Portals In this section you will quickly set up a connection to SQL Server and test it using the security context of the user from their Excel session. A Connection can be set up to connect directly to a database using a OLEDB or a .Net Adapter connection string for MS SQL Server or using a ODBC connection string to connect to Oracle, MySQL, or others that support stored procedures. For other databases, including noSQL databases, a customer website API can be used to connect the datasource to Interject, which is covered in a later section. The following lists are examples of connection strings for SQL Server: Example .Net Adapter connection string: Server=myServerAddress; Database=myDataBase; Trusted_Connection=True; Example OLEDB connection string: Provider=SQLNCLI11; Server=myServerAddress; Database=myDataBase; Trusted_Connection=yes; Example of an ODBC connection string: Driver={SQL Server Native Client 11.0}; Server=myServerAddress; Database=myDataBase; Trusted_Connection=yes; See https://www.connectionstrings.com/ for additional information on connection strings. User Profile Managing Users and User Profiles is another commonly used area of the Interject Website Portal. The role of Client Admin, has the ability to open the profile of a user by clicking on their name. The menu to the left includes the link User Profile as a shortcut to get to your own user profile. "},{"title":"Troubleshooting","url":"/wTroubleshoot/Troubleshooting-Landing.html","content":" Overview Interject optimizes speed by caching company settings such as Data Portals, Connections, and Report Library templates. This information is received on login and stored in memory for as long as the Excel session is open. Troubleshooting is therefore important for new deployments where these settings may need to change often. If there are any changes to company settings, the Interject Excel add-in will check for changes at various actions. Opening the Report Library or the Report Builder automatically checks for setting changes. Other actions like Pull, Save, or Drill check only every two hours, since these actions occur often and could create excess communication. The next three pages are dedicated to understanding how these different actions and environments interact for troubleshooting purposes. Interject Support Interject Support in built into Excel via the Interject Addin. You can easily report a problem to Interject or find Interject contact information. You also have the option of turning on certain logs in order to send more key details to Interject. Addin Errors Errors with Excel Addins or the Interject Addin can occur for many reasons. Sometimes they are related to the environment or computer running Interject. It is important you have tools to capture everything that is interacting with Excel so it is easier diagnose the cause of the errors. This leads to faster troubleshooting and repair. Report Errors Report errors occur for many reasons, some of which relate to how the server handles data and moves it to the report. Other reasons may include the report's direct configuration within Excel. Interject provides various tools and features to help quickly and accurately diagnose report errors. "},{"title":"Uninstalling","url":"/wAbout/Uninstalling.html","content":" Overview: Interject aims to make uninstalling a simple and straight forward process. This process fully removes current versions of Interject as well as legacy versions (version 2.3.7.0) and before. Uninstalling Interject Step 1: Before beginning the uninstall process, make sure all instances of Excel are closed completely. Step 2: Press the Windows Key and type Control . Then select Control Panel. (This may look different for older versions of Windows, but the steps are the same.) Step 3: Under Programs, select Uninstall a program. Step 4: Find the Interject Excel Add-In and select it. Step 5: While the Interject Excel Add-In is selected, click Uninstall at the top of the control panel page, then follow the Uninstall Wizard. If you run into any issues, email us at help@gointerject.com. "},{"title":"Updating Interject","url":"/wAbout/Updating-INTERJECT.html","content":" Overview Interject often comes out with new features and updates. When doing so, it is a priority to make updating Interject as easy as possible, so that you can access these features. In this walkthrough, you will see how to add these updates quickly. Here is a brief video on Updating Interject, followed by a more detailed walkthrough. Click here if the above video does not load. Updating to the Newest Version of Interject Step 1: In order to update Interject, you will need to close Excel. So save anything open in Excel now. Step 2: Once everything is saved, and you are logged in, click the Check for Updates button in the Interject ribbon. You cannot check for updates until you are logged in. Step 3: A popup will appear with information about the computer's current, as well as the latest available Interject Version. If Interject has a critical update, there may also be an Install By date. If that is the case you must install the update as soon as possible. Click Get Update to get the new version. It should only take a moment. Note: If this popup appears at any point without having clicked the Check for Updates button, it means that Interject has released an important update. Interject will not lock up into updating at any time, so its okay to postpone it momentarily, but its recommended that you update at the earliest convenience. Step 4: After clicking Get Update, the Interject Excel Add-in Setup will pop up. Interject requires Excel to be closed to update. Click the exit button to close excel. Once Excel has been closed click Update to continue to the update. If you have any active or hidden Excel files open, the Add-in Manager will tell you which files are open and whether they've been saved. To avoid losing your work, please save the files and close Excel before continuing Once your files are saved and closed, click Next to continue in the Install wizard. Step 5: Next, you will need to read and accept the License Agreement and click Next to continue. Step 6: Choose where to install Interject. Step 7: Now click Install to begin the installation. Step 8: Click Finish to close the installer, and you're done! And that is all there is to it, you have officially updated Interject. "},{"title":"User Profile","url":"/wPortal/User-Profile.html","content":" Overview Managing Staff and Staff Profiles is another commonly used area of the Interject Website Portal. Once logged in, you can access the list of staff by clicking on Staff from the left menu. If you have the role Client Admin , you have the ability to open the profile of staff by clicking on their name. The menu to the left includes the link Staff Profile as a shortcut to get to your own staff profile. Click on User Profile to view your own profile, which will bring up the following page with typical profile information. "},{"title":"Using Interject","url":"/wAbout/Using-INTERJECT.html","content":" Overview This section is for users working with reports and applications created by others. You will run through the basic navigation and control methods most helpful for working efficiently. Please note that every report may be different and may have it's own documentation in the Report Library. See the Report Library Basics page for further details. Installing Interject Installing Interject is a simple process. There are two install types for Interject, the first is a single user install, and the other is for installing on a shared computer. If you are not sure which one to use, then you should install the single user version. Logging In Logging in is simple and fast! Once logged in we can begin exploring the Report Library detailed in the following pages. Report Library Basics The Report Library is a way to share reports with other users on your team. Reports are uploaded to the library and can be accessed from any computer using the Interject app in Excel. The features in Interject go beyond a Sharepoint or Shared Network Folder. Files can also be versioned, so reverting to a working report is simple. Report Library Links The Report Library provides an easy interface where new reports can be uploaded, existing reports can be updated, and details and documentation about the report can be added. Reports are called links in the Library. These links can be a link to a file you have saved locally or one uploaded to the Report Library. Real-World Walkthroughs From simple PL charts for accountants to trend reports for CEO's and CFO's, there are a variety of processes we may encounter. In these labs, you will look at three Real-World scenarios that explain how to use Interject. Keep in mind, these are simple examples of tasks that may be more complicated in other situations. Customer Aging : This lab is a basic Customer Aging demo for tracking multiple customer invoices. Inventory Report : This lab is a basic example for tracking product quantities in and out of inventory. Financial Report : This lab is for controllers/accountants working with financial data and spreadsheets. "},{"title":"Validation Report","url":"/wTroubleshoot/Validation-Report.html","content":" Overview The Validation Report feature displays detailed information about Interject pull, save, and drill functions, data cell functions, and events. It is a tool to help report writers see how specific report formulas behave by interpreting the report formula inputs. When developing report templates, there are often many Interject report formulas in a single template. The Validation Report can help analyze the order of execution for the report formulas. This ensures that Interject events occur in the intended order. The Validation Report also shows report writers how to check if a formula is included in the Interject execution plan. Finally, the Validation Report tool displays to writers which parameters are being included in every report formula on the report template. The Validation Report is located on the Advanced Menu of the Interject ribbon. By selecting any of the validation options, you can view the code behind each action. Detail information is given for selected ranges, data portals, parameters, formatting codes, and more. This helps users learn as well as diagnose code problems. Validation Report Options The Validation Report can assist in analyzing Interject functions and events. For an overview on Interject events, see Event Functions. Pull Data Event: Analyzes all functions triggered by a Pull-Run event Save Data Event: Analyzes all functions triggered by a Save-Run event Drill Data Event: Analyzes all functions triggered by a Data-Drill event Clear Pull Data Event: Analyzes all functions triggered by a Pull-Clear event Clear Save Data Event: Analyzes all functions triggered by a Save-Clear event Go Back Event: Analyzes all functions triggered by a Go-Back event Data Cell Function: Analyzes all Data Cell functions Data Cell Last Change Report: Analyzes the changes and updates in the Data Cell functions Cell Formula Review: Analyzes a Report Formula Pull/Save Data Event The Pull or Save Data Event will list detailed information for all Interject functions triggered by the Pull or Save Data event. Information shown includes: Action : Lists the name of the function and its location in the report. (Functions will be ran in the order they appear.) On Actions : The events that will trigger this function Formula : The formula text of the function Instruction Range : The range containing the instructions for the function ErrorText : Any logged errors with the event Function Instruction (Parameters) : Lists the parameters of the function in detail Drill Event The Drill Event command analyzes all ReportDrill functions within the sheet. Clear Pull/Save Data Event This command will list all functions that will be triggered on a Clear Pull or Clear Save event. It displays information similar to the Pull/Save Data Event. Go Back Event Displays functions triggered by the Go Back event (also called Return from Drill). (Note: This event is not currently functional.) Data Cell Functions Interject data cells focus on a single formula within the spreadsheet. The Data Cell Function option displays information This report contains 3 major sections: Request XML Current Formulas Previously Loaded formulas Request XML shows exactly what is sent to the data portal in XML form. Current Formulas displays the current account balances within the data portal. Previously Loaded Formulas will show the formulas loaded previously if any. Data Cell Last Change Report This option shows the changes made from the last pull to the current one including the source formula for the change. Cell Formula Review Interject's Cell Formula Review is useful for displaying detailed information about a selected formula. For more information, see here. "},{"title":"Verbose Logging","url":"/wTroubleshoot/Verbose-Logging.html","content":" Overview Errors can occur for many reasons. Sometimes they are related to the environment or computer running Interject. It is important you have tools to capture everything that is interacting with Excel so, it is easier diagnose the cause of errors. This leads to faster troubleshooting and repair. To help diagnose any errors, Interject uses a Verbose Logging feature. The ideal goal of Verbose Logging is to help recreate an error and send logs to Interject's support team, where it can be fixed. Verbose Logging will do four things: Capture timed points so that slowdown issues can be isolated Log errors in real time Track activity so that, if Excel crashes, the exact events leading up to the crash are known Record general information about the system environment so that the context of the problem can be reproduced To send the Verbose Logs to Interject, see Send Report To Interject. Turn on Verbose Logging Step 1: You will need to go to the diagnostic wizard. Click the Advanced Menu button on the Interject ribbon. Next click Diagnostics. Step 2: You need to Turn On Verbose Logging, because it is Off by default. To turn it on, select the Toggle Verbose Logging option in the menu, then click Execute Selected Action. Step 3: Confirm that the logging is Turned On. Note: All activity will be logged for 16 hours, but you can turn them off at any time with the same steps used to turn them on. While logging is on, the system will perform a little slower then usual. Multiple log files may be created, and they will be available for ten days. If Excel is closed, the logging process automatically begins once Excel is restarted. The Results section shows where the log file is located: "},{"title":"View SQL Test for ActiveCell","url":"/wTroubleshoot/View-SQL.html","content":" Overview The View SQL Test for ActiveCell tool can be used to track down issues with the SQL stored procedures being called by an Interject report function. Only ReportRange(), ReportVariable(), ReportFixed(), and ReportSave() report functions are supported by View SQL Test for ActiveCell. Step 1: Select a cell containing a supported Interject report function: Step 2: On the Administration tab in the Interject Ribbon, click View SQL Test for ActiveCell under the System drop-down menu. A popup window will appear with a test SQL query: This SQL query can be run using any T-SQL environment (i.e. Microsoft SQL Server Management Studio ). Running the query in non-T-SQL environments may require modification of the query. The result will be a table or list of tables in SQL Server or an error message which can be used to see exactly what data is being pulled/saved to/from a report. "},{"title":"Web Proxy Configuration","url":"/wTroubleshoot/WebProxy.html","content":" Overview The Interject Addin allows users to authenticate using Windows authentication. For this Interject uses System.Net.CredentialCache.DefaultCredential library to set up a proxy. Interject's default Windows proxy at the application level can prevent a client's machine level proxy. This will prevent a user from being able to log in. To get around this, there is an Interject setting where users and clients can disable the Windows proxy. Configure via Diagnostics Setting To access the setting, click on the Diagnostics button on the Interject ribbon: The setting is called \"Set Proxy Usage\" found on the \"Web Service\" section: The following values reflect the possible inputs: 1 = Do nothing (no change) 2 = use Default Credentials (recommended) 3 = Skip Proxy (Set To Null) 1 (Remember) = Change setting to 1 and do not revert back to the default 2 upon startup 2 (Remember) = Change setting to 2 and do not revert back to the default 2 upon startup 3 (Remember) = Change setting to 3 and do not revert back to the default 2 upon startup To disable Interject's default web proexy, enter 3 in the Input section and click Execute Selected Action. Configure via app.config File Another option for configuring Interject's proxy network behavior is to configure Interject's app.config file. For more infomation, see the official documentation at Microsoft. "},{"title":"WebView2 Installation","url":"/wTroubleshoot/WebView2.html","content":" Overview Interject uses WebView2 for its login screen. If WebView2 is not installed, nothing will appear when you click the login button. Most systems have WebView2 already installed. If, however, it is not, you can install WebView2 manually. Verifying Installation You can verify that WebView2 is installed by opening up the windows settings and viewing the installed programs. Via Windows Settings Press the ⊞ Win + I to bring up the Windows settings. Alternatively you can click the Start button and type \"Settings\". On the Windows Settings form, type \"add\" and the Add or remove programs should appear. In the \"App & features\", type \"webview2\" to verify if WebView2 is installed. Via Control Panel Click the Start button and type \"Control Panel\". Next click Program and Features. In the search field, enter \"WebView2\" to see if it is installed. Installation To install the WebView2 Runtime manually, you can download it here. Select the desired distribution mode and download and install it. The Evergreen distribution mode is recommended. To learn more about the different modes, see WebView2 Runtime. Repair If after installing WebView2 you still do not see the Interject login screen, you might need to repair WebView2. Find WebView2 in the list of installed programs as explained previously. Then click Modify. Next click Repair. "},{"title":"What You Need to Know","url":"/wAbout/What-You-Need-to-Know.html","content":" At a Glance Finding integrated reporting solutions to fit your needs is difficult enough, let alone finding one that can scale with your company's growth. Interject was built for large companies with hundreds of users that run thousands of reports each day. Interject commonly handles report volumes over of 300,000 per month, and we can manage much, much more. Interject also fits within the specific needs of smaller organizations and is a particular benefit since it can scale with the company as it grows. In business today, data is exploding all around us, and the reporting needs of an organization never slow down. Interject gives you total control of your Excel spreadsheets. We go to great lengths to provide rich data functionality while \"letting Excel be Excel.\" Key Points on Scalability Spans Small and Large Organizations Interject is an affordable starting place for growing small and mid-sized companies. But it's built with large enterprises in mind, so we help ensure all future needs are met. Internally Manageable Any scalable solution must be manageable to be effective. Interject leverages common technologies to accomplish tasks your IT department will appreciate. Overall, they will love Interject's low cost of ownership. Automating Hard-to-Reach Places in your Organization Interject helps seal the cracks in existing software and provides bridges connecting disparate systems. We help everything work together so existing software investments can scale even further, and so costly software replacements are delayed. Scalable Solutions are in Your Control Purchasing key software can leave you dependent on vendors for costly customizations. This prohibits it's practical use over time. Interject hands the control of any and all reporting solutions to your IT department or business analysts. Since Interject leverages common database and cloud API technologies, it lets organizations grow their systems internally. When you Start Using Interject Remember: Changing Your Spreadsheets will not Alter Interject's Functionality The heart of Interject's functionality is that reports and applications are stored in a central server where they cannot be changed by spreadsheet users. The spreadsheet is simply the front-end. Should any modifications cause an error in reporting, users can revert to the prior spreadsheet file. The Interject Data Functionality is Attached to Excel Files Save files, make new copies, open them again, and we can still update the report. Just open them in a computer with Interject. Most types of reports ( Data Lists ) are easily shareable to non-Interject users via spreadsheet files. When a returned file is opened in Interject, all data features are retained. The Report Library Protects Prior Versions When spreadsheet report templates are saved in the Interject Report Library, they are available to others in an Interject client profile. Users can open the file and use it. If a new version is uploaded to the Report Library, any user that selects that report will have the latest version. A file can always be saved in a personal folder to experiment with possible spreadsheet changes, without altering data. To help with new report development, the Report Library can handle the \"Dev,\" \"Test,\" and \"Live\" stages of a report life-cycle. Click here to learn more about the Report Library. Easily Work With Files Outside the Report Library Whether using file folders or systems like SharePoint or Box.com , files that aren't kept in the Report Library can still be tracked manually. Before making modifications, simply save a new version of the file and return to the prior version as needed. Enhancing Spreadsheets With Data List Report Formulas Most Interject reports and applications use Interject Data List report formulas. These special formulas use the rows on top of a spreadsheet to specify which columns are listed in the report and how they are presented. Columns can be moved or deleted, and new Data Portal supported columns can be added. Data Lists reports are designed for users to customize. Enhancing Spreadsheets With Data Cell Formulas Data Cells are two specific spreadsheet formulas that bring any summarized value from a general ledger to any cell of a spreadsheet, so highly customized presentations or standard financial trends are easily created. Modifying Data Cell reports requires only fundamental spreadsheet knowledge using cell references and copy/paste. "},{"title":"Why CFOs Like Interject","url":"/wAbout/Why-CFOs-Like-INTERJECT.html","content":" The CFO can have many objectives, but often they include the following: Ensure accurate financials Ensure financials are promptly reported Produce the best results at the lowest cost Provide a work atmosphere that supports efficiency and growth Instill visibility and accountability to drive financial performance Enable staff to access data independent of outside departments Limit reliance on outside vendors by integrating and managing internal software Interject can help CFOs achieve each of these objectives. What's more, the management of future enhancements can be handled internally, between accounting staffs and internal IT departments. Interject is always available to help, but we aim to equip clients with tools and knowledge to handle things internally. There is one more very important aspect that all CFOs are looking for, particularly when dealing with software companies. CFOs want to work with IT professionals that have experience as controllers, CPAs, and CFOs. A software vendor with financial accounting experience can help remove the frustrations typical in software projects run by vendors who do not. Interject's CEO is a CPA with 15 years of controller experience, and many of Interject's technical staff have business or accounting backgrounds. "},{"title":"Why CIO's Like Interject","url":"/wAbout/Why-CIOs-Like-INTERJECT.html","content":" The CIO has specific needs when a company is growing. They are typically looking for the following: Maximizing the utilization of existing software–extending the investment Reducing labor costs for user support Minimizing reporting staff Providing department-point solutions without encumbering development staff Limiting dependency on outside vendors Reducing spreadsheet sprawl within the network Mitigating the need for Access and Excel VBA projects Report-activity-logging that provides insights to usage patterns and dependencies Leveraging Interject's technology, CIOs will achieve all of these. And it is done by retaining control of customization. Interject need only be called when internal resources are too busy with other priorities. "},{"title":"Working with Interject","url":"/wAbout/Working-with-INTERJECT.html","content":" Overview Since Interject introduces new methods and standards for working with spreadsheets, it is helpful to understand some key concepts so you can realize its potential. The internet has proliferated the use of client/server web applications throughout the world, and it is time to apply this same way of thinking to spreadsheets. The following topics are helpful places to begin. Basics of Report Formulas Report Formulas are used to direct data in and out of your spreadsheet reports and applications. This section will illustrate what is behind the scenes of interactive Interject worksheets so you can better understand how they adapt to your needs. Tabular vs Data Cells There are two distinct approaches to reporting data with Interject. Most of the functionality that is presented in this knowledge base is directed at Tabular reports. Tabular reports are a common row/column approach to working with data, much like those seen in other reporting software like Microsoft Report Services and Crystal Reports. Data Cells, however, are single data points that you can place freely in reports to construct more complex presentations. Each Data Cell is a financial query to the Interject financial database, which you can easily control and is capable of accommodating companies with thousands of users. "},{"title":".NET API Setup","url":"/wApi/dot-net-api-setup.html","content":"Overview Interject allows data flow from custom sources through a web API. The Interject Java API is built upon C# and the .Net Framework. Requirements Internet Information Services (IIS) (if hosting with IIS) .NET >= 7.0 .NET SDK (for developing) Note: If you intend to use this API on Linux or macOS, it is necessary to download Mono, the cross platform open-source development platform based on the .NET Framework. Get The Code With Git, you can clone the repository directly to your system. Navigate to the desired directory and run the following command: git clone https://github.com/GoInterject/ids-dotnet-api.git Note: If this repo is private and you need access, please contact us. It will be public soon. Alternatively you can download the zip file and unpack manually: The Repo The repo contains two code bases: the interject.api code and the interject.data.api code. The Interject.Api contains the code relating to the handling of Interject requests, formatting data, and returning responses to the Interject Addin. This package is available on Nuget, the central package repository. The code base is included in the repo for preview. The Interject.Data.Api contains the code relating to controllers and endpoints. The Interject.Api package is imported from Nuget into the Interject.Data.Api with the using statement: using Interject.Api Getting IIS Internet Information Services (IIS) for Windows Server is a flexible, secure and manageable Web server for hosting anything on the Web. For most cases, the default roles and features of IIS will suffice. For more information, see Roles, Role Services, and Features. For detailed information on IIS installation, see here. Windows Open the Control Panel and click on Turn Windows features on or off: Under IIS, select the components you which to install: Windows Server Manager Click Manage and then Add Roles and Features: Follow the wizard that appears and under \"Server Roles\", select the Web Server (IIS) components you which to install: Publishing Publishing the web API varies depending on your development environment: Visual Studio VS Code .NET CLI Deployment Determine where you want your Web API files to reside. The default directory for Windows is \"inetpub\" located on the C drive but any folder will do. It is recommended to use a separate directory for the source rather than the published directory. For more information, see Host ASP.NET. Set Up Website in IIS Begin by opening up IIS. With Windows, click the Start button and type in \"IIS\": With Windows Server Manager, click on Tools and then IIS: In the left explorer pane, right click \"Sites\" and then select \"Add Website…\" The following IIS Settings will need to be setup for the website: Property Description Value Site name Identifies this site in IIS (only visible to the admin) Enter a descriptive value Application Pool Set of configuration settings Keep the default1 Physical path Source folder for the website Enter the directory you set up in deployment Pass-through authentication Authentication used for protected resources Keep the default setting \"Application user\" Binding Type Internet Security Protocol HTTP or HTTPS2 IP Address Addresses the server will listen to Keep the default setting \"All Unassigned\"3 Port Select a port for your website to run on Unused port4 Host name (Optional) Enter a name for the website Enter the name of the host 1 Upon creation of the website, the default IIS behavior is a custom Application Pool is created matching the name of the website. This App Pool is preferred instead of the default App Pool. 2 If HTTPS is selected you will need to set up an SSL Certificate (not covered in this documentation - see here) 3 This setting can be left as the default or a specific IP address can be used if this web server responds to multiple IP addresses. It is more common to use a specific IP address when dealing with multiple SSL certificates on the same web server. 4 Normally follows the default 80 for HTTP and 443 for HTTPS, unless a network administrator requires an override. If a used port is entered, you will need to enter a host name. An example of an API set up within a company's intranet is here: For more info about setting up a website in IIS, see Add a Web Site. Windows Host File The Windows hosts file is typically used to manually map host names to IP addresses when DNS resolution is not available or when you want to test a website before making it publicly accessible. If you are testing locally (127.0.0.1) or want to use custom domains, you will need to edit this file. The host file is located in the \"System32\" folder of your Windows installation: C:\\Windows\\System32\\drivers\\etc\\host Open this file as an Administrator in order to save changes. App Pool The Application Pools can be viewed by selecting it in the left hand explorer. Verify the pool being used is v4.0 for the .NET CLR Version and is using an integrated pipeline. Setting Security Permissions Depending on your use case, you may need to give the App Pool \"modify\" permissions. Step 1: Right click the website and select \"Edit Permissions…\" Step 2: On the Security tab, click Edit. Step 3: You will need to first add the App Pool to the list of groups. Click on Add. Step 4: To expand the search for the App Pool, you will need to select the root system. Click on Location. Step 5: Select the root system name and click OK. Step 6: For the object names to select, enter the following and click Check Names: IIS AppPool\\<Site Name> The App Pool name should appear underlined. Click OK to add the App Pool to the list of groups. Step 7: Now that the App Pool has been added to the group entities, ensure the Modify permission is checked for it. Finally click Apply and then OK twice to save the changes. Firewall When setting up a website in Internet Information Services (IIS), you may need to edit your firewall permissions to allow incoming traffic to the web server. This is an important step in making your website accessible to users over the network. Testing At this point, the server in IIS should be running. To confirm the API is working, navigate to the host name or port you set up previously and access the status endpoint (\"api/v1/status\"). You should see \"true\" if the API is working. Connection Strings The most common use of a Data API is for Intranet use. In this scenario a connection string can be shared by all users, while also protected within the Data API. Interject supports DataPortal connections for both direct DB access and API access. When using an API, you can code the API to perform certain DB actions by using \"PassThrough\" settings. These are configured in the DataPortal and DataPortal Connection. For these to work, they need to be able to find a connection string in the API. If this API offers public access, then connection strings should not be shared in the web.config file. Instead a custom validation lookup process should be implemented, which also requires some custom coding. This Data API uses a appsettings.json file for this purpose. Determine a meaningful name for the connection string (preferably without spaces) This name will be used by an Interject DataPortal Connection, and it will reference the connection string within the appsettings.json. Names must be unique. Open the appsettings.json file (in the interject-dotnet-api directory) in any text editor or code IDE. Add a new entry in the list of ConnectionStrings collection. Example of a connection string entry: \"Connections\": { \"ConnectionStrings\": [ { \"Name\": \"localhost\", \"ConnectionString\": \"Data Source=(local);Initial Catalog=interject_demos;Encrypt=False;Integrated Security=True\" } ] } Connecting to Interject With the API running and connection strings stored in the appsettings.json file, you can connect the Interject Addin by setting up a Data Connection and Data Portal on the Portal Site. For how to set up an API Data Connection, see Portal: API Connection. For Data Portals, see Data Portals. Interject Docs For more information on the Data API, you can refer to the docs in the repo. These docs pertain to setting up Interject reports and functions. They are found in the examples directory: File Description example.xlsx An example Excel workbook that interacts with the API endpoints formula_jcolumndef How to set up the jColumnDef formula portal_parameters How to set up Interject parameters report_fixed How to set up an Interject ReportFixed report_range How to set up an Interject ReportRange report_save How to set up an Interject ReportSave report_variable How to set up an Interject ReportVariable handler_pipeline How to work with the RequestHandler pipeline to set up a SQL data connection and controller user_message How to send messages back to the Interject from the API "},{"title":"jAcct()","url":"/wIndex/jAcct.html","content":" Function Summary A helper function that specifies filters for up to six segments of a Chart of Accounts. Function Arguments Parameter Name Description Default Optional Segment1 The first segment of a chart of accounts YES* … … YES* Segment6 The last segment of a chart of accounts YES* * Note that segments are optional and defined by each organization's needs. Excel Formula Bar Example =jCellN(jAcct(\"Revenue - Sales\",7002),11,2001,Actual) The jAcct function is wrapped in the jCellN function to filter which account it will pull. An example of this function is currently in construction in our documentation labs. Check back soon for an example with more context. However, for a demo report using this feature, visit the Epicor Demo in the report Library and open the file PL Trend - w/ DataCells. Argument Name Example Mapping Explanation Function Name jAcct() The name of the formula Segment 1 \"Revenue - Sales\" The first filter segment. Take only the revenue sales account Segment 2 7002 Filters to a specific location for a more specific account. "},{"title":"jBinder()","url":"/wIndex/jBinder.html","content":"Function Summary The jBinder function is designed to be used on an Excel report itself. It is standalone and it cannot be embedded in other functions. It is used to generate settings automatically for the Create Binder tool. It is meant to be used when Data Cell activated reports are being exported and distributed. jBinder() will leverage cell values as inputs for the Create Binder tool fields. In order to default the settings when using jBinder(), you must use one jBinder() function per setting. Each OptionName argument has an associated TargetCell, more information can be found in the Option Name List on this page. Function Arguments Argument Name Description Default Optional OptionName Associates a setting field in the Create Binder tool to the value of the TargetCell argument. NO TargetCell This is the value of the setting field in the Create Binder tool. It can utilize selected cell values, or string values depending on the option name value. NO Excel Formula Bar Examples Ex1) jBinder(\"TabPrefix\",\"PL_\") Ex2) jBinder(\"Segment1\",L9) Ex3) jBinder(\"SkipSheetMarker\",\"TRUE\") An example of this function is currently in construction in our documentation labs. Check back soon for an example with more context. Example Function Compositions Example 1 Argument Name Example Mapping Explanation FunctionName =jBinder() This is the excel function name used to call the function. It is only meant to be utilized directly on an Excel report and it is not designed to be embedded or have any embedded functions within it. OptionName \"TabPrefix\" This option name is used to append the TargetCell value to the beginning of the sheets created by the Create Binder tool. TargetCell \"PL_\" A string value that you customize. Example 2 Argument Name Example Mapping Explanation Function Name =jBinder() This is the excel function name used to call the function. It is only meant to be utilized directly on an Excel report and it is not designed to be embedded or have any embedded functions within it. OptionName \"Segement1\" The segment that will be iterated over by the Create Binder tool to create new tabs which will be Segment1 TargetCell L9 The value that will determine which items in the segment to create the binder tabs out of. Example 3 Argument Name Example Mapping Explanation Function Name =jBinder() This is the excel function name used to call the function. It is only meant to be utilized directly on an Excel report and it is not designed to be embedded or have any embedded functions within it. OptionName \"SkipSheetMarker\" Calls the Create Binder tool to set the Skip Sheet Marker check box to either a checked state or an unchecked state. TargetCell \"TRUE\" Determines what the check state is in for the Skip Sheet Marker Option. Option Name List Option Name TargetCell TabPrefix String value that you want to append to the beginning of each tab created by the Create Binder tool. MarkerCell This is left blank. TabSetting This can either be \"IncludeSheet\" or \"ExcludeSheet\". It indicates to the Create Binder tool whether a sheet should be included in the new report that it will build. DefaultSaveFileName When using the Export Book tool, this will automatically set the save name for a new file. Default This is left blank. CreateNewWorkbook This can only be a \"TRUE\" or \"FALSE\" value. Segment[SegmentNumber] This is a cell value that can be associated to a Segment so it returns the segment that can be iterated through based upon the selected cell value. WhenNewTabAlreadyExists This has three options: \"Replace\",\"Do Not Add\",\"Add with Altered Name\". TabSuffix String value that you want to append to the end of each tab created by the Create Binder tool. CustomItemList A single string encasing a comma delimited list that the Create Binder tool will iterate on. SkipSheetMarker This can only be a \"TRUE\" or \"FALSE\" value. CreateDetailTabs This can only be a \"TRUE\" or \"FALSE\" value. CreateSummaryTab This can only be a \"TRUE\" or \"FALSE\" value. CreateDetailTabs This can only be a \"TRUE\" or \"FALSE\" value. "},{"title":"jCell/jCellN()","url":"/wIndex/jCell.html","content":" Function Summary jCell retrieves data based on the provided parameters. The first argument is typically a jAcct() lookup when a company has more than one segment to filter. The retrieved data is always summarized into a single value. Filter text for up to six segments of a chart of accounts. Use the Interject function jAcct() when more than a single segment is used as a filter. Function Arguments Parameter Name Description Default Optional Full Account Filter text for up to six segments of a chart of accounts. Use the Interject function jAcct() when more than a single segment is used as a filter. NO Period The month or quarter to filter the retrieved data. YES Year The year or range of years to filter the retrieved data. YES Source A source filter that may include budget, actual, or forecast, depending on user's system. YES Version Filters the retrieved data. YES Company Sub-grouping to retrieve data only from a specific company or district. YES Currency YES Excel Formula Bar Example =jCellN(jAcct(\"Revenue - Sales\",7002),11,2001,Actual) An example of this function is currently in construction in our documentation labs. Check back soon for an example with more context. However, for a demo report using this feature, visit the Epicor Demo in the report Library and open the file PL Trend - w/ DataCells. Function Composition Argument Name Example Mapping Explanation Function Name jCellN() The name of the report formula. Full Account jAcct(\"Revenue - Sales\",7002) Which account the data is accessing based on the jAcct() filter. Period 11 Accessing the 11th period of that year to filter down further. Year 2001 The year of which the data is from. Source \"Actuals\" Looking at Actuals specifically from the period and year specified. Version Company Currency "},{"title":"jColumnDef()","url":"/wIndex/jColumnDef.html","content":" Function Summary The jColumnDef function defines a column based on one or more parameters. Each parameter represents a segment. The segments can be set to filter the data that this column represents. Typically this function is used with a Data Pull function for a financial report. The jColumnDef function utilizes a DataPortal to interact with the segments. This DataPortal is specifically setup for the particular needs of the company using Interject. The segments are thus customizable. For most companies, the Interject FinCube DataPortal will suffice for their reporting needs. For an example of this function, see Lab Create: Financial Variable . Function Arguments The parameters and segments listed below are some examples of the FinCube DataPortal. Actual parameters will vary depending on what DataPortal is being used. For more information about these parameters, see FinCube. Source (Segment12)The source of the data (e.g. \"Actual\", \"Budget\", \"Projection\", etc.). Type String/Range Constraints Max 255 char or single cell If Blank Does not filter data Period (Segment9)The period of the data (e.g. 1-12 for a month of the year, 1-4 for a quarter). Also accepts YYYY-MM format. Type String/Range Constraints Max 255 char or single cell If Blank Does not filter data Year (Segment10)The year of the data. Also accepts YYYY-MM format. Type String/Range Constraints Max 255 char or single cell If Blank Does not filter data Version (Segment11)The version of the data. Type String/Range Constraints Max 255 char or single cell If Blank Does not filter data Customizable (Segment1-8)Configurable segment. Type Custom Constraints Custom If Blank Custom BalanceTypeA string indicating the balance type. Type String Constraints \"MTD\", \"QTD\", \"YTD\", \"QTR\" If Blank \"MTD\" Excel Formula Bar Example =jColumnDef(Actual,11,2001) Function Composition Argument Name Example Mapping Explanation Function Name jColumnDef The name of this function. Source \"Actual\" The data for this column will be from \"Actual\". Period 11 The data for this column will be from period 11. Year 2001 The data for this column will be from year 2001. "},{"title":"jCombine()","url":"/wIndex/jCombine.html","content":" Function Summary The jCombine function concatenates a range or multiple ranges of cells into a single string using a designated delimiter. Blank cells are skipped. This function can be used as a standalone function and does not need to be embedded in another function. For an example of this function, see Lab Create: Using the Retain Feature. Function Arguments Selected RangeA range or multiple ranges that will be concatenated. If multiple ranges are selected, they need to be enclosed in parenthesis and separated by a comma (e.g. \"(a2,a14:b15,c6)\"). Concatenation happens row by row (i.e. each column in the row concatenates before moving to the next row). Type Range/(Range, Range, …) Constraints Max 7 ranges If Blank Function Error DelimiterThe string that will be used as the delimiter when selecting multiple cells. Type String Constraints Max 255 char If Blank \",\" Excel Formula Bar Example =jCombine((A2,F2:G2,R2:T2)) Function Composition Argument Name Example Mapping Explanation Function Name =jCombine() The name of this function. Selected Range (A2,F2:G2,R2:T2) The ranges selected for concatenation are: A2, F2:G2, and R2:T2. Delimiter Blank to indicate a comma is to be used as the delimiter. Usable In These Functions ReportRange ReportVariable "},{"title":"jCombineSmart()","url":"/wIndex/jCombineSmart.html","content":"Function Summary The jCombineSmart() function helps to concatenate the values of cells while simultaneously skipping any empty cells and removing any duplicates. jCombineSmart() can use both a cell range and a list of cell addresses. When using a list of cell addresses, they must be enclosed in parenthesis and delimited by commas, e.g. (A1:A5,B1:B20). When a continuous sequence of numbers is found in the selected range, only the first an last numbers in the sequence will be shown, and the middle values will be truncated to two periods, e.g. (1,2,3,4,5) becomes (1..5). This range code is set by default but may be customized by develpers. Converting to numeric is also a feature available for developers to trim any leading zeros from the selected range. This feature is false by default. Function Arguments Argument Name Description Default Optional Selected Range Designates a range of cells, within a worksheet, to concatenate. This can also be used with a delimited list of cells. NO Delimiter Defines the character value to designate a separation between cell values. A comma is the default delimiter. \",\" YES Range Code Defines the characters to designate when a list of cells is concatenated into a range. \"..\" YES Convert to Numeric This will remove any leading zeros within the Selected Range. Executing the jCombineSmart() function wil will reflect the results of this feature. FALSE YES Excel Formula Bar Example jCombineSmart(A15:A30,,,TRUE) This is a simplified example to show the format you would see in Excel. Example Function Composition Argument Name Example Mapping Explanation Function Name =jCombineSmart() The Excel function name used to call the function. It can be used alone in a report and can be embedded inside of Data or Formatting functions Selected Range (A15:A30) In this example a range of values would look like this: ValueOfA15 through ValueOfA30 Delimiter \"\" Leaving the delimiting value blank means that jCombineSmart will use its default comma delimiter. Set a delimiting character value by entering a character into the function after the range value. For example, \";\". Range Code \"\" Like the delimiter, keeping this blank means jCombineSmart will use its default value of two periods. Change it by adding a charactor or series of charactors of your choosing. Convert To Numeric TRUE Any leading zero will now be trimmed off. For example 0001 will trim to 1. Usable In These Functions Param ReportRange ReportVariable ReportFixed ReportSave "},{"title":"jCombineIF()","url":"/wIndex/jCombine_IF.html","content":" Function Summary The jCombineIF function concatenates a range or multiple ranges of cells into a single string using a designated delimiter if a certain condition is met. Blank cells are skipped. This function can be used as a standalone function and does not need to be embedded in another function. Function Arguments CriteriaRangeA range designated to be the criteria range. Each cell in this range will be compared to the value in the CriteriaValue argument. If the cell matches, the corresponding cell in the SelectedRange will be concatenated. Type Range Constraints Must match the dimensions of SelectedRange If Blank Function Error SelectedRangeA range that will be concatenated. Concatenation happens row by row (i.e. each column in the row concatenates before moving to the next row). Type Range Constraints Must match the dimensions of CriteriaRange If Blank Function Error CriteriaValueA value designated to be the criteria (the first cell is used if a range is entered). If the value here matches a cell in the CriteriaRange argument, the corresponding cell in the SelectedRange will be concatenated. Type Range/String/Boolean Constraints Max 255 char If Blank Does not concatenate any cells DelimiterThe string that will be used as the delimiter when selecting multiple cells. Type String Constraints Max 255 char If Blank \",\" Excel Formula Bar Example =jCombineIF(J16:O16,J15:O15,TRUE,\";\") Function Composition Argument Name Example Mapping Explanation Function Name =jCombineIF() The name of this function. CriteriaRange J16:O16 The range J16:O16 will be used to compare values. If a cell in this range matches the CriteriaValue, the corresponding cell in SelectedRange will concatenated. For example, in this case, if J16 = True, then J15 will be concatenated. If J17 = True, then J16 will be concatenated, etc. SelectedRange J15:O15 The range J15:O15 will be the values concatenated if the criteria is met. CriteriaValue TRUE The boolean value of True is used as the criteria. Delimiter \";\" The semicolon \";\" will be used as the delimiter for the concatenation. Usable In These Functions ReportRange ReportVariable "},{"title":"jDataPortal()","url":"/wIndex/jDataPortal.html","content":" Function Summary The jDataPortal function establishes a connection to an Interject DataPortal that will be used as the data source for the function it is embedded in. Data sets accessed utilizing the jDataPortal are stored in memory. This allows the data set to be accessed later without having to query the data again via the DataPortal. For an example of this function, see Lab Dev: Customer Aging Detail. For instructions on how to set up this function, see Setting Up the jDataPortal. Function Arguments DataPortalNameThe name of the Interject DataPortal that will be used as the data source for this function. Type String Constraints Max 255 char If Blank Function Error DataResultNumberThe index number of the data set requested. When multiple sets are returned from the data source, this parameter can specify the particular result set. Type Integer Constraints If Blank Will return the first data set FilterA valid SQL statement that normally follows a WHERE statement. This will filter the data. Type String Constraints Max 255 char; valid SQL statement If Blank Will not filter data OrderByA valid SQL statement that normally follows an ORDER BY statement. This will order the data. Type String Constraints Max 255 char; valid SQL statement If Blank Will not order data CommandOverrideA string indicating a different Stored Procedure or API to run. This feature can only be done by ClientAdmin or a SysAdmin roles. Type String Constraints Max 255 char If Blank Will not override ConnectionOverrideA string indicating a different data connection to run. Type String Constraints Max 255 char If Blank Will not override Excel Formula Bar Example =jDataPortal(\"NorthwindMultiRecord_Pull\",2,\"[CompanyName] Like '%s%'\",\"[CustomerID] ASC\") Function Composition Argument Name Example Mapping Explanation Function Name =jDataPortal The name of this function. Data Portal Name NorthwindMultiRecord_Pull This function will use the \"NorthwindMultiRecord_Pull\" DataPortal for the data source. Data Result Number 2 This data connection will use the 2nd result set previously held in memory from previous calls. Filter [CompanyName] Like ‘%s%’ This data connection will only return records whose CompanyName contains an 's' character. OrderBy [CustomerID] ASC The data result will be ordered by the column CustomerID in ascending order. CommandOverride Left blank to indicate to not override the command. ConnectionOverride Left blank to indicate to not override the connection. Usable In These Report Formulas ReportRange() ReportVariable() ReportFixed() "},{"title":"jDesc()","url":"/wIndex/jDesc.html","content":" Function Summary This function is used to look up a context description based on a specific segment. Function Arguments Parameter Name Description Default Optional Value A cell that contains a value to lookup NO Segment Number The Segment number to check the value against. NO Excel Formula Bar Example <Coming Soon> Function Composition <Coming Soon> "},{"title":"jDropdown()","url":"/wIndex/jDropdown.html","content":" Function Summary The jDropdown function returns data from a DataPortal that can be displayed in a dropdown window for the user to select and insert into a designated cell within the spreadsheet. It is typically used to easily insert a valid parameter into the spreadsheet to filter the data returned by a report function after a pull action. When this function is linked to a hyperlink, the user can simply click on the hyperlink to display a list of valid parameters and insert one or more into the spreadsheet. For an example of this function, see jDropdown. Function Arguments DataPortalThe name of the Interject DataPortal that will be used as the data source for this function. A Custom List may be entered instead of a DataPortal. Type String/jDataPortal() Constraints Max 255 char If Blank Function Error ParametersThe cells designating the parameters for the DataPortal. The values in these cells will filter the data that is inserted from the data source. Type Param() Constraints The values must match the order of the parameters in the data source (The order can be verified using the [ Validation Report ](/wTroubleshoot/Reports.html#validation-report-for-pullsave-events) ) If Blank Data is not filtered MultiSelectTrue: Will enable the option to select multiple entries to insert.False: Will only enable one entry to be selected. Type Boolean Constraints If Blank False Target CellThe range where the selected entry will be inserted (will insert into every cell in this range). Type Range Constraints If Blank Function Error Value Column NameThe name of the column to be used for the entry or entries that will be inserted into the Target Cell. Type String Constraints Max 255 char If Blank Function Error Display Column NameThen name of the column from the DataPortal that will be displayed in the drop down list. Type String Constraints Max 255 char If Blank Uses Value Column Name DelimiterThe string that will be used as the delimiter when inserting multiple selections. Type String Constraints Max 255 char If Blank \",\" Instruction TextThe string that will be displayed in the popup window under the window title. Type String Constraints Max 255 char If Blank \"Please select the desired options below.\" Excel Formula Bar Example =jDropdown(jDataPortal(\"NorthwindCustomersDropdown\",1),,FALSE,C17,\"CompanyName\",\"DisplayText\",,\"Select a Customer\") Function Composition Argument Name Example Mapping Explanation Function Name =jDropdown() The name of this function. DataPortal jDataPortal(\"NorthwindCustomersDropdown\",1) Uses the helper function jDataPortal() designating the \"NorthwindCustomersDropdown\" DataPortal. Filters the records to include only those whose CustomerID contains the string \"save\". Parameters \"\" The data returned from the data source will not be filtered. MultiSelect FALSE Only one entry can be selected from the dropdown window. Target Cell C17 The entry selected will be inserted into cell C17. Value Column Name \"CompanyName\" The selected value for the column \"CompanyName\" will be inserted. Display Column Name \"DisplayText\" ??? Delimiter Value ignored because MultiSelect is false. Instruction Text \"Select a Customer\" The text \"Select a Customer\" will be displayed under the title in the dropdown window. Embeddable Helper Functions jDataPortal Param "},{"title":"jFocus()","url":"/wIndex/jFocus.html","content":" Function Summary The jFocus function will move the cursor and select a targeted range after a freeze panes action using Interject's Freeze/UnFreeze Panes action. The jFreezePanes function must be set up for this to trigger. The Freeze/UnFreeze Panes action can be found in Quick Tools on the Interject Ribbon Menu. For an example of this function, see Lab Create: Customer Aging. Function Arguments TargetThe range that will be selected after a freeze panes action. Type Range Constraints If Blank Will select the cell defined in jFreezePanes FreezePanesCell argument Excel Formula Bar Example =jFocus(C17) Function Composition Argument Name Example Mapping Explanation Function Name =jFocus The name of this function. Target C17 Cell C17 will be selected after a freeze panes action. "},{"title":"jFreezePanes()","url":"/wIndex/jFreezePanes.html","content":" Function Summary The jFreezePanes function freezes a designated pane so the user can scroll through data and still keep the frozen pane in view. The function also hides a designated range of the report, typically the configuration section of an Interject report. This provides the user with a more user-friendly simplified viewing experience. This action can be triggered by the Freeze/UnFreeze Panes found in Quick Tools on the Interject Ribbon Menu. There is also an option there to Freeze All Tabs, which will freeze all sheets containing the jFreezePanes function (it will not unfreeze the panes). For an example of this function, see Lab Create: Customer Aging. Function Arguments FreezePanesCellA range of cells, the first row of which will be used as the last row frozen in place. All rows after this row will be unfrozen and able to scroll freely after a freeze panes action. This is typically the header row of column names above the targeted data that is or will be inserted. This will allow the header row to stay in view while scrolling through the data. Best practice is to use a range instead of whole rows. Type Range Constraints If Blank Function Error AnchorViewCellA range of cells, the first row of which will be the top most displayed row after a freeze panes action. This is typically the row just below the Interject's configuration area. Best practice is to use a range instead of whole rows. Type Range Constraints If Blank Will display all rows Excel Formula Bar Example =jFreezePanes(A21,A15) Function Composition Argument Name Example Mapping Explanation Function Name =jFreezePanes() The name of this function. FreezePanesCell A22 Row 22 will be frozen in place and all rows from 23 on will be able to scroll. AnchorViewCell A15 Row 15 will be the topmost row in view after a freeze panes action. "},{"title":"jMergePoint()","url":"/wIndex/jMergePoint.html","content":"Function Summary Acts as a reference point for ReportMerge . For examples and discussion, view the tutorial. Function Arguments Parameter Name Descripton Default Optional TabName Enter the name of the tab to be copied. Supports a single variable (example \"Sheet1\", \"Sheet\", or just \"\") NO Placement Enter \"before\" or \"after\" to indicate the placement of the sheet based on the anchor sheet NO Anchor Enter the name of the sheet to be used as the placement anchor. Also use jTabName() to indicate the current sheet, or use jTabName(Sheet2!a2) to reference another sheet. NO Excel Formula Bar Example Function Composition "},{"title":"jRangeTag()","url":"/wIndex/jRangeTag.html","content":" Function Summary The jRangeTag function simply tags a designated range with a name. This is used to support certain automated processes unique to Interject functions, for example report distribution. For an example of this function, see Lab Create: Basic Distribution. Function Arguments TagThe name to tag the range Type String Constraints Max 255 char If Blank Will fail RangeThe range to be associated with the Tag Type Range Constraints If Blank Will fail Excel Formula Bar Example =jRangeTag(\"Location\",M22) Function Composition Argument Name Example Mapping Explanation Function Name =jRangeTag() The name of this function. Tag \"Location\" This range is tagged as \"Location\". Range M22 The range to be tagged is M22. "},{"title":"jSetting()","url":"/wIndex/jSetting.html","content":" Function Summary The jSetting function is a simple way to create a JSON Tag/Value pair that can be used internally by the Interject system. This function can be used as a standalone function and does not need to be embedded in another function. Function Arguments TagThe title or tag of the setting. Type String Constraints Max 255 char If Blank Empty string ValueThe value of the setting. Type String Constraints Max 255 char If Blank Empty string Excel Formula Bar Example =jSetting(\"NamedRangePrefix\", \"Filter\") Function Composition Argument Name Example Mapping Explanation Function Name =jSetting() The name of this function. Tag \"NamedRangePrefix\" This setting is tagged as \"NamedRangePrefix\" Value \"Filter\" This setting's value is \"Filter\" "},{"title":"jWorkbookProperty()","url":"/wIndex/jWorkbookProperty.html","content":" Function Summary The jWorkbookProperty function extracts information from the properties of the workbook. This function can be used as a standalone function and does not need to be embedded in another function. For an example of this function, see Lab Create: Inventory Fixed. Function Arguments PropertyNameA string value indicating which property to extract. Type String Constraints Max 255 char If Blank Nothing is extracted Excel Formula Bar Example =jWorkbookProperty(\"Interject_LinkVersion\") Function Composition Argument Name Example Mapping Explanation Function Name =jWorkbookProperty The name of this function. PropertyName Interject_LinkVersion This function will return the value of the custom property \"Interject_LinkVersion\". Workbook Property List Native Excel Properties These are properties that can be extracted using this function. They are native to every Excel workbook and can be edited on the workbook's info page in settings. They can be extracted with the following values (case-insensitive): Title Comments Category Subject Author Company Keywords Custom Workbook Properties In addition to the native Excel properties, this function can also extract custom workbook properties. You can add or edit these properties in the Advanced Properties on the workbook's info page in settings. Interject utilizes these custom properties to store information about the workbook. These custom properties are displayed in the Report Library and can be extracted with this function (case-sensitive). "},{"title":"Java API Setup","url":"/wApi/java-api-setup.html","content":"Overview Interject allows data flow from custom sources through a web API. The Interject Java API is built upon Java and the Spring Framework. Requirements Java Maven Get the Code With Git, you can clone the repository directly to your system. Navigate to the desired directory and run the following command: git clone https://github.com/GoInterject/ids-java-api.git Note: If this repo is private and you need access, please contact us. It will be public soon. Alternatively you can download the zip file and unpack manually: Setup Open a terminal and navigate to the \"ids-java-api\" directory where the repo was installed. Then navigate to the \"interject-webapp\" directory. Download dependencies: mvn dependency:copy-dependencies Create a clean build of the Rest API: mvn clean package Run API To run with Maven: mvn spring-boot:run To run with Java: java -jar \"./target/interject-webbapp-1.0.0-SNAPSHOT.jar\" Note: For more information, view the Readme in the parent directory or the doc files in the docs folder of the repo. Change Host and Port To change the host and port number, simply change the values in the application.yaml file: server: port: 8080 address: 127.0.0.1 Development Docs There are docs in the repo pertaining to development. They are found in the asciidoc directory: File Description add-new-endpoint How to add a new endpoint local-development Setting up a local development environment local-test How to run and create new test cases sql-request-example An example body of a SQL request swagger-ui Information about the Swagger UI Interject Docs There are docs in the repo pertaining to setting up Interject reports and functions. They are found in the examples directory: File Description example.xlsx An example Excel workbook that interacts with the API endpoints formula_jcolumndef How to set up the jColumnDef formula portal_parameters How to set up Interject parameters report_fixed How to set up an Interject ReportFixed report_range How to set up an Interject ReportRange report_save How to set up an Interject ReportSave report_variable How to set up an Interject ReportVariable sql_data_connection How to work with the SqlDataConnection interface to set up a SQL data connection and controller user_message How to send messages back to the Interject from the API "},{"title":"Lab Guide","url":"/wLabs/lab.html","content":" Overview These labs are offered as an introductory course on the Interject® Add-In for Microsoft Excel®. By following this guide, you will be learn how to use the Interject Add-in to create and modify reports in Excel. You will also learn features to customize your reports further and ways to interact between Interject and Excel to make your reports useful in a variety of situations. Finally, you will learn how to export these reports and distribute them. Subscription Setup In order to have the necessary requirements to go through the Lab Guide, a user just needs to be subscribed to the \"Publisher - Interject App\". To request a subscription, contact us at info@gointerject.com. Once subscribed, a user can select this company from the Interject ribbon: The Publisher - Interject App company gives a user access to all the lab files via the Report Library: In addition, the Publisher - Interject App company grants a user access to all the Data Portals referenced in the labs. All the Data Portals in the Lab Guide use an API Data Connection. Therefore, no local database is necessary. To setup the lab environment manually, see here. Before You Begin Before you begin your labs, you should familiarize yourself with some basic Concepts that you will use throughout the labs: Installing Interject Logging In Report Library Basics Lab 1 : Real World Walkthroughs This lab will give you an understanding of how the Interject Add-in can be used with Excel in real world scenerios. It will give you a meaning and purpose for the labs. For more overview, see Real-World Examples. 1.1 Customer Aging Concepts : • Pulling Data • Filter Data • Drilling Data • Adding Notes • Updating Database by Saving Data • Adding a Field to a Table 1.2 Inventory Reports Concepts : • Drilling Data via Hyperlink • Returning From Drilling 1.3 Financial Report Concepts : • Collapsing and Expanding Groupings • Drill Data • Drill on a Journal Entry Lab 2 : Modifying Reports Sometimes it is easier to modify an existing report rather than creating a whole report from scratch. This lab will guide you through how to modify an existing report to accommodate your desired report. For more overview, see Modifying an Existing Report. 2.1 Basics of Report Formulas Concepts : • Viewing the Hidden Interject Configuration Section • The Column Definitions Section • The Formatting Range Section • The Report Formulas Section • The Hidden Parameters and Notes Section 2.2 Lab Modify: Customer Aging Concepts : • Entering Formulas • Understanding of How Interject Copies Formulas by Pulling Data 2.3 Lab Modify: Inventory Report Concepts : • Entering Formulas • Understanding of How Interject Copies Formulas by Pulling Data • Adding a Column Definition • Freeze Panes via Interject Quick Tools 2.4 Lab Modify: Financial Report Concepts : • Adding Columns to Expand Report • Modifying a Report Lab 3 : Creating Reports Interject can help build a report from scratch by using the Report Builder feature. This feature opens a template that you can further modify. For more overview, see Creating a Simple Report. 3.1 Lab Create: Customer Aging Concepts : • Building a Report via Interject Report Builder • Copying Labels Into the Column Definitions • Moving a Column • Modifying the ReportRange Function • Setting up the jFreezePanes Function 3.2 Lab Create: Customer Orders Concepts : • Building a Report via Interject Report Builder • Editing the Column Definitions • Editing the ReportRange Function • Adding Multiple Rows of Column Definitions 3.3 Lab Create: Inventory Fixed Concepts : • Building a Report via Interject Report Builder • Editing the ReportFixed Function • Setting up a Run on Open 3.4 Lab Create: Inventory Variable Report Concepts : • Editing the ReportVariable Function • Understanding of the Leftovers Section • How to Format the Appearance of Data 3.5 Lab Create: Financial Variable Concepts : • Understanding Profit and Loss Report Notation • Building a Profit and Loss Report 3.6 Lab Create: Customer Aging Detail Concepts : • Building a Report via Interject Report Builder • Editing the ReportRange Function • Adding Multiple Rows of Column Definitions • Adding Multiple Rows of Formatting • Editing the ReportVariable Function Lab 4 : Drilling To Data Interject contains a feature called Drill on Data. This feature allows the user to open up a detailed report on a targeted set of data. For more overview, see Drill Between Reports. 4.1 Lab Drill: Customer Aging Concepts : • Building a Drill on Data 4.2 Lab Drill: Inventory Report Concepts : • Building a Drill on Data • Creating Hyperlinks to Drill on Data 4.3 Lab Drill: Financial Report Concepts : • Building a Drill on Data 4.4 Lab Drill: Drilling to a Separate Workbook Concepts : • Drilling to a Separate Workbook • Uploading a Report to the Report Library • Adding a Drill Code Lab 5 : Advanced Features In this lab you will learn certain features that provide more flexibility to design user-friendly reports. 5.1 Lab Create: Hiding Rows & Columns Concepts : • Hiding Certain Rows After Pulling Data 5.2 Lab Create: Advanced Row and Section Hiding Concepts : • Hiding Certain Rows After Pulling Data (Advanced) 5.3 Lab Create: Building jDropdowns Concepts : • Building a jDropdown Menu to Expedite Filtering Report Data 5.4 Lab Create: Special Column Definitions Concepts : • Adding a Pop-up Comment to a Cell • Adding a Hyperlink to Cell Data • Adding a Dropdown Validation Menu to a Cell • Stacking Multiple Attributes to a Cell 5.5 Lab Create: Using the Retain Feature Concepts : • How to Retain Formulas After Pulling Data Lab 6 : Special Features In this lab you will learn certain features that highlight key areas that can help in special situations. 6.1 Lab Create: Working with Pivot Tables Concepts : • Building a Pivot Table to Customize a Report 6.2 Lab Create: Protecting Sheets Concepts : • Adding Protection to a Sheets • Adding Protection to Multiple Sheets • Grouping and Ungrouping Columns 6.3 Lab Create: Using Report Macro Concepts : • Creating a Report Macro 6.4 Lab Create: Interject Run On Open Concepts : • How to Enable Interject to Pull Data Upon Opening a Report Lab 7 : Exporting Data This lab will focus on how to export a report once it is completed and utilizing Interject's distribution feature. 7.1 Lab Export: Quick Export and PDF Concepts : • How to Export a Report to a New Workbook • How to Export a Report to a New PDF 7.2 Lab Export: Basic Distribution Concepts : • Setting up a Distribution Report • Distributing a Report to New Workbook • Distributing a Report to File • Distributing a Report via Email 7.3 Lab Export: Advanced Distribution Concepts : • Adding Prefixes and Suffixes to the Distributed Report • Adding Keywords for Generated Report Tabs • Distributing to Mulitple Sheets • Distributing to Multiple Workbooks • Distributing Without Pulling Data • Grouping Segments "},{"title":"Privacy Policy","url":"/wAbout/privacy-policy.html","content":" Interject’s Privacy Policy Statement Interject™ (“Interject,” “we,” or “us”) respects your privacy. This Privacy Policy Statement (“Privacy Policy”) describes the ways we collect information from and about you, and what we do with the information, so that you may decide whether or not to provide information to us. By accessing our websites, or purchasing and using our products or services, you agree to this Privacy Policy in addition to any other agreements we might have with you. In the event that such agreements contain terms conflicting with this Privacy Policy, the terms of those agreements will prevail. Our Collection of your Information Personal Information The information we collect may include your personal information, such as your name, contact information, IP addresses, product and service selections, and other things that identify you. We collect personal information from you at several different points, including but not limited to the following: when we correspond with you as a customer or prospective customer when you visit our website and install our products when you register as an end-user of our services and an account is created for you when you use our products when you contact us for help when you attend our customer conferences or webinars when our products or websites send us error reports or application analytics data Our Use of your Personal Information Interject may use information that we collect about you to: deliver the products and services that you have requested manage your customer relationship and provide you with customer support perform research and analysis about your use of, or interest in, our products, services, or content, or products, services or content offered by others communicate with you by email, postal mail, telephone or mobile devices about products or services that may be of interest to you either from us, or other third parties develop and display content and advertising tailored to your interests on our site and other websites verify your eligibility and deliver prizes in connection with promotions, contests and sweepstakes enforce our terms and conditions manage our business perform functions as otherwise described to you at the time of collection Our Disclosure of your Personal Information to Third Parties We may share your personal information with third parties only in the ways that are described in this Privacy Policy: we may provide your information to affiliated entities within our corporate group, as well as with vendors who perform functions on our behalf; such parties provide hosting and maintenance services, virtual infrastructure, payment processing, analysis, and other services for us third party contractors may have access to our databases. These contractors sign a standard confidentiality agreement we may share your data with any parent company, subsidiaries, joint ventures, other entities under a common control or third-party acquirers. We expect these other entities will honor this Privacy Policy we may allow a potential acquirer or merger partner to review our databases, although we would restrict their use and disclosure of this data during the diligence phase as required by law enforcement, government officials, or other third parties pursuant to a subpoena, court order, or other legal process or requirement applicable to Interject; or when we believe, in our sole discretion, that the disclosure of personal information is necessary to prevent physical harm or financial loss; to report suspected illegal activity or to investigate violations of our agreements or company policies; to enforce our terms and conditions, to protect the security or integrity of our products and services when you give us consent to do so Please note that these third parties may be in other countries where the laws on processing personal information may be less stringent than in your country. Our Security Measures to Protect your Personal Information Interject uses industry-standard technologies when transferring and receiving data exchanged between Interject and other companies to help ensure its security. This site has security measures in place to help protect information under our control from the risk of accidental or unlawful destruction or accidental loss, alteration or unauthorized disclosure or access. However, “perfect security” does not exist on the Internet. Also, if this website contains links to other sites, Interject is not responsible for the security practices or the content of such sites. Our Use of Cookies, Web Beacons, Web Analytics Services, and Links Cookies. Many of our web pages use “cookies.” Cookies are text files we place in your computer’s browser to store your preferences. Cookies, by themselves, do not tell us your e-mail address or other personally identifiable information unless you choose to provide this information to us by, for example, registering at one of our sites. However, once you choose to furnish the site with personal information, this information may be linked to the data stored in the cookie. We use cookies to understand site usage and to improve the content and offerings on our sites. We also may use cookies to offer you products, programs, or services. You have many choices with regards to the management of cookies on your computer. All major browsers allow you to block or delete cookies from your system. To learn more about your ability to manage cookies, please consult the privacy features in your browser. Web Beacons. Interject and third parties may also use small pieces of code called “web beacons” or “clear gifs” to collect anonymous and aggregate advertising metrics, such as counting page views, promotion views, or advertising responses. These “web beacons” may be used to deliver cookies that conform to Interject’s cookie requirements. Web Analytics Services. We use Google Analytics, a service for the marketing analysis of the site provided by Google, Inc. Google Analytics uses cookies to allow us to see how you use our site, so we can improve your experience. Google’s ability to use and share information collected by Google Analytics about your visits to the site is restricted by the Google Analytics Terms of Use, available at http://www.google.com/analytics/terms/us.html, and the Google Privacy Policy, available at http://www.google.com/policies/privacy/. You can prevent Google Analytics from recognizing you on return visits to the site by disabling cookies in your browser. If you prefer to not have data reported by Google Analytics, you can install the Google Analytics Opt-out Browser Add-on, available at https://tools.google.com/dlpage/gaoptout. Website Links. We may create links to other websites. We will make a reasonable effort to link only to sites that meet similar standards for maintaining each individual’s right to privacy. However, many other sites that are not associated with or authorized by Interject may have links leading to our site. Interject cannot control these links and we are not responsible for any content appearing on these sites. Since this website does not control the privacy policies of third parties, you are subject to the privacy practices of that third party. We encourage you to ask questions before you disclose any personal information to others. App Links. A given application may provide you with an advertising link to other, third-party sites and applications. Such third-party sites will have their own data collection practices and policies. Please review the privacy policy for such sites and exercise caution in providing information that personally identifies you. We have no responsibility, access, or control over the data collection practices and policies of such third-party sites and applications. You will use such sites and applications at your own risk and outside of the scope of this Privacy Policy. The provision of such advertisements is done on an “As Is” basis, with no endorsements or representations. Other. Interject websites may use third parties to present or serve the advertisements that you may see at its web pages and to conduct research about the advertisements and web usage. This Privacy Policy does not cover any use of information that such third parties may have collected from you or the methods used by the third parties to collect that information. Limiting Use, Disclosure, Retention Interject identifies the purposes for which the information is being collected before or at the time of collection. The collection of your personal data will be limited to that which is needed for the purposes identified by Interject. Unless you consent, or we are required by law, we will only use the personal data for the purposes for which it was collected. If Interject will be processing your personal data for another purpose later on, Interject will seek your further legal permission or consent; except where the other purpose is compatible with the original purpose. We will keep your personal data only as long as required to serve those purposes. We will also retain and use your personal data for as long as necessary to comply with our legal obligations, resolve disputes, and enforce our agreements. Accuracy of Personal data We do our best to ensure that the personal data we hold and use is accurate. We rely on the customers we do business with to disclose to us all relevant information and to inform us of any changes. Your Access to and Updating of your Personal data Reasonable access to your personal data may be provided upon request made to Interject at the contact information provided below. If access cannot be provided within that time frame, Interject will provide the requesting party a date when the information will be provided. If for some reason access is denied, we will provide an explanation as to why access has been denied. We may charge a reasonable fee in advance for copying and sending the information requested. If you would like us to delete any personal Data held about you, we will do so on request unless we need to hold the information as part of the provision of products and services to you. Marketing Communications We offer those who provide personal contact information a means to choose how we use the information provided. You may manage your receipt of marketing and non- transactional communications by clicking on the “unsubscribe” link located on the bottom of our marketing emails. Notice to End Users Most of our services are intended for use by organizations. Where the services are made available to you through an organization (e.g. your employer), that organization is the administrator of the services and is responsible for the accounts and/or service over which it has control. Please direct your data privacy questions to your administrator, as your use of the services is subject to that organization’s policies. We are not responsible for the privacy or security practices of an administrator’s organization, which may be different than this policy. Administrators may be able to: help you exercise the rights described in Section 12 (if applicable) allow you to reset your account password restrict, suspend, or terminate your access to the services access information in and about your account access or retain information stored as part of your account change your information, including profile information associated with your account allow you or restrict your ability to edit, restrict, modify, or delete information. Please contact your organization or refer to your administrator’s organizational policies for more information. Children’s Privacy Because of the nature of our business, our services are not designed to appeal to minors. We do not knowingly attempt to solicit or receive any information from anyone under the age of 13. If you are a parent or guardian and you are aware that your child has provided us with personal data, please contact us immediately. Your California Privacy Rights (United States only) Interject does not currently respond to browser “Do Not Track” (DNT) signals or other mechanisms. Third parties may collect personal data about your online activities over time and across sites when you visit the Site or use the Service. If you are a California resident, California Civil Code Section 1798.83 permits you to request certain information regarding our disclosure of personal data to third parties for the third parties’ direct marketing purposes. To make such a request, please contact us by sending an e-mail to privacy@gointerject.com. Our sites, products, and services are not intended to appeal to minors. However, if you are a California resident under the age of 18, and a registered user of our Site or Service, California Business and Professions Code Section 22581 permits you to request and obtain removal of content or information you have publicly posted. To make such a request, please send an email with a detailed description of the specific content or information to privacy@gointerject.com. Please be aware that such a request does not ensure complete or comprehensive removal of the content or information you have posted and that there may be circumstances in which the law does not require or allow removal even if requested. Under California law, California residents who have an established business relationship with us may opt-out of our disclosing personal data about them to third parties for their marketing purposes. Data Security We shall take reasonable steps to protect the Personal Data from loss, misuse and unauthorized access, disclosure, alteration and destruction. Interject has put in place appropriate physical, electronic, and managerial procedures to safeguard and secure the Personal Data from loss, misuse, unauthorized access or disclosure, alteration or destruction. However, Interject cannot guarantee the security of Personal Data on or transmitted via the Internet. Data Integrity and Purpose Limitations We shall only process Personal Data in a way that is compatible with and relevant for the purpose for which it was collected or authorized by the individual. To the extent necessary for those purposes, Interject shall take reasonable steps to ensure that Personal Data is accurate, complete, current, and reliable for its intended use. Access We acknowledge the individual’s right to access their Personal Data. We shall allow an individual access to their Personal Data and allow the individual the opportunity to correct, amend or delete inaccurate information, except where the burden or expense of providing access would be disproportionate to the risks to the privacy of the individual in the case in question, or where the rights of persons other than the individual would be violated. Individuals may contact our Data Protection Officer via email at privacy@gointerject.com to request to access, correct, amend, or delete the personal information Interject holds about you. In cases where Interject is a Data Sub-Processor or Processor, individuals must contact the Data Processor or the Data Controller, as applicable. Changes to our Privacy Policy Interject may amend this Privacy Policy at any time by posting a new version. It is your responsibility to review this Privacy Policy periodically as your continued use of this website and our products and services represents your agreement with the then-current Privacy Policy. Contacting Us We have designated a Data Protection Officer who is responsible for monitoring Interject’s ongoing compliance of this Privacy Policy. If you have any questions about this Privacy Policy, the practices or concerns of this site, please contact our Data Protection Officer at: privacy@gointerject.com. Amendments This Privacy Statement may be amended from time to time consistent with the requirements of the Shield Frameworks. We will post any revised policy on this website. Information Subject to Other Policies We are committed to following the Principles for all Personal Data within the scope of the Privacy Shield Frameworks. However, certain information is subject to policies of Interject that may differ in some respects from the general policies set forth in this Privacy Statement. Updated: March 2020 "},{"title":"Custom Functions With The Python Interject API","url":"/wApi/python-api-custom-functions.html","content":"Setup setup requires the following conditions be met: The Python Interject API is downloaded and all dependancies satisfied appconfig.py contains a name of a valid python script in the current directory for CUSTOM_MODULE I.E. CUSTOM_MODULE = 'etl' the custom python function script contains a function that expects kwargs and returns a dataframe Interject Connection name = user defined connection type = \"web api\" api root uri = url to your interject python server api connection string name = Not Needed authentication type = 10 Interject Dataportal connection = name of connection command type = stored procedure name Stored Procedure / Command = function name to run in CUSTOM_MODULE Api Relative URI = PandasDataframeRequest or MongoDBRequest ### etl.py ### import pandas as pd def interject_custom_func(**kwargs): \"\"\" Custom defined function which operates on pulled data from excel or a dataportal source before sending the data to its final destination Arguments: kwargs {dict} -- dictionary with options and input dataframe NOTE: - kwargs contains (dataframe, param_list) - expects return value to be a pandas DataFrame() \"\"\" d = {\"column1\":[1,2,3,4,5,6,7,8], \"column2\" : [5,4,3,2,1,5,43,7]} kwargs['dataframe'] = pd.DataFrame(d) kwargs['user_message'] = \"user message to return\" kwargs['param_list']['param1']['output_value'] = \"output value\" return kwargs server must be running for interject to pull data from. call using python main.py NOTE: the following files are required to exist in the local directory of the server main.py etl.py (arbitrary module name) appconfig.py Output Options Custom functions have the ability to utilize input and output parameters as well as return user messages to Interject. Interject request information is passed to a custom function through the kwargs function argument. Parameters Type Description kwargs['dataframe'] pandas.DataFrame() Pandas dataframe kwargs['user_message'] string Interject User message (notices should contain \"usernotice:\", and errors should contain \"usererror:\") kwargs['param_list'][ParamName]['name'] string The name of the formula parameter in the dataportal kwargs['param_list'][ParamName]['expects_output'] bool Defines if the output_value should replace the value in the report kwargs['param_list'][ParamName]['in_formula'] bool determines whether the parameter is in the report formula or not (system params will be false) kwargs['param_list'][ParamName]['input_value'] any Input parameter value from the user kwargs['param_list'][ParamName]['output_value'] any Output parameter defined by the dataportal kwargs['param_list'][ParamName]['user_validation_msg'] string Not Currently Available "},{"title":"Python API Setup","url":"/wApi/python-api-setup.html","content":"Overview This is an API built on top of Python and Flask for the Interject Excel Add-in. The API Allows execution of pass-through commands on a server/database and returning data to the Interject Excel Add-in. In this walkthrough we will setup a Python API locally which can be used to manage dataflow to and from an Interject Report. Requirements Before the api can be run you need to ensure that your system meets the following requirements: Python 3.4 or greater must be installed Git must be installed (optional) Once Python is installed the dependancies for the Interject Api include: Flask >= 0.12.1 Flask-RESTful >= 0.3.6 SQLAlchemy >= 1.1.15 pycryptodome >= 3.4.0 pyodbc >= 4.0.21 mysqlclient >= 1.3.12 urllib3 requests pyOpenSSL (when running api with HTTPS) Get The Code Start by cloning the repository to your system. git clone https://github.com/GoInterject/ids-python-api Note: If this repo is private and you need access, please contact us. It will be public soon. If you do not have git installed or prefer a different method, simply download the source code from the repository website. Install The Python Package After cloning the repository install the package locally to the python environment using one of the following commands. Linux additional requirements If you are using a linux system it will be important to install the additional 2 tools: install mysql_config (for mysqlclient/MySQL connections): sudo apt-get install libmysqlclient-dev install Microsofts ODBC driver (for pyodbc/MSSQL connections) Install Package python setup.py develop or python setup.py -e . Setup API Get Template Config To run the API, settings related to its functionality need to be set. These are located in the file named appconfig.py. By default the source code has an example config named example_appconfig.py but this must be renamed to appconfig.py. Setup Connection Strings Interject Data Connections contain an Api Connection String Name. In order to allow the API to connect to a Data Connection, it must be added to the CONNECTIONSTRINGS dictionary object following the format 'conn_string_name' : 'conn_string'. As many connection strings as are desired to serve from the server can be added to this variable. # Interject Data Connection Strings available to the server CONNECTIONSTRINGS = { 'MongoDB_Demo': 'mongodb+srv://apiTestUser:randomhashstring.mongodb.net/demo||demo|Demo' } Choose Controllers In the appconfig.py file the variable, CONTROLLERS is an dictionary object with the types of database handles to be loaded by the flask server. Any of these controllers can be set to false and then will not require their dependent packages to be installed. For example if a user only wanted to use the API with a MySQL database then the controllers could be configured like below, which would not require pandas or pymongo packages to be installed. # Controllers define what python packages should be imported CONTROLLERS = { 'MySQL' : True, 'OtherSQL' : False, 'MongoDB' : False, 'Pandas' : False } Custom Functions If the MongoDB or Pandas controllers are being utilized, then it is possible to first pull data into a custom python module before sending it as a outgoing response from the server. This functionality utilizes the Pandas python package and more information can be found in the Python Api Custom Functions page. Running The API Once settings have been configured, the server can be launched using the built-in flask server (main.py) or via the Twisted Web production ready server (server.py) using the following command: python server.py More Information For more information visit the source code and readme for the project on GitHub. "},{"title":"Interject Security Policy","url":"/wAbout/security-policy.html","content":" Overview Interject provides software, consulting, and online services. The management of Interject is committed to preserving the confidentiality, integrity and availability of all the physical and electronic information assets throughout their organization to maintain legal, regulatory and contractual compliance and to safeguard business integrity and commercial reputation. To achieve this, Interject has implemented an information security policy (ISP) that is subject to routine systematic review and improvement. The ISP demonstrates Interject’s commitment to information security by: Budgeting for security management. Implementing appropriate security technology and high-availability, recoverable systems. Routinely evaluating and improving procedures related to security. Adopting and enforcing requisite policies and ensuring that employees are kept aware of the ISP and their responsibilities towards it via communication and training. Striving to maintain compliance with all applicable legal and industry requirements. Interject leverages this ISP to support business objectives within their information systems and processes. The related policies and practices are implemented, communicated, and reviewed on a regular basis and reflect the executive management team’s commitment to information security. In the event of a breach of this policy, or any of its supporting policies, all information relating to the breach will be promptly reported and escalated to Interject management, including Interject’s Security and Privacy Officers as appropriate. Policies and practices are in place to govern the protection of each company’s information assets and any information assets of our customers (and others) that have been entrusted to Interject. Information Security Policy Report Formulas are used to direct data in and out of your spreadsheet reports and applications. This section will illustrate what is behind the scenes of interactive Interject worksheets so you can better understand how they adapt to your needs. Staff Interject employs staff whose responsibility includes the protection of information. In addition, it is the responsibility of all employees to be aware of information security issues within their daily work. To promote awareness, employees of Interject are provided with training on topics such as the company’s security policies, their responsibilities to protect the confidentiality of information entrusted to them, the appropriate use of resources, the extra care required for the protection of mobile devices, and other related topics. Confidentiality Agreements Interject enters into confidentiality or non-disclosure agreements with their vendors, contractors, employees and clients to contractually safeguard personal and other confidential information belonging to Interject or in our custody. Background Checks Interject employees are exposed to confidential customer information and sometimes non-public private information about our customers’ employees and it is critical that we exercise appropriate best practices to ensure that no members of our staff represent a risk to this information. Criminal background checks will be administered on all new hires to ensure confidentiality and maintain appropriate records of these checks. Existing employees may, from time to time, be subject to additional or enhanced background checks as may be required to fulfill contractual requirements or changing industry standards. Audits and Assessments Regular risk assessments are performed internally to help Interject identify any potential risks to their information assets and to help prioritize efforts to mitigate those risks. Periodically, Interject may also engage external firms to perform more in-depth evaluations of their security controls. In addition to external reviews, internal tests are conducted on a regular basis to ensure compliance and verify control effectiveness. Physical Security All sites hosting information belonging to Interject (or information that is managed by Interject on the behalf of others) are secured. Such facilities are protected by physical security barriers and entry controls designed to prevent unauthorized access, damage, and interference. Environmental controls and uninterrupted power supplies are all in place, as are security cameras to monitor the facilities and all entrances to them. Access Control Access to information, information processing facilities, and business processes are controlled on the basis of business and security requirements. Access control rules take into account the basic principle of “need-to-know” and the sensitivity of corporate and personal information. Layers of security controls limit access to information. These include controls at the network, application, operating system, and database levels. Passwords are used in conjunction with each of these layers; they are subject to defined password construction rules and must be changed at regular intervals. Password administration and management are controlled processes that generate automated audit records. Data Communication Security Technologies such as SSL (TLS), and IPsec are used to encrypt data when in transit over public networks. The use of such technologies is dependent upon the level of sensitivity of the information, both corporate and personal. Computer Security Measures Various security technologies are deployed within the infrastructures and include firewalls, anti-virus, antispyware, encryption, and intrusion detection systems and processes. In addition, remote work is provided through a secure remote desktop session or use of cloud applications to help ensure no data is stored on laptops or home computers. Security data is logged where applicable and regularly reviewed to identify policy violations and security incidents. Incidents are investigated to determine severity, root cause, and follow-up actions required. Measures to be taken to prevent re-occurrence are also identified and implemented as needed. Disaster Prevention and Recovery Adequate back-up procedures and testing exist to ensure that all essential information and software can be recovered following a disaster or media failure. Backup information is stored at a remote secure location, at a sufficient distance to escape any damage from a disaster at the primary site. Backup media is protected against unauthorized access, misuse or corruption during transportation beyond the data center boundaries. Combinations of preventive and recovery controls are implemented to help protect from harm due to loss of data or processing capabilities. These controls are designed based on an assessment of risk and are meant to keep the harmful effects of any outages to a minimum. The processes making up these control measures are tested on a regular basis. Contacting Us We have designated a Data Protection Officer who is responsible for monitoring Interject’s ongoing compliance of this Security Policy. If you have any questions about this Security Policy, the practices or concerns of this site, please contact our Data Protection Officer at: security@gointerject.com. For more details on how we handle and protect your personal data, please visit our Privacy Policy Updated March 2020 "}]